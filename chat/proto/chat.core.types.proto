syntax = "proto2";
package msg;
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
option (gogoproto.goproto_enum_prefix_all) = false;

// Ping
message Ping {
    required int64 ID = 1;
}

// Pong
message Pong {
    required int64 ID = 2;
}

// MessageEnvelope
// This type of message will be used to contain another ProtoBuffer Message inside
message MessageEnvelope {
    required int64 Constructor = 1;
    required fixed64 RequestID = 2;
    required bytes Message = 4;
}

// MessageContainer
// This type of message will be used to send multi messages inside a single container message
message MessageContainer {
    required int32 Length = 1;
    repeated MessageEnvelope Envelopes = 2;
}

// UpdateEnvelope
message UpdateEnvelope {
    required int64 Constructor = 1;
    required bytes Update = 2;
    required int32 UCount = 3;
    required int64 UpdateID = 4;
    required int64 Timestamp = 5;
}

// UpdateContainer
// It is very similar to MessageContainer but holding a list of Updates
message UpdateContainer {
    required int32 Length = 1;
    repeated UpdateEnvelope Updates = 2;
    required int64 MinUpdateID = 3;
    required int64 MaxUpdateID = 4;
    repeated User Users = 5;
    repeated Group Groups = 6;
}

// ProtoMessage
// If AuthID == 0 then Payload is a MessageEnvelop otherwise Payload is a ProtoEncryptedPayload
message ProtoMessage {
    optional int64 AuthID = 1;
    optional bytes MessageKey = 2; // 32 bytes
    required bytes Payload = 3;
}

// ProtoMessageEncryptedPayload
message ProtoEncryptedPayload {
    required int64 ServerSalt = 1;
    required uint64 MessageID = 2;
    required int64 SessionID = 3;
    required MessageEnvelope Envelope = 4;
}

// Error
message Error {
    required string Code = 1;
    required string Items = 2;
}

// Ack
message Ack {
    repeated uint64 MessageIDs = 1;
}

// Bool
message Bool {
    required bool Result = 1;
}

// TypingAction
enum TypingAction {
    TypingActionTyping = 0;
    TypingActionRecordingVoice = 1;
    TypingActionRecordingVideo = 2;
    TypingActionUploading = 3;
    TypingActionCancel = 4;
}

// Dialog
message Dialog {
    required int64 PeerID = 1 [jstype = JS_STRING];
    required int32 PeerType = 2;
    required int64 TopMessageID = 3;
    required int64 ReadInboxMaxID = 4;
    required int64 ReadOutboxMaxID = 5;
    required int32 UnreadCount = 6;
    required fixed64 AccessHash = 7 [jstype = JS_STRING];
    optional PeerNotifySettings NotifySettings = 8;
    optional int32 MentionedCount = 9;
    required bool Pinned = 10;
    optional DraftMessage Draft = 11;
}

// Peer
message Peer {
    required int64 ID = 1 [jstype = JS_STRING];
    required int32 Type = 2;
    required fixed64 AccessHash = 3 [jstype = JS_STRING];
}

// InputPeer
message InputPeer {
    required int64 ID = 1 [jstype = JS_STRING];
    required PeerType Type = 2;
    required fixed64 AccessHash = 3 [jstype = JS_STRING];
}

// PeerType
enum PeerType {
    PeerSelf = 0;
    PeerUser = 1;
    PeerGroup = 2;
    PeerSuperGroup = 3;
    PeerChannel = 4;
}

// InputUser
message InputUser {
    required int64 UserID = 1 [jstype = JS_STRING];
    required fixed64 AccessHash = 2 [jstype = JS_STRING];
}

// InputPassword
message InputPassword {
    required int64 SrpID = 1 [jstype = JS_STRING];
    required bytes A = 2;
    required bytes M1 = 3;
}

// UserStatus
enum UserStatus {
    UserStatusOffline = 0;
    UserStatusOnline = 1;
    UserStatusRecently = 2;
    UserStatusLastWeek = 3;
    UserStatusLastMonth = 4;
}

// InputFileLocation
message InputFileLocation {
    required int32 ClusterID = 1;
    required int64 FileID = 2 [jstype = JS_STRING];
    required fixed64 AccessHash = 3 [jstype = JS_STRING];
    optional int32 Version = 4;
}

// FileLocation
message FileLocation {
    required int32 ClusterID = 1;
    required int64 FileID = 2 [jstype = JS_STRING];
    required fixed64 AccessHash = 3 [jstype = JS_STRING];
}

// UserPhoto
message UserPhoto {
    required FileLocation PhotoBig = 1;
    required FileLocation PhotoSmall = 2;
    required int64 PhotoID = 3 [jstype = JS_STRING];
}

// User
message User {
    required int64 ID = 1 [jstype = JS_STRING];
    required string FirstName = 2;
    required string LastName = 3;
    optional string Username = 4;
    required UserStatus Status = 5;
    required bool Restricted = 6;
    required fixed64 AccessHash = 7 [jstype = JS_STRING];
    optional UserPhoto Photo = 8;
    optional string Bio = 9;
    optional string Phone = 10;
    optional int64 LastSeen = 11;
    repeated UserPhoto PhotoGallery = 12;
    optional bool IsBot = 13;
    optional bool Deleted = 14;
    optional bool Blocked = 15;
    optional BotInfo BotInfo = 16;
    optional bool Official = 17;
}

// Bot
message Bot {
    required int64 ID = 1 [jstype = JS_STRING];
    required string Name = 2;
    required string Username = 3;
    optional string Bio = 4;
}

// BotCommands
message BotCommands {
    required string Command = 1;
    optional string Description = 2;
}

// BotInfo
message BotInfo {
    required Bot Bot = 1;
    required int64 UserID = 2;
    optional string Description = 3;
    repeated BotCommands BotCommands = 4;
    optional bool InlineGeo = 5;
    optional string InlinePlaceHolder = 6;
    optional bool InlineQuery = 7;
}

// ContactUser
message ContactUser {
    required int64 ID = 1 [jstype = JS_STRING];
    required string FirstName = 2;
    required string LastName = 3;
    required fixed64 AccessHash = 4 [jstype = JS_STRING];
    required string Phone = 5;
    required string Username = 6;
    required int64 ClientID = 7 [jstype = JS_STRING];
    optional UserPhoto Photo = 8;
}

// MediaType
enum MediaType {
    MediaTypeEmpty = 0;
    MediaTypePoll = 1;
    MediaTypeDocument = 2;
    MediaTypeContact = 3;
    MediaTypeGeoLocation = 4;
    MediaTypeInvoice = 5;
    MediaTypeWebDocument = 6;
    MediaTypeReserved2 = 7;
    MediaTypeReserved3 = 8;
    MediaTypeReserved4 = 9;
    MediaTypeReserved5 = 10;
}

enum InputMediaType {
    InputMediaTypeEmpty = 0;
    InputMediaTypeInvoice = 1;
    InputMediaTypePoll = 2;
    InputMediaTypeContact = 3;
    InputMediaTypeUploadedDocument = 4;
    InputMediaTypeDocument = 5;
    InputMediaTypeGeoLocation = 6;
    InputMediaTypeWebDocument = 7;
    InputMediaTypeReserved2 = 8;
    InputMediaTypeReserved3 = 9;
    InputMediaTypeReserved4 = 10;
    InputMediaTypeReserved5 = 11;
    InputMediaTypeReserved6 = 12;
    InputMediaTypeReserved7 = 13;
    InputMediaTypeReserved8 = 14;
}

// UserMessage
message UserMessage {
    required int64 ID = 1;
    required int64 PeerID = 2 [jstype = JS_STRING];
    required int32 PeerType = 3;
    required int64 CreatedOn = 4;
    required int64 EditedOn = 5;
    required int64 FwdSenderID = 6 [jstype = JS_STRING];
    required int64 FwdChannelID = 7 [jstype = JS_STRING];
    required int64 FwdChannelMessageID = 8 [jstype = JS_STRING];
    required int32 Flags = 9;
    required int64 MessageType = 10;
    required string Body = 11;
    required int64 SenderID = 12 [jstype = JS_STRING];
    required bool ContentRead = 13;
    required bool Inbox = 14;
    required int64 ReplyTo = 15;
    optional int32 MessageAction = 16;
    optional bytes MessageActionData = 17;
    repeated MessageEntity Entities = 18;
    optional MediaType MediaType = 19;
    optional bytes Media = 20;
    optional int64 ReplyMarkup = 21;
    optional bytes ReplyMarkupData = 22;
    repeated int32 LabelIDs = 23;
    optional int64 ViaBotID = 24;
}

// DraftMessage
message DraftMessage {
    required int64 PeerID = 2 [jstype = JS_STRING];
    required int32 PeerType = 3;
    required int64 Date = 4;
    required string Body = 5;
    repeated MessageEntity Entities = 6;
    required int64 ReplyTo = 7;
    optional int64 EditedID = 8;
}

// MessageEntityType
enum MessageEntityType {
    MessageEntityTypeBold = 0;
    MessageEntityTypeItalic = 1;
    MessageEntityTypeMention = 2;
    MessageEntityTypeUrl = 3;
    MessageEntityTypeEmail = 4;
    MessageEntityTypeHashTag = 5;
    MessageEntityTypeCode = 6;
    MessageEntityTypeBotCommand = 7;
    MessageEntityTypeReserved3 = 8;
    MessageEntityTypeReserved4 = 9;
    MessageEntityTypeReserved5 = 10;
    MessageEntityTypeReserved6 = 11;
    MessageEntityTypeReserved7 = 12;
    MessageEntityTypeReserved8 = 13;
}

// MessageEntity
message MessageEntity {
    required MessageEntityType Type = 1;
    required int32 Offset = 2;
    required int32 Length = 3;
    optional int64 UserID = 4 [jstype = JS_STRING];
}

// RSAPublicKey
message RSAPublicKey {
    required int64 FingerPrint = 1;
    required string N = 2;
    required uint32 E = 3;
}

// DHGroup
message DHGroup {
    required int64 FingerPrint = 1;
    required string Prime = 2;
    required int32 Gen = 3;
}

// PhoneContact
message PhoneContact {
    required int64 ClientID = 1 [jstype = JS_STRING];
    required string FirstName = 2;
    required string LastName = 3;
    required string Phone = 4;
}

// PeerNotifySettings
message PeerNotifySettings {
    required int32 Flags = 1;
    optional int64 MuteUntil = 2;
    optional string Sound = 3;
}

// InputFile
message InputFile {
    required int64 FileID = 1 [jstype = JS_STRING];
    required int32 TotalParts = 2;
    required string FileName = 3;
    required string MD5Checksum = 4;
}

// GroupFlags
enum GroupFlags {
    GroupFlagsEmpty = 0;
    GroupFlagsCreator = 1;
    GroupFlagsNonParticipant = 2;
    GroupFlagsAdmin = 3;
    GroupFlagsAdminsEnabled = 4;
    GroupFlagsDeactivated = 5;
}

// GroupPhoto
message GroupPhoto {
    required FileLocation PhotoBig = 1;
    required FileLocation PhotoSmall = 2;
    optional int64 PhotoID = 3 [jstype = JS_STRING];
}

// Group
message Group {
    required int64 ID = 1 [jstype = JS_STRING];
    required string Title = 2;
    required int64 CreatedOn = 3;
    required int32 Participants = 4;
    optional int64 EditedOn = 5;
    repeated GroupFlags Flags = 6;
    optional GroupPhoto Photo = 7;
}

// GroupFull
message GroupFull {
    required Group Group = 1;
    repeated User Users = 2;
    repeated GroupParticipant Participants = 3;
    required PeerNotifySettings NotifySettings = 4;
    repeated GroupPhoto PhotoGallery = 5;
}

// ParticipantType
enum ParticipantType {
    ParticipantTypeMember = 0;
    ParticipantTypeAdmin = 1;
    ParticipantTypeCreator = 2;
}

// GroupParticipant
message GroupParticipant {
    required int64 UserID = 1 [jstype = JS_STRING];
    required string FirstName = 2;
    required string LastName = 3;
    required ParticipantType Type = 4;
    required uint64 AccessHash = 5 [jstype = JS_STRING];
    required string Username = 6;
    optional UserPhoto Photo = 8;
}

// InputDocument
message InputDocument {
    required int64 ID = 1 [jstype = JS_STRING];
    required fixed64 AccessHash = 2 [jstype = JS_STRING];
    required int32 ClusterID = 3;
}

// NotificationType
enum PushTokenProvider {
    PushTokenFirebase = 0;
    PushTokenApn = 1;
    PushTokenPushKit = 2;
}

// AccountPrivacyKey
enum PrivacyKey {
    PrivacyKeyNone = 0;
    PrivacyKeyChatInvite = 1;
    PrivacyKeyLastSeen = 2;
    PrivacyKeyPhoneNumber = 3;
    PrivacyKeyProfilePhoto = 4;
    PrivacyKeyForwardedMessage = 5;
    PrivacyKeyCall = 6;
    PrivacyKeyReserved1 = 7;
    PrivacyKeyReserved2 = 8;
    PrivacyKeyReserved3 = 9;
    PrivacyKeyReserved4 = 10;
    PrivacyKeyReserved5 = 11;
    PrivacyKeyReserved6 = 12;
}

// AccountPrivacyValue
enum PrivacyType {
    PrivacyTypeAllowAll = 0;
    PrivacyTypeAllowContacts = 1;
    PrivacyTypeDisallowAll = 2;
    //    Order is very important, exceptions are started from 101
    PrivacyTypeAllowUsers = 101;
    PrivacyTypeDisallowUsers = 102;
}

// PrivacyRule
message PrivacyRule {
    required PrivacyType PrivacyType = 1;
    repeated int64 UserIDs = 2 [jstype = JS_STRING];
}

// Label
message Label {
    required int32 ID = 1;
    required string Name = 2;
    required string Colour = 3;
    optional int32 Count = 4;
}

// LabelsMany
message LabelsMany {
    repeated Label Labels = 1;
}

// GeoLocation
message GeoLocation {
    required float Lat = 1;
    required float Long = 2;
}

// InputGeoLocation
message InputGeoLocation {
    required float Lat = 1;
    required float Long = 2;
}
