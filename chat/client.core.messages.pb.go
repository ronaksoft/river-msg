// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client.core.messages.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ClientFileType
type ClientFileType int32

const (
	ClientFileType_Unknown             ClientFileType = 0
	ClientFileType_Message             ClientFileType = 1
	ClientFileType_AccountProfilePhoto ClientFileType = 2
	ClientFileType_GroupProfilePhoto   ClientFileType = 3
	ClientFileType_Sticker             ClientFileType = 4
	ClientFileType_Thumbnail           ClientFileType = 5
)

var ClientFileType_name = map[int32]string{
	0: "Unknown",
	1: "Message",
	2: "AccountProfilePhoto",
	3: "GroupProfilePhoto",
	4: "Sticker",
	5: "Thumbnail",
}

var ClientFileType_value = map[string]int32{
	"Unknown":             0,
	"Message":             1,
	"AccountProfilePhoto": 2,
	"GroupProfilePhoto":   3,
	"Sticker":             4,
	"Thumbnail":           5,
}

func (x ClientFileType) Enum() *ClientFileType {
	p := new(ClientFileType)
	*p = x
	return p
}

func (x ClientFileType) String() string {
	return proto.EnumName(ClientFileType_name, int32(x))
}

func (x *ClientFileType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientFileType_value, data, "ClientFileType")
	if err != nil {
		return err
	}
	*x = ClientFileType(value)
	return nil
}

func (ClientFileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{0}
}

// ClientPendingMessage
type ClientPendingMessage struct {
	ID            int64            `protobuf:"varint,1,req,name=ID" json:"ID"`
	RequestID     int64            `protobuf:"varint,2,req,name=RequestID" json:"RequestID"`
	PeerID        int64            `protobuf:"varint,3,req,name=PeerID" json:"PeerID"`
	PeerType      int32            `protobuf:"varint,4,req,name=PeerType" json:"PeerType"`
	AccessHash    uint64           `protobuf:"fixed64,5,req,name=AccessHash" json:"AccessHash"`
	CreatedOn     int64            `protobuf:"varint,6,req,name=CreatedOn" json:"CreatedOn"`
	ReplyTo       int64            `protobuf:"varint,7,req,name=ReplyTo" json:"ReplyTo"`
	Body          string           `protobuf:"bytes,8,req,name=Body" json:"Body"`
	SenderID      int64            `protobuf:"varint,9,req,name=SenderID" json:"SenderID"`
	Entities      []*MessageEntity `protobuf:"bytes,10,rep,name=Entities" json:"Entities,omitempty"`
	MediaType     InputMediaType   `protobuf:"varint,11,opt,name=MediaType,enum=msg.InputMediaType" json:"MediaType"`
	Media         []byte           `protobuf:"bytes,12,opt,name=Media" json:"Media"`
	ClearDraft    bool             `protobuf:"varint,13,opt,name=ClearDraft" json:"ClearDraft"`
	FileUploadID  string           `protobuf:"bytes,14,opt,name=FileUploadID" json:"FileUploadID"`
	ThumbUploadID string           `protobuf:"bytes,15,opt,name=ThumbUploadID" json:"ThumbUploadID"`
	FileID        int64            `protobuf:"varint,16,opt,name=FileID" json:"FileID"`
	ThumbID       int64            `protobuf:"varint,17,opt,name=ThumbID" json:"ThumbID"`
}

func (m *ClientPendingMessage) Reset()         { *m = ClientPendingMessage{} }
func (m *ClientPendingMessage) String() string { return proto.CompactTextString(m) }
func (*ClientPendingMessage) ProtoMessage()    {}
func (*ClientPendingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{0}
}
func (m *ClientPendingMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientPendingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientPendingMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientPendingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientPendingMessage.Merge(m, src)
}
func (m *ClientPendingMessage) XXX_Size() int {
	return m.Size()
}
func (m *ClientPendingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientPendingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientPendingMessage proto.InternalMessageInfo

func (m *ClientPendingMessage) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClientPendingMessage) GetRequestID() int64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *ClientPendingMessage) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *ClientPendingMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *ClientPendingMessage) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ClientPendingMessage) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *ClientPendingMessage) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *ClientPendingMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *ClientPendingMessage) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *ClientPendingMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ClientPendingMessage) GetMediaType() InputMediaType {
	if m != nil {
		return m.MediaType
	}
	return InputMediaTypeEmpty
}

func (m *ClientPendingMessage) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *ClientPendingMessage) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *ClientPendingMessage) GetFileUploadID() string {
	if m != nil {
		return m.FileUploadID
	}
	return ""
}

func (m *ClientPendingMessage) GetThumbUploadID() string {
	if m != nil {
		return m.ThumbUploadID
	}
	return ""
}

func (m *ClientPendingMessage) GetFileID() int64 {
	if m != nil {
		return m.FileID
	}
	return 0
}

func (m *ClientPendingMessage) GetThumbID() int64 {
	if m != nil {
		return m.ThumbID
	}
	return 0
}

// ClientSendMessageMedia
// @Function
type ClientSendMessageMedia struct {
	Peer           *InputPeer           `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MediaType      InputMediaType       `protobuf:"varint,2,req,name=MediaType,enum=msg.InputMediaType" json:"MediaType"`
	Caption        string               `protobuf:"bytes,3,opt,name=Caption" json:"Caption"`
	FileName       string               `protobuf:"bytes,4,opt,name=FileName" json:"FileName"`
	FilePath       string               `protobuf:"bytes,5,opt,name=FilePath" json:"FilePath"`
	ThumbFilePath  string               `protobuf:"bytes,6,opt,name=ThumbFilePath" json:"ThumbFilePath"`
	FileMIME       string               `protobuf:"bytes,7,opt,name=FileMIME" json:"FileMIME"`
	ThumbMIME      string               `protobuf:"bytes,8,opt,name=ThumbMIME" json:"ThumbMIME"`
	ReplyTo        int64                `protobuf:"varint,9,opt,name=ReplyTo" json:"ReplyTo"`
	ClearDraft     bool                 `protobuf:"varint,10,opt,name=ClearDraft" json:"ClearDraft"`
	Attributes     []*DocumentAttribute `protobuf:"bytes,11,rep,name=Attributes" json:"Attributes,omitempty"`
	FileUploadID   string               `protobuf:"bytes,12,opt,name=FileUploadID" json:"FileUploadID"`
	ThumbUploadID  string               `protobuf:"bytes,13,opt,name=ThumbUploadID" json:"ThumbUploadID"`
	FileID         int64                `protobuf:"varint,14,opt,name=FileID" json:"FileID"`
	ThumbID        int64                `protobuf:"varint,15,opt,name=ThumbID" json:"ThumbID"`
	FileTotalParts int32                `protobuf:"varint,16,opt,name=FileTotalParts" json:"FileTotalParts"`
}

func (m *ClientSendMessageMedia) Reset()         { *m = ClientSendMessageMedia{} }
func (m *ClientSendMessageMedia) String() string { return proto.CompactTextString(m) }
func (*ClientSendMessageMedia) ProtoMessage()    {}
func (*ClientSendMessageMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{1}
}
func (m *ClientSendMessageMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSendMessageMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSendMessageMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientSendMessageMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSendMessageMedia.Merge(m, src)
}
func (m *ClientSendMessageMedia) XXX_Size() int {
	return m.Size()
}
func (m *ClientSendMessageMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSendMessageMedia.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSendMessageMedia proto.InternalMessageInfo

func (m *ClientSendMessageMedia) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ClientSendMessageMedia) GetMediaType() InputMediaType {
	if m != nil {
		return m.MediaType
	}
	return InputMediaTypeEmpty
}

func (m *ClientSendMessageMedia) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ClientSendMessageMedia) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ClientSendMessageMedia) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *ClientSendMessageMedia) GetThumbFilePath() string {
	if m != nil {
		return m.ThumbFilePath
	}
	return ""
}

func (m *ClientSendMessageMedia) GetFileMIME() string {
	if m != nil {
		return m.FileMIME
	}
	return ""
}

func (m *ClientSendMessageMedia) GetThumbMIME() string {
	if m != nil {
		return m.ThumbMIME
	}
	return ""
}

func (m *ClientSendMessageMedia) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *ClientSendMessageMedia) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *ClientSendMessageMedia) GetAttributes() []*DocumentAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ClientSendMessageMedia) GetFileUploadID() string {
	if m != nil {
		return m.FileUploadID
	}
	return ""
}

func (m *ClientSendMessageMedia) GetThumbUploadID() string {
	if m != nil {
		return m.ThumbUploadID
	}
	return ""
}

func (m *ClientSendMessageMedia) GetFileID() int64 {
	if m != nil {
		return m.FileID
	}
	return 0
}

func (m *ClientSendMessageMedia) GetThumbID() int64 {
	if m != nil {
		return m.ThumbID
	}
	return 0
}

func (m *ClientSendMessageMedia) GetFileTotalParts() int32 {
	if m != nil {
		return m.FileTotalParts
	}
	return 0
}

// ClientGlobalSearch
// @Function
type ClientGlobalSearch struct {
	Text     string     `protobuf:"bytes,1,opt,name=Text" json:"Text"`
	LabelIDs []int32    `protobuf:"varint,2,rep,name=LabelIDs" json:"LabelIDs,omitempty"`
	Peer     *InputPeer `protobuf:"bytes,3,opt,name=Peer" json:"Peer,omitempty"`
	Limit    int32      `protobuf:"varint,4,req,name=Limit" json:"Limit"`
}

func (m *ClientGlobalSearch) Reset()         { *m = ClientGlobalSearch{} }
func (m *ClientGlobalSearch) String() string { return proto.CompactTextString(m) }
func (*ClientGlobalSearch) ProtoMessage()    {}
func (*ClientGlobalSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{2}
}
func (m *ClientGlobalSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGlobalSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGlobalSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGlobalSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGlobalSearch.Merge(m, src)
}
func (m *ClientGlobalSearch) XXX_Size() int {
	return m.Size()
}
func (m *ClientGlobalSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGlobalSearch.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGlobalSearch proto.InternalMessageInfo

func (m *ClientGlobalSearch) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ClientGlobalSearch) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

func (m *ClientGlobalSearch) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ClientGlobalSearch) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// ClientContactSearch
// @Function
type ClientContactSearch struct {
	Text string `protobuf:"bytes,1,req,name=Text" json:"Text"`
}

func (m *ClientContactSearch) Reset()         { *m = ClientContactSearch{} }
func (m *ClientContactSearch) String() string { return proto.CompactTextString(m) }
func (*ClientContactSearch) ProtoMessage()    {}
func (*ClientContactSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{3}
}
func (m *ClientContactSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientContactSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientContactSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientContactSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientContactSearch.Merge(m, src)
}
func (m *ClientContactSearch) XXX_Size() int {
	return m.Size()
}
func (m *ClientContactSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientContactSearch.DiscardUnknown(m)
}

var xxx_messageInfo_ClientContactSearch proto.InternalMessageInfo

func (m *ClientContactSearch) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// ClientSearchResult
type ClientSearchResult struct {
	Messages      []*UserMessage `protobuf:"bytes,1,rep,name=Messages" json:"Messages,omitempty"`
	Users         []*User        `protobuf:"bytes,2,rep,name=Users" json:"Users,omitempty"`
	Groups        []*Group       `protobuf:"bytes,3,rep,name=Groups" json:"Groups,omitempty"`
	MatchedUsers  []*User        `protobuf:"bytes,4,rep,name=MatchedUsers" json:"MatchedUsers,omitempty"`
	MatchedGroups []*Group       `protobuf:"bytes,5,rep,name=MatchedGroups" json:"MatchedGroups,omitempty"`
}

func (m *ClientSearchResult) Reset()         { *m = ClientSearchResult{} }
func (m *ClientSearchResult) String() string { return proto.CompactTextString(m) }
func (*ClientSearchResult) ProtoMessage()    {}
func (*ClientSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{4}
}
func (m *ClientSearchResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSearchResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSearchResult.Merge(m, src)
}
func (m *ClientSearchResult) XXX_Size() int {
	return m.Size()
}
func (m *ClientSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSearchResult proto.InternalMessageInfo

func (m *ClientSearchResult) GetMessages() []*UserMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ClientSearchResult) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ClientSearchResult) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ClientSearchResult) GetMatchedUsers() []*User {
	if m != nil {
		return m.MatchedUsers
	}
	return nil
}

func (m *ClientSearchResult) GetMatchedGroups() []*Group {
	if m != nil {
		return m.MatchedGroups
	}
	return nil
}

// ClientFile
type ClientFile struct {
	ClusterID  int32          `protobuf:"varint,1,req,name=ClusterID" json:"ClusterID"`
	FileID     int64          `protobuf:"varint,2,req,name=FileID" json:"FileID"`
	AccessHash uint64         `protobuf:"varint,3,req,name=AccessHash" json:"AccessHash"`
	Type       ClientFileType `protobuf:"varint,4,req,name=Type,enum=msg.ClientFileType" json:"Type"`
	MimeType   string         `protobuf:"bytes,5,opt,name=MimeType" json:"MimeType"`
	UserID     int64          `protobuf:"varint,6,opt,name=UserID" json:"UserID"`
	GroupID    int64          `protobuf:"varint,7,opt,name=GroupID" json:"GroupID"`
	FileSize   int64          `protobuf:"varint,8,req,name=FileSize" json:"FileSize"`
	MessageID  int64          `protobuf:"varint,9,opt,name=MessageID" json:"MessageID"`
	PeerID     int64          `protobuf:"varint,10,opt,name=PeerID" json:"PeerID"`
	PeerType   int32          `protobuf:"varint,11,opt,name=PeerType" json:"PeerType"`
	Version    int32          `protobuf:"varint,12,opt,name=Version" json:"Version"`
	Extension  string         `protobuf:"bytes,13,opt,name=Extension" json:"Extension"`
}

func (m *ClientFile) Reset()         { *m = ClientFile{} }
func (m *ClientFile) String() string { return proto.CompactTextString(m) }
func (*ClientFile) ProtoMessage()    {}
func (*ClientFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{5}
}
func (m *ClientFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientFile.Merge(m, src)
}
func (m *ClientFile) XXX_Size() int {
	return m.Size()
}
func (m *ClientFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientFile.DiscardUnknown(m)
}

var xxx_messageInfo_ClientFile proto.InternalMessageInfo

func (m *ClientFile) GetClusterID() int32 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *ClientFile) GetFileID() int64 {
	if m != nil {
		return m.FileID
	}
	return 0
}

func (m *ClientFile) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ClientFile) GetType() ClientFileType {
	if m != nil {
		return m.Type
	}
	return ClientFileType_Unknown
}

func (m *ClientFile) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *ClientFile) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ClientFile) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *ClientFile) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *ClientFile) GetMessageID() int64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *ClientFile) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *ClientFile) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *ClientFile) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ClientFile) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

// ClientFileStatus
type ClientFileStatus struct {
	Status   int32  `protobuf:"varint,1,req,name=Status" json:"Status"`
	Progress int64  `protobuf:"varint,2,req,name=Progress" json:"Progress"`
	FilePath string `protobuf:"bytes,3,req,name=FilePath" json:"FilePath"`
}

func (m *ClientFileStatus) Reset()         { *m = ClientFileStatus{} }
func (m *ClientFileStatus) String() string { return proto.CompactTextString(m) }
func (*ClientFileStatus) ProtoMessage()    {}
func (*ClientFileStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{6}
}
func (m *ClientFileStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientFileStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientFileStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientFileStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientFileStatus.Merge(m, src)
}
func (m *ClientFileStatus) XXX_Size() int {
	return m.Size()
}
func (m *ClientFileStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientFileStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClientFileStatus proto.InternalMessageInfo

func (m *ClientFileStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ClientFileStatus) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *ClientFileStatus) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

// DBMediaInfo
type DBMediaInfo struct {
	MediaInfo []*PeerMediaInfo `protobuf:"bytes,1,rep,name=MediaInfo" json:"MediaInfo,omitempty"`
}

func (m *DBMediaInfo) Reset()         { *m = DBMediaInfo{} }
func (m *DBMediaInfo) String() string { return proto.CompactTextString(m) }
func (*DBMediaInfo) ProtoMessage()    {}
func (*DBMediaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{7}
}
func (m *DBMediaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBMediaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBMediaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBMediaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBMediaInfo.Merge(m, src)
}
func (m *DBMediaInfo) XXX_Size() int {
	return m.Size()
}
func (m *DBMediaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DBMediaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DBMediaInfo proto.InternalMessageInfo

func (m *DBMediaInfo) GetMediaInfo() []*PeerMediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

// PeerMediaInfo
type PeerMediaInfo struct {
	PeerID int64        `protobuf:"varint,1,req,name=PeerID" json:"PeerID"`
	Media  []*MediaSize `protobuf:"bytes,2,rep,name=Media" json:"Media,omitempty"`
}

func (m *PeerMediaInfo) Reset()         { *m = PeerMediaInfo{} }
func (m *PeerMediaInfo) String() string { return proto.CompactTextString(m) }
func (*PeerMediaInfo) ProtoMessage()    {}
func (*PeerMediaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{8}
}
func (m *PeerMediaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerMediaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerMediaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerMediaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerMediaInfo.Merge(m, src)
}
func (m *PeerMediaInfo) XXX_Size() int {
	return m.Size()
}
func (m *PeerMediaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerMediaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PeerMediaInfo proto.InternalMessageInfo

func (m *PeerMediaInfo) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *PeerMediaInfo) GetMedia() []*MediaSize {
	if m != nil {
		return m.Media
	}
	return nil
}

// MediaSize
type MediaSize struct {
	MediaType int32 `protobuf:"varint,1,req,name=MediaType" json:"MediaType"`
	TotalSize int32 `protobuf:"varint,2,req,name=TotalSize" json:"TotalSize"`
}

func (m *MediaSize) Reset()         { *m = MediaSize{} }
func (m *MediaSize) String() string { return proto.CompactTextString(m) }
func (*MediaSize) ProtoMessage()    {}
func (*MediaSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{9}
}
func (m *MediaSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaSize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaSize.Merge(m, src)
}
func (m *MediaSize) XXX_Size() int {
	return m.Size()
}
func (m *MediaSize) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaSize.DiscardUnknown(m)
}

var xxx_messageInfo_MediaSize proto.InternalMessageInfo

func (m *MediaSize) GetMediaType() int32 {
	if m != nil {
		return m.MediaType
	}
	return 0
}

func (m *MediaSize) GetTotalSize() int32 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func init() {
	proto.RegisterEnum("msg.ClientFileType", ClientFileType_name, ClientFileType_value)
	proto.RegisterType((*ClientPendingMessage)(nil), "msg.ClientPendingMessage")
	proto.RegisterType((*ClientSendMessageMedia)(nil), "msg.ClientSendMessageMedia")
	proto.RegisterType((*ClientGlobalSearch)(nil), "msg.ClientGlobalSearch")
	proto.RegisterType((*ClientContactSearch)(nil), "msg.ClientContactSearch")
	proto.RegisterType((*ClientSearchResult)(nil), "msg.ClientSearchResult")
	proto.RegisterType((*ClientFile)(nil), "msg.ClientFile")
	proto.RegisterType((*ClientFileStatus)(nil), "msg.ClientFileStatus")
	proto.RegisterType((*DBMediaInfo)(nil), "msg.DBMediaInfo")
	proto.RegisterType((*PeerMediaInfo)(nil), "msg.PeerMediaInfo")
	proto.RegisterType((*MediaSize)(nil), "msg.MediaSize")
}

func init() { proto.RegisterFile("client.core.messages.proto", fileDescriptor_7f24b167aa6ec46f) }

var fileDescriptor_7f24b167aa6ec46f = []byte{
	// 1110 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x4d, 0x6f, 0xdb, 0x36,
	0x18, 0x8e, 0x24, 0x3b, 0xb6, 0xe9, 0x8f, 0xba, 0x4c, 0x3f, 0x08, 0x63, 0x70, 0x05, 0xa1, 0x07,
	0xa3, 0x68, 0xbd, 0x22, 0x87, 0xed, 0x38, 0x24, 0x51, 0xd6, 0x09, 0xa8, 0xb7, 0x40, 0x4e, 0x76,
	0x67, 0x64, 0x26, 0x16, 0x2a, 0x4b, 0x9e, 0x48, 0x6f, 0xcd, 0x7e, 0xc2, 0x76, 0xd9, 0xcf, 0xea,
	0x65, 0x40, 0x8f, 0x3b, 0x0d, 0x43, 0x72, 0xd9, 0x1f, 0xd8, 0x7d, 0x78, 0x29, 0x8a, 0xa2, 0x9c,
	0xb4, 0xc8, 0x2d, 0x7a, 0x9e, 0x87, 0xcc, 0xfb, 0xf1, 0xf0, 0x7d, 0x8d, 0x46, 0x51, 0x12, 0xb3,
	0x54, 0x4c, 0xa3, 0x2c, 0x67, 0xd3, 0x15, 0xe3, 0x9c, 0x5e, 0x32, 0x3e, 0x5d, 0xe7, 0x99, 0xc8,
	0xb0, 0xb3, 0xe2, 0x97, 0xa3, 0xc7, 0xd1, 0x92, 0x2a, 0x5a, 0x5c, 0xad, 0x4b, 0x6e, 0xf4, 0x54,
	0xc2, 0x74, 0x1d, 0x6f, 0x1d, 0x1a, 0x8d, 0x2b, 0xbd, 0x62, 0xa6, 0x2b, 0xb6, 0x88, 0xa9, 0xe2,
	0xbd, 0xff, 0x1a, 0xe8, 0xd1, 0x91, 0xfc, 0x9f, 0x27, 0x2c, 0x5d, 0xc4, 0xe9, 0xe5, 0xac, 0x50,
	0xe1, 0x47, 0xc8, 0x0e, 0x7c, 0x62, 0xb9, 0xf6, 0xc4, 0x39, 0x6c, 0x7c, 0xf8, 0xfb, 0xd9, 0x4e,
	0x68, 0x07, 0x3e, 0xf6, 0x50, 0x27, 0x64, 0x3f, 0x6d, 0x18, 0x17, 0x81, 0x4f, 0x6c, 0x83, 0xac,
	0x60, 0xfc, 0x05, 0xda, 0x3d, 0x61, 0x2c, 0x0f, 0x7c, 0xe2, 0x18, 0x02, 0x85, 0x61, 0x17, 0xb5,
	0xe1, 0xaf, 0xd3, 0xab, 0x35, 0x23, 0x0d, 0xd7, 0x9e, 0x34, 0x15, 0xaf, 0x51, 0xfc, 0x1c, 0xa1,
	0x83, 0x28, 0x62, 0x9c, 0x7f, 0x47, 0xf9, 0x92, 0x34, 0x5d, 0x7b, 0xb2, 0xab, 0x34, 0x06, 0x0e,
	0x91, 0x1c, 0xe5, 0x8c, 0x0a, 0xb6, 0xf8, 0x21, 0x25, 0xbb, 0x66, 0x24, 0x1a, 0xc6, 0x63, 0xd4,
	0x0a, 0xd9, 0x3a, 0xb9, 0x3a, 0xcd, 0x48, 0xcb, 0x50, 0x94, 0x20, 0x26, 0xa8, 0x71, 0x98, 0x2d,
	0xae, 0x48, 0xdb, 0xb5, 0x27, 0x1d, 0x45, 0x4a, 0x04, 0xa2, 0x9c, 0xb3, 0x74, 0x21, 0xb3, 0xe8,
	0x18, 0x47, 0x35, 0x8a, 0xa7, 0xa8, 0x7d, 0x9c, 0x8a, 0x58, 0xc4, 0x8c, 0x13, 0xe4, 0x3a, 0x93,
	0xee, 0x3e, 0x9e, 0xae, 0xf8, 0xe5, 0x54, 0xd5, 0x4f, 0x72, 0x57, 0xa1, 0xd6, 0xe0, 0xaf, 0x51,
	0x67, 0x06, 0x85, 0x97, 0x89, 0x77, 0x5d, 0x6b, 0x32, 0xd8, 0xdf, 0x93, 0x07, 0x82, 0x74, 0xbd,
	0x11, 0x9a, 0x2a, 0x93, 0xd0, 0x00, 0x1e, 0xa1, 0xa6, 0xfc, 0x20, 0x3d, 0xd7, 0x9a, 0xf4, 0x14,
	0x5f, 0x40, 0x50, 0xaa, 0xa3, 0x84, 0xd1, 0xdc, 0xcf, 0xe9, 0x85, 0x20, 0x7d, 0xd7, 0x9a, 0xb4,
	0xcb, 0x52, 0x55, 0x38, 0x9e, 0xa0, 0xde, 0xb7, 0x71, 0xc2, 0xce, 0xd6, 0x49, 0x46, 0x17, 0x81,
	0x4f, 0x06, 0xae, 0xa5, 0xd3, 0xad, 0x31, 0xf8, 0x05, 0xea, 0x9f, 0x2e, 0x37, 0xab, 0x73, 0x2d,
	0x7d, 0x60, 0x48, 0xeb, 0x14, 0xb4, 0x19, 0xce, 0x06, 0x3e, 0x19, 0xba, 0x56, 0xd5, 0xe6, 0x02,
	0x83, 0xd2, 0x4b, 0x79, 0xe0, 0x93, 0x87, 0x06, 0x5d, 0x82, 0xde, 0xef, 0x4d, 0xf4, 0xa4, 0xf0,
	0x1d, 0x54, 0x54, 0x15, 0xad, 0x48, 0xca, 0x43, 0x0d, 0xf0, 0x82, 0xf4, 0x5e, 0x77, 0x7f, 0x50,
	0x15, 0x09, 0xd0, 0x50, 0x72, 0xf5, 0x6a, 0x82, 0x0f, 0xef, 0x5b, 0xcd, 0x31, 0x6a, 0x1d, 0xd1,
	0xb5, 0x88, 0xb3, 0x94, 0x38, 0x46, 0x6e, 0x25, 0x08, 0x8d, 0x87, 0x0c, 0xbe, 0xa7, 0x2b, 0xb0,
	0x67, 0x25, 0xd0, 0x68, 0xa9, 0x38, 0xa1, 0x02, 0xcc, 0xb9, 0xa5, 0x00, 0x54, 0x57, 0x51, 0xcb,
	0x76, 0x6f, 0x55, 0x51, 0x6b, 0xd5, 0x6d, 0xb3, 0x60, 0x76, 0x4c, 0x5a, 0xdb, 0xb7, 0x01, 0x0a,
	0x46, 0x97, 0x47, 0xa4, 0xa4, 0x6d, 0x48, 0x2a, 0xd8, 0x34, 0x7a, 0xc7, 0xac, 0x76, 0x69, 0xf4,
	0xba, 0x4f, 0xd0, 0x27, 0x7c, 0xf2, 0x15, 0x42, 0x07, 0x42, 0xe4, 0xf1, 0xf9, 0x46, 0x30, 0x4e,
	0xba, 0xd2, 0xd4, 0x4f, 0x64, 0x55, 0xfd, 0x2c, 0xda, 0xac, 0x58, 0x2a, 0x34, 0x1d, 0x1a, 0xca,
	0x5b, 0xfe, 0xea, 0xdd, 0xdf, 0x5f, 0xfd, 0xfb, 0xf8, 0x6b, 0xf0, 0x79, 0x7f, 0x3d, 0xb8, 0xc3,
	0x5f, 0xf8, 0x25, 0x1a, 0x80, 0xf2, 0x34, 0x13, 0x34, 0x39, 0xa1, 0xb9, 0xe0, 0xd2, 0xa5, 0xe5,
	0xb0, 0xd9, 0xe2, 0xbc, 0xdf, 0x2c, 0x84, 0x0b, 0x37, 0xbe, 0x49, 0xb2, 0x73, 0x9a, 0xcc, 0x19,
	0xcd, 0xa3, 0x25, 0xcc, 0x87, 0x53, 0xf6, 0x5e, 0x10, 0xcb, 0x88, 0x52, 0x22, 0x78, 0x84, 0xda,
	0x6f, 0xe9, 0x39, 0x4b, 0x02, 0x9f, 0x13, 0xdb, 0x75, 0x26, 0xcd, 0x50, 0x7f, 0x6b, 0xff, 0x82,
	0xbf, 0x3e, 0xe5, 0xdf, 0x11, 0x6a, 0xbe, 0x8d, 0x57, 0xb1, 0xa8, 0x8d, 0xc0, 0x02, 0xf2, 0xbe,
	0x44, 0x7b, 0x45, 0x2c, 0x47, 0x59, 0x2a, 0x68, 0x24, 0x6e, 0x05, 0x63, 0xd7, 0x83, 0xf1, 0xfe,
	0xd5, 0xd1, 0x17, 0xd2, 0x90, 0xf1, 0x4d, 0x22, 0xf0, 0x4b, 0xd4, 0x56, 0xef, 0x8a, 0x13, 0x4b,
	0x36, 0x73, 0x28, 0x63, 0x39, 0xe3, 0x2c, 0x57, 0x44, 0xa8, 0x15, 0xf8, 0x19, 0x6a, 0x02, 0x51,
	0xa4, 0xd3, 0xdd, 0xef, 0x68, 0x69, 0x58, 0xe0, 0xd8, 0x43, 0xbb, 0x6f, 0xf2, 0x6c, 0xb3, 0xe6,
	0xc4, 0x91, 0x0a, 0x24, 0x15, 0x12, 0x0a, 0x15, 0x83, 0x5f, 0xa1, 0xde, 0x8c, 0x8a, 0x68, 0xc9,
	0x16, 0xc5, 0x5d, 0x8d, 0xed, 0xbb, 0x6a, 0x34, 0x7e, 0x8d, 0xfa, 0xea, 0x5b, 0xdd, 0xdc, 0xbc,
	0x75, 0x73, 0x5d, 0xe0, 0xfd, 0xe9, 0x80, 0x93, 0x21, 0x55, 0xe8, 0xa0, 0x5c, 0x02, 0xc9, 0x86,
	0x0b, 0x39, 0xa7, 0x2d, 0xa3, 0x94, 0x15, 0x6c, 0xf8, 0xc8, 0xdc, 0x57, 0xa5, 0x8f, 0xea, 0xcb,
	0x06, 0x16, 0x56, 0xe3, 0x8e, 0x65, 0xf3, 0x0a, 0x35, 0xf4, 0xc2, 0x2a, 0x27, 0x4d, 0x15, 0x86,
	0x31, 0x69, 0xa4, 0x0c, 0x1e, 0xf5, 0x2c, 0x5e, 0x49, 0xbc, 0x3e, 0x22, 0x4a, 0x14, 0x82, 0x82,
	0x12, 0x04, 0xbe, 0x9c, 0x0d, 0x3a, 0xa8, 0x02, 0x03, 0x73, 0xcb, 0x7c, 0x03, 0x5f, 0xce, 0x04,
	0x6d, 0x6e, 0x05, 0x96, 0x43, 0x63, 0x1e, 0xff, 0xca, 0xe4, 0xee, 0x72, 0xcc, 0xa1, 0x01, 0x28,
	0x14, 0x46, 0x75, 0x56, 0x2e, 0xb0, 0xea, 0x8e, 0x0a, 0x36, 0xf6, 0x34, 0x32, 0x63, 0xb8, 0x63,
	0x4f, 0x77, 0x8d, 0xa7, 0x53, 0xed, 0xe9, 0x31, 0x6a, 0xfd, 0xc8, 0x72, 0x0e, 0xa3, 0xb4, 0x67,
	0x08, 0x4a, 0x10, 0x62, 0x38, 0x7e, 0x2f, 0x58, 0x2a, 0x15, 0xe6, 0x43, 0xaf, 0x60, 0x4f, 0xa0,
	0x61, 0x55, 0xc7, 0xb9, 0xa0, 0x62, 0xc3, 0x21, 0xae, 0xe2, 0xaf, 0x5a, 0x47, 0x15, 0x26, 0xe3,
	0xca, 0xb3, 0xcb, 0x9c, 0x71, 0x5e, 0x6b, 0xa8, 0x46, 0x6b, 0x03, 0xda, 0x31, 0x1e, 0x8b, 0x46,
	0xbd, 0x6f, 0x50, 0xd7, 0x3f, 0x94, 0x3b, 0x21, 0x48, 0x2f, 0x32, 0xfc, 0x5a, 0x2d, 0x13, 0xf8,
	0x50, 0x2f, 0xa5, 0xd8, 0xe5, 0x90, 0xaa, 0x66, 0xc2, 0x4a, 0xe4, 0xcd, 0x51, 0xbf, 0xc6, 0x19,
	0xb5, 0xb4, 0xee, 0xf8, 0xcd, 0xf3, 0xbc, 0x5c, 0xe1, 0xc5, 0xdb, 0x1a, 0xa8, 0x1f, 0x0a, 0x8b,
	0x98, 0x42, 0xb3, 0xd4, 0x32, 0xf7, 0xe6, 0x2a, 0x8c, 0xaa, 0x81, 0xe5, 0x82, 0xab, 0x39, 0xbb,
	0xda, 0x65, 0xb0, 0x19, 0x60, 0x86, 0x49, 0x1f, 0xd8, 0xa6, 0x46, 0xc3, 0x2f, 0x7e, 0x46, 0x83,
	0xba, 0x51, 0x71, 0x17, 0xb5, 0xce, 0xd2, 0x77, 0x69, 0xf6, 0x4b, 0x3a, 0xdc, 0x81, 0x0f, 0x65,
	0x88, 0xa1, 0x85, 0x9f, 0xa2, 0xbd, 0x83, 0x28, 0xca, 0x36, 0xa9, 0x38, 0xc9, 0xb3, 0x0b, 0x28,
	0xd6, 0x32, 0x13, 0xd9, 0xd0, 0xc6, 0x8f, 0xd1, 0x43, 0x69, 0xbd, 0x1a, 0xec, 0xc0, 0xe1, 0xb9,
	0x88, 0xa3, 0x77, 0x2c, 0x1f, 0x36, 0x70, 0x5f, 0xad, 0xa9, 0x94, 0xc6, 0xc9, 0xb0, 0x79, 0x48,
	0x3e, 0x5c, 0x8f, 0xad, 0x8f, 0xd7, 0x63, 0xeb, 0x9f, 0xeb, 0xb1, 0xf5, 0xc7, 0xcd, 0x78, 0xe7,
	0xe3, 0xcd, 0x78, 0xe7, 0xaf, 0x9b, 0xf1, 0xce, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x17,
	0x8f, 0x75, 0xe3, 0x0a, 0x00, 0x00,
}

func (m *ClientPendingMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientPendingMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientPendingMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.ThumbID))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.FileID))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i -= len(m.ThumbUploadID)
	copy(dAtA[i:], m.ThumbUploadID)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.ThumbUploadID)))
	i--
	dAtA[i] = 0x7a
	i -= len(m.FileUploadID)
	copy(dAtA[i:], m.FileUploadID)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.FileUploadID)))
	i--
	dAtA[i] = 0x72
	i--
	if m.ClearDraft {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x68
	if m.Media != nil {
		i -= len(m.Media)
		copy(dAtA[i:], m.Media)
		i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.Media)))
		i--
		dAtA[i] = 0x62
	}
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.MediaType))
	i--
	dAtA[i] = 0x58
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientCoreMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.SenderID))
	i--
	dAtA[i] = 0x48
	i -= len(m.Body)
	copy(dAtA[i:], m.Body)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.Body)))
	i--
	dAtA[i] = 0x42
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.ReplyTo))
	i--
	dAtA[i] = 0x38
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.CreatedOn))
	i--
	dAtA[i] = 0x30
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x29
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.PeerType))
	i--
	dAtA[i] = 0x20
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.PeerID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.RequestID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ClientSendMessageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSendMessageMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSendMessageMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.FileTotalParts))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.ThumbID))
	i--
	dAtA[i] = 0x78
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.FileID))
	i--
	dAtA[i] = 0x70
	i -= len(m.ThumbUploadID)
	copy(dAtA[i:], m.ThumbUploadID)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.ThumbUploadID)))
	i--
	dAtA[i] = 0x6a
	i -= len(m.FileUploadID)
	copy(dAtA[i:], m.FileUploadID)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.FileUploadID)))
	i--
	dAtA[i] = 0x62
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientCoreMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	i--
	if m.ClearDraft {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x50
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.ReplyTo))
	i--
	dAtA[i] = 0x48
	i -= len(m.ThumbMIME)
	copy(dAtA[i:], m.ThumbMIME)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.ThumbMIME)))
	i--
	dAtA[i] = 0x42
	i -= len(m.FileMIME)
	copy(dAtA[i:], m.FileMIME)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.FileMIME)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.ThumbFilePath)
	copy(dAtA[i:], m.ThumbFilePath)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.ThumbFilePath)))
	i--
	dAtA[i] = 0x32
	i -= len(m.FilePath)
	copy(dAtA[i:], m.FilePath)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.FilePath)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.FileName)
	copy(dAtA[i:], m.FileName)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.FileName)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Caption)
	copy(dAtA[i:], m.Caption)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.Caption)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.MediaType))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientCoreMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientGlobalSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGlobalSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGlobalSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.Limit))
	i--
	dAtA[i] = 0x20
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientCoreMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LabelIDs) > 0 {
		for iNdEx := len(m.LabelIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.LabelIDs[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClientContactSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientContactSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientContactSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClientSearchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSearchResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSearchResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MatchedGroups) > 0 {
		for iNdEx := len(m.MatchedGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchedGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientCoreMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MatchedUsers) > 0 {
		for iNdEx := len(m.MatchedUsers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchedUsers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientCoreMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientCoreMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientCoreMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientCoreMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Extension)
	copy(dAtA[i:], m.Extension)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.Extension)))
	i--
	dAtA[i] = 0x6a
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x60
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.PeerType))
	i--
	dAtA[i] = 0x58
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.PeerID))
	i--
	dAtA[i] = 0x50
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.MessageID))
	i--
	dAtA[i] = 0x48
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.FileSize))
	i--
	dAtA[i] = 0x40
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x38
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x30
	i -= len(m.MimeType)
	copy(dAtA[i:], m.MimeType)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.MimeType)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x20
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.AccessHash))
	i--
	dAtA[i] = 0x18
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.FileID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.ClusterID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ClientFileStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientFileStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientFileStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.FilePath)
	copy(dAtA[i:], m.FilePath)
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.FilePath)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.Progress))
	i--
	dAtA[i] = 0x10
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DBMediaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBMediaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBMediaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MediaInfo) > 0 {
		for iNdEx := len(m.MediaInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MediaInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientCoreMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PeerMediaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerMediaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerMediaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Media) > 0 {
		for iNdEx := len(m.Media) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Media[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientCoreMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.PeerID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MediaSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.TotalSize))
	i--
	dAtA[i] = 0x10
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.MediaType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintClientCoreMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientCoreMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientPendingMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovClientCoreMessages(uint64(m.ID))
	n += 1 + sovClientCoreMessages(uint64(m.RequestID))
	n += 1 + sovClientCoreMessages(uint64(m.PeerID))
	n += 1 + sovClientCoreMessages(uint64(m.PeerType))
	n += 9
	n += 1 + sovClientCoreMessages(uint64(m.CreatedOn))
	n += 1 + sovClientCoreMessages(uint64(m.ReplyTo))
	l = len(m.Body)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	n += 1 + sovClientCoreMessages(uint64(m.SenderID))
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	n += 1 + sovClientCoreMessages(uint64(m.MediaType))
	if m.Media != nil {
		l = len(m.Media)
		n += 1 + l + sovClientCoreMessages(uint64(l))
	}
	n += 2
	l = len(m.FileUploadID)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	l = len(m.ThumbUploadID)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	n += 2 + sovClientCoreMessages(uint64(m.FileID))
	n += 2 + sovClientCoreMessages(uint64(m.ThumbID))
	return n
}

func (m *ClientSendMessageMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovClientCoreMessages(uint64(l))
	}
	n += 1 + sovClientCoreMessages(uint64(m.MediaType))
	l = len(m.Caption)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	l = len(m.FileName)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	l = len(m.FilePath)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	l = len(m.ThumbFilePath)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	l = len(m.FileMIME)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	l = len(m.ThumbMIME)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	n += 1 + sovClientCoreMessages(uint64(m.ReplyTo))
	n += 2
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	l = len(m.FileUploadID)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	l = len(m.ThumbUploadID)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	n += 1 + sovClientCoreMessages(uint64(m.FileID))
	n += 1 + sovClientCoreMessages(uint64(m.ThumbID))
	n += 2 + sovClientCoreMessages(uint64(m.FileTotalParts))
	return n
}

func (m *ClientGlobalSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	if len(m.LabelIDs) > 0 {
		for _, e := range m.LabelIDs {
			n += 1 + sovClientCoreMessages(uint64(e))
		}
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovClientCoreMessages(uint64(l))
	}
	n += 1 + sovClientCoreMessages(uint64(m.Limit))
	return n
}

func (m *ClientContactSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	return n
}

func (m *ClientSearchResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	if len(m.MatchedUsers) > 0 {
		for _, e := range m.MatchedUsers {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	if len(m.MatchedGroups) > 0 {
		for _, e := range m.MatchedGroups {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	return n
}

func (m *ClientFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovClientCoreMessages(uint64(m.ClusterID))
	n += 1 + sovClientCoreMessages(uint64(m.FileID))
	n += 1 + sovClientCoreMessages(uint64(m.AccessHash))
	n += 1 + sovClientCoreMessages(uint64(m.Type))
	l = len(m.MimeType)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	n += 1 + sovClientCoreMessages(uint64(m.UserID))
	n += 1 + sovClientCoreMessages(uint64(m.GroupID))
	n += 1 + sovClientCoreMessages(uint64(m.FileSize))
	n += 1 + sovClientCoreMessages(uint64(m.MessageID))
	n += 1 + sovClientCoreMessages(uint64(m.PeerID))
	n += 1 + sovClientCoreMessages(uint64(m.PeerType))
	n += 1 + sovClientCoreMessages(uint64(m.Version))
	l = len(m.Extension)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	return n
}

func (m *ClientFileStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovClientCoreMessages(uint64(m.Status))
	n += 1 + sovClientCoreMessages(uint64(m.Progress))
	l = len(m.FilePath)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	return n
}

func (m *DBMediaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MediaInfo) > 0 {
		for _, e := range m.MediaInfo {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	return n
}

func (m *PeerMediaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovClientCoreMessages(uint64(m.PeerID))
	if len(m.Media) > 0 {
		for _, e := range m.Media {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	return n
}

func (m *MediaSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovClientCoreMessages(uint64(m.MediaType))
	n += 1 + sovClientCoreMessages(uint64(m.TotalSize))
	return n
}

func sovClientCoreMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientCoreMessages(x uint64) (n int) {
	return sovClientCoreMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientPendingMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientPendingMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientPendingMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= InputMediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media[:0], dAtA[iNdEx:postIndex]...)
			if m.Media == nil {
				m.Media = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileUploadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileUploadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUploadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbUploadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			m.FileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbID", wireType)
			}
			m.ThumbID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RequestID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerType")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CreatedOn")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ReplyTo")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Body")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SenderID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSendMessageMedia) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSendMessageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSendMessageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= InputMediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileMIME", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileMIME = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbMIME", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbMIME = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &DocumentAttribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileUploadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileUploadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUploadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbUploadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			m.FileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbID", wireType)
			}
			m.ThumbID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileTotalParts", wireType)
			}
			m.FileTotalParts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileTotalParts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MediaType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGlobalSearch) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGlobalSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGlobalSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClientCoreMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClientCoreMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClientCoreMessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthClientCoreMessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClientCoreMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Limit")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientContactSearch) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientContactSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientContactSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Text")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSearchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &UserMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedUsers = append(m.MatchedUsers, &User{})
			if err := m.MatchedUsers[len(m.MatchedUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedGroups = append(m.MatchedGroups, &Group{})
			if err := m.MatchedGroups[len(m.MatchedGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientFile) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			m.FileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ClientFileType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClusterID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FileID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FileSize")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientFileStatus) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientFileStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientFileStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Progress")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FilePath")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBMediaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBMediaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBMediaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaInfo = append(m.MediaInfo, &PeerMediaInfo{})
			if err := m.MediaInfo[len(m.MediaInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerMediaInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerMediaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerMediaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media, &MediaSize{})
			if err := m.Media[len(m.Media)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaSize) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MediaType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TotalSize")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientCoreMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientCoreMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientCoreMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientCoreMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientCoreMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientCoreMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientCoreMessages = fmt.Errorf("proto: unexpected end of group")
)
