syntax = "proto3";
package msg;

import "core.types.proto";
import "chat.messages.medias.proto";
import "chat.wallpaper.proto";
option go_package = './;msg';


// BotStart
// @Function (Client)
// @Return: Bool
message BotStart {
    InputPeer Bot = 1;
    int64 RandomID = 2;
    string StartParam = 3;
}

// BotRecall
// @Function (BotOnly)
// @Return: BotRecalled
message BotRecall {
    int32 Version = 1;
}

// BotSetInfo
// @Function (BotOnly)
// @Return: Bool
message BotSetInfo {
    int64 BotID = 1;
    int64 RandomID = 2;
    int64 Owner = 3;
    repeated BotCommands BotCommands = 4;
    string Description = 5;
    string InlinePlaceholder = 6;
    bool InlineGeo = 7;
}

// BotGet
// @Function (BotOnly)
// @Return: BotInfo
message BotGet {
    int64 UserID = 1 [jstype = JS_STRING];
    int32 Limit = 2;
}

// BotSendMessage
// @Function (BotOnly)
// @Return: UserMessage
message BotSendMessage {
    int64 RandomID = 1;
    InputPeer Peer = 2;
    string Body = 5;
    int64 ReplyTo = 6;
    bool ClearDraft = 7;
    repeated MessageEntity Entities = 8;
    int64 ReplyMarkup = 9;
    bytes ReplyMarkupData = 10;
}

// BotEditMessage
// @Function (BotOnly)
// @Return: UserMessage
message BotEditMessage {
    int64 RandomID = 1;
    InputPeer Peer = 2;
    string Body = 3;
    int64 MessageID = 4;
    repeated MessageEntity Entities = 5;
    int64 ReplyMarkup = 6;
    bytes ReplyMarkupData = 7;
}

// BotSendMedia
// @Function (BotOnly)
// @Return: UserMessage
message BotSendMedia {
    int64 RandomID = 1;
    InputPeer Peer = 2;
    InputMediaType MediaType = 3;
    bytes MediaData = 4;
    int64 ReplyTo = 5;
}

// BotSaveFilePart
// @Function (BotOnly)
// @Returns: Bool
message BotSaveFilePart {
    int64 FileID = 1 [jstype = JS_STRING];
    int32 PartID = 2;
    int32 TotalParts = 3;
    bytes Bytes = 4;
}

// BotUpdateProfile
// @Function (BotOnly)
// @Return: Bool
message BotUpdateProfile {
    int64 BotID = 1;
    string Name = 2;
    string Bio = 4;
}

// BotUpdatePhoto
// @Function (BotOnly)
// @Returns: Bool
message BotUpdatePhoto {
    InputFileLocation File = 1;
    int64 BotID = 2;
}

// BotRevokeToken
// @Function (BotOnly)
// @Returns: BotToken
message BotRevokeToken {
    int64 BotID = 1;
    bool GetNew = 2;
}

// BotDeleteMessage
// @Function (BotOnly)
// @Returns: Bool
message BotDeleteMessage {
    InputPeer Peer = 1;
    repeated int64 MessageIDs = 2;
}

// BotSetCallbackAnswer
// @Function (BotOnly)
// @Returns: Bool
message BotSetCallbackAnswer {
    int64 QueryID = 1 [jstype = JS_STRING];
    string Url = 2; // URL to open
    string Message = 3; // Alert to show
    int32 CacheTime = 4; // For how long should this answer be cached (in seconds) [Default is  300]
}

// BotGetCallbackAnswer
// @Function (Client)
// @Returns: BotCallbackAnswer
message BotGetCallbackAnswer {
    InputPeer Peer = 1;
    int64 MessageID = 2; // ID of the Message if button is the inline keyboard
    bytes Data = 3; // Callback data
}

// BotGetInlineResults
// @Function (Client)
// @Returns: BotResults
message BotGetInlineResults {
    InputUser Bot = 1; // The bot to query
    InputPeer Peer = 2; // The currently opened chat
    string Query = 3; // The query
    string Offset = 4; // The offset within the results, will be passed directly as-is to the bot.
    InputGeoLocation Location = 5; // The geolocation, if requested
}

// BotSetInlineResults
// @Function (BotOnly)
// @Returns: Bool
message BotSetInlineResults {
    // Set this flag if the results are composed of media files
    bool Gallery = 1;
    // Set this flag if results may be cached on the server side only for the user that sent the query.
    // By default, results may be returned to any user who sends the same query
    bool Private = 2;
    // The maximum amount of time in seconds that the result of the inline query may be cached on the server.
    // Defaults to 300.
    int64 CacheTime = 3;
    // Pass the offset that a client should send in the next query with the same text to receive more results.
    // Pass an empty string if there are no more results or if you don‘t
    // support pagination. Offset length can’t exceed 64 bytes.
    string NextOffset = 4;
    // Vector of results for the inline query
    repeated InputBotInlineResult Results = 5;
    // If passed, clients will display a button with specified text that switches the user to a private chat with
    // the bot and sends the bot a start message with a certain parameter.
    BotInlineSwitchPM SwitchPM = 6;
    // Unique identifier for the answered query
    int64 QueryID = 7 [jstype = JS_STRING];
}

// BotSendInlineResults
// @Function (Client)
// @Returns: Bool + Updates
message BotSendInlineResults {
    int64 RandomID = 1;
    int64 QueryID = 2 [jstype = JS_STRING]; // Query ID from BotResults response of BotGetInlineResults
    string ResultID = 3; // Result ID from BotResults response of BotGetInlineResults
    bool ClearDraft = 4;
    InputPeer Peer = 5; // Destination
    int64 ReplyTo = 6;
    bool Silent = 7; // Do not send notification
    bool HideVia = 8; // Hid via bot
}

// BotUploadWallPaper
// @Function (BotFather, AdminBot)
// @Return: Bool
message BotUploadWallPaper {
    InputFileLocation File = 1;
    bool Dark = 2;
    bool Pattern = 3;
    WallPaperSettings Settings = 4;
}

// BotUploadGif
// @Function (GifBot Only)
// @Return: FileLocation
message BotUploadGif {
    string Token = 100;
    InputFile File = 1;
    InputFile Thumb = 2;
    uint32 Width = 3;
    uint32 Height = 4;
    string MimeType = 5;
}

// BotResults
message BotResults {
    bool Gallery = 1;
    int64 QueryID = 2 [jstype = JS_STRING];
    string NextOffset = 3; // The next offset to use when navigating through results
    BotInlineSwitchPM SwitchPM = 4; // Whether the bot requested the user to message him in private
    repeated BotInlineResult Results = 5; // The results
}

// BotInlineSwitchPM
message BotInlineSwitchPM {
    // Text for the button that switches the user to a private chat with the bot
    // and sends the bot a start message with the parameter start_parameter (can be empty)
    string Text = 1;
    // The parameter for the /start parameter
    string StartParam = 2;
}

// BotInlineResult
message BotInlineResult {
    string ID = 1;
    MediaType Type = 2;
    string Title = 3;
    string Description = 4;
    string Url = 5;
    MediaWebDocument Thumb = 6;
    BotInlineMessage Message = 7;
}

// InputBotInlineResult
message InputBotInlineResult {
    string ID = 1;
    InputMediaType Type = 2;
    string Title = 3;
    string Description = 4;
    string Url = 5;
    InputMediaWebDocument Thumb = 6;
    InputBotInlineMessage Message = 8;
}

// BotInlineMessage
message BotInlineMessage {
    bytes MediaData = 1;
    string Body = 10;
    repeated MessageEntity Entities = 11;
    int64 ReplyTo = 12;
    int64 ReplyMarkup = 13;
    bytes ReplyMarkupData = 14;
}

// InputBotInlineMessage
message InputBotInlineMessage {
    bytes InputMediaData = 1;
    bool NoWebPage = 2;
    string Body = 10;
    repeated MessageEntity Entities = 11;
    int64 ReplyTo = 12;
    int64 ReplyMarkup = 13;
    bytes ReplyMarkupData = 14;
}

// BotToken
message BotToken {
    bytes Token = 1;
}

// BotRecalled
message BotRecalled {
    int64 ID = 1;
    string Username = 2;
}

// BotCallbackAnswer
message BotCallbackAnswer {
    string Url = 1; // URL to open
    string Message = 2; // Alert to show
    int32 CacheTime = 3; // For how long should this answer be cached (in seconds)
}

// BotsMany
message BotsMany {
    repeated BotInfo Bots = 1;
    bool Empty = 2;
}

// BotGetCommands
// @Function
// @Return: BotCommandsMany
message BotGetCommands {
    InputPeer Peer = 1;
}

// BotCommandsMany
message BotCommandsMany {
    repeated BotCommands Commands = 1;
    bool Empty = 2;
}

