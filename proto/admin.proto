syntax = "proto3";
package msg;


import "core.types.proto";

option go_package = './;msg';

// AdminBroadcastMessage
message AdminBroadcastMessage {
    string Body = 1;
    repeated int64 ReceiverIDs = 2;
    repeated MessageEntity Entities = 3;
    InputMediaType MediaType = 4;
    bytes MediaData = 5;
}

// AdminSetWelcomeMessage
// @Function
// @Return: Bool
message AdminSetWelcomeMessage {
    string AccessToken = 1;
    string Lang = 2;
    string Template = 3;
}

// AdminGetWelcomeMessage
// @Function
// @Return: WelcomeMessagesMany
message AdminGetWelcomeMessages {
    string AccessToken = 1;
}

// AdminDeleteWelcomeMessage
// @Function
// @Return: Bool
message AdminDeleteWelcomeMessage {
    string AccessToken = 1;
    string Lang = 2;
}

// AdminSetPushProvider
// @Function
// @Return: Bool
message AdminSetPushProvider {
    string AccessToken = 1;
    PushProvider Provider = 2;
}

// AdminGetPushProvider
// @Function
// @Return: PushProvidersMany
message AdminGetPushProviders {
    string AccessToken = 1;
}

// AdminDeletePushProvider
// @Function
// @Return: Bool
message AdminDeletePushProvider {
    string AccessToken = 1;
    string Name = 2;
    PushProviderType Type = 3;
}

// AdminSetVersion
// @Function
// @Return: Bool
message AdminSetVersion {
    string AccessToken = 1;
    Version Version = 2;
}

// AdminGetVersions
// @Function
// @Return: VersionsMany
message AdminGetVersions {
    string AccessToken = 1;
}

// AdminSetStorageNode
// @Function
// @Return: Bool
message AdminSetStorageNode {
    string AccessToken = 10;
    int32 ClusterID = 1;
    string DSN = 2;
    string Type = 3;
    string Location = 4;
    bool Archive = 5;
}

// AdminGetStorageNode
// @Function
// @Return: StorageNode
message AdminGetStorageNode {
    string AccessToken = 10;
    int32 ClusterID = 1;
}

// AdminGetStorageNodes
// @Function
// @Return: StorageNode
message AdminGetStorageNodes {
    string AccessToken = 10;
}

// AdminAddBannedSubnet
// @Function
// @Return: Bool
message AdminAddBannedSubnet {
    string AccessToken = 10;
    repeated string CIDR = 1;
}

// AdminDeleteBanedSubnet
// @Function
// @Return: Bool
message AdminDeleteBannedSubnet {
    string AccessToken = 10;
    repeated string CIDR = 1;
}

// AdminGetBannedSubnets
// @Function
// @Return: BannedSubnets
message AdminGetBannedSubnets {
    string AccessToken = 10;
}

// BannedSubnets
message BannedSubnets {
    repeated string Subnets = 1;
}

// AdminPrivilege
enum AdminPrivilege {
    PrivilegeNone = 0;
    PrivilegeAdmin = 1;
    PrivilegeSuperAdmin = 2;
}

// AdminSetToken
// @Function
// @Return: AdminToken
message AdminSetToken {
    string AccessToken = 1;
    AdminPrivilege Privilege = 2;
}

// AdminDeleteToken
// @Function
// @Return: Bool
message AdminDeleteToken {
    string AccessToken = 1;
    string DeletedToken = 2;
}

// AdminReserveUsername
// @Function
// @Return: Bool
message AdminReserveUsername {
    string AccessToken = 1;
    repeated string Usernames = 2;
    bool Delete = 3;
}

// AdminGetReservedUsernames
// @Function
// @Return: ReservedUsername
message AdminGetReservedUsernames {
    string AccessToken = 1;
}

// AdminTeamCreate
// @Function
// @Return: Team
message AdminTeamCreate {
    int64 RandomID = 10;
    string AccessToken = 1;
    int32 Capacity = 2; // maximum number of team members
    int64 ExpireDate = 3; // license expire time
    bool Community = 4; // if team supports community users, send messages to team members
    string Title = 5;
    int64 CreatorID = 6;
}

// AdminClusterInfo
// @Function
// @Returns: rony.Edges
message AdminGetClusterInfo {
    fixed64 ReplicaSet = 1;
}

// StorageNode
message StorageNode {
    bool Archive = 1;
    int32 ClusterID = 2;
    string Location = 3;
    string DSN = 4;
    string Type = 5;
}

// StorageNodeMany
message StorageNodeMany {
    repeated StorageNode Nodes = 1;
    bool Empty = 2;
}

// AdminToken
message AdminToken {
    AdminPrivilege Privilege = 1;
    string Token = 2;
}

// WelcomeMessagesMany
message WelcomeMessagesMany {
    repeated WelcomeMessage Messages = 1;
    int32 Count = 2;
}

// VersionsMany
message VersionsMany {
    repeated Version Versions = 1;
    int32 Count = 2;
}

// PushProvidersMany
message PushProvidersMany {
    repeated PushProvider Providers = 1;
    int32 Count = 2;
}

// WelcomeMessage
message WelcomeMessage {
    string Lang = 2;
    string Template = 3;
}

// PushProvider
message PushProvider {
    string Name = 1;
    PushProviderType Type = 2;
    bool TestMode = 3;
    bytes Credentials = 4;
    string KeyID = 5;
    string TeamID = 6;
    string Topic = 7;

}

// PushProviderType
enum PushProviderType {
    PushProviderUnknown = 0;
    PushProviderFirebase = 1;
    PushProviderApple = 2;
    PushProviderPushKit = 3;
}

// AppUpdate
message Version {
    string Vendor = 1; // river android | river ios | nested android | nested ios
    string Stage = 2; // debug | production | test
    string OS = 3; // ios | android | mac | web | windows | linux
    string MinVersion = 4;
    string CurrentVersion = 5;
    repeated string ForcedVersions = 6;
}

// ReservedUsernames
message ReservedUsernames {
    repeated string Usernames = 1;
    int32 Count = 2;
}