// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.api.updates.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// UpdateGetState
// @Function
// @Return: UpdateState
type UpdateGetState struct {
}

func (m *UpdateGetState) Reset()         { *m = UpdateGetState{} }
func (m *UpdateGetState) String() string { return proto.CompactTextString(m) }
func (*UpdateGetState) ProtoMessage()    {}
func (*UpdateGetState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{0}
}
func (m *UpdateGetState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGetState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGetState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGetState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGetState.Merge(m, src)
}
func (m *UpdateGetState) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGetState) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGetState.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGetState proto.InternalMessageInfo

// UpdateGetDifference
// @Function
// @Return: UpdateDifference
type UpdateGetDifference struct {
	From  int64 `protobuf:"varint,1,req,name=From" json:"From"`
	Limit int32 `protobuf:"varint,2,req,name=Limit" json:"Limit"`
}

func (m *UpdateGetDifference) Reset()         { *m = UpdateGetDifference{} }
func (m *UpdateGetDifference) String() string { return proto.CompactTextString(m) }
func (*UpdateGetDifference) ProtoMessage()    {}
func (*UpdateGetDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{1}
}
func (m *UpdateGetDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGetDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGetDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGetDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGetDifference.Merge(m, src)
}
func (m *UpdateGetDifference) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGetDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGetDifference.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGetDifference proto.InternalMessageInfo

func (m *UpdateGetDifference) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *UpdateGetDifference) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// UpdateDifference
type UpdateDifference struct {
	More            bool              `protobuf:"varint,1,req,name=More" json:"More"`
	MaxUpdateID     int64             `protobuf:"varint,2,req,name=MaxUpdateID" json:"MaxUpdateID"`
	MinUpdateID     int64             `protobuf:"varint,3,req,name=MinUpdateID" json:"MinUpdateID"`
	Updates         []*UpdateEnvelope `protobuf:"bytes,4,rep,name=Updates" json:"Updates,omitempty"`
	Users           []*User           `protobuf:"bytes,5,rep,name=Users" json:"Users,omitempty"`
	Groups          []*Group          `protobuf:"bytes,6,rep,name=Groups" json:"Groups,omitempty"`
	CurrentUpdateID int64             `protobuf:"varint,7,opt,name=CurrentUpdateID" json:"CurrentUpdateID"`
}

func (m *UpdateDifference) Reset()         { *m = UpdateDifference{} }
func (m *UpdateDifference) String() string { return proto.CompactTextString(m) }
func (*UpdateDifference) ProtoMessage()    {}
func (*UpdateDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{2}
}
func (m *UpdateDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDifference.Merge(m, src)
}
func (m *UpdateDifference) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDifference.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDifference proto.InternalMessageInfo

func (m *UpdateDifference) GetMore() bool {
	if m != nil {
		return m.More
	}
	return false
}

func (m *UpdateDifference) GetMaxUpdateID() int64 {
	if m != nil {
		return m.MaxUpdateID
	}
	return 0
}

func (m *UpdateDifference) GetMinUpdateID() int64 {
	if m != nil {
		return m.MinUpdateID
	}
	return 0
}

func (m *UpdateDifference) GetUpdates() []*UpdateEnvelope {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *UpdateDifference) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UpdateDifference) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *UpdateDifference) GetCurrentUpdateID() int64 {
	if m != nil {
		return m.CurrentUpdateID
	}
	return 0
}

// UpdateTooLong
type UpdateTooLong struct {
}

func (m *UpdateTooLong) Reset()         { *m = UpdateTooLong{} }
func (m *UpdateTooLong) String() string { return proto.CompactTextString(m) }
func (*UpdateTooLong) ProtoMessage()    {}
func (*UpdateTooLong) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{3}
}
func (m *UpdateTooLong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTooLong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTooLong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTooLong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTooLong.Merge(m, src)
}
func (m *UpdateTooLong) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTooLong) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTooLong.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTooLong proto.InternalMessageInfo

// UpdateState
type UpdateState struct {
	UpdateID int64 `protobuf:"varint,1,req,name=UpdateID" json:"UpdateID"`
}

func (m *UpdateState) Reset()         { *m = UpdateState{} }
func (m *UpdateState) String() string { return proto.CompactTextString(m) }
func (*UpdateState) ProtoMessage()    {}
func (*UpdateState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{4}
}
func (m *UpdateState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateState.Merge(m, src)
}
func (m *UpdateState) XXX_Size() int {
	return m.Size()
}
func (m *UpdateState) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateState.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateState proto.InternalMessageInfo

func (m *UpdateState) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

// UpdateMessageID
type UpdateMessageID struct {
	UCount    int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	MessageID int64 `protobuf:"varint,1,req,name=MessageID" json:"MessageID"`
	RandomID  int64 `protobuf:"varint,2,req,name=RandomID" json:"RandomID"`
}

func (m *UpdateMessageID) Reset()         { *m = UpdateMessageID{} }
func (m *UpdateMessageID) String() string { return proto.CompactTextString(m) }
func (*UpdateMessageID) ProtoMessage()    {}
func (*UpdateMessageID) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{5}
}
func (m *UpdateMessageID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageID.Merge(m, src)
}
func (m *UpdateMessageID) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageID) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageID.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageID proto.InternalMessageInfo

func (m *UpdateMessageID) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateMessageID) GetMessageID() int64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *UpdateMessageID) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

// UpdateNewMessage
type UpdateNewMessage struct {
	UCount     int32        `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID   int64        `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Message    *UserMessage `protobuf:"bytes,1,req,name=Message" json:"Message,omitempty"`
	Sender     *User        `protobuf:"bytes,2,req,name=Sender" json:"Sender,omitempty"`
	AccessHash uint64       `protobuf:"fixed64,3,opt,name=AccessHash" json:"AccessHash"`
}

func (m *UpdateNewMessage) Reset()         { *m = UpdateNewMessage{} }
func (m *UpdateNewMessage) String() string { return proto.CompactTextString(m) }
func (*UpdateNewMessage) ProtoMessage()    {}
func (*UpdateNewMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{6}
}
func (m *UpdateNewMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNewMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNewMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNewMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNewMessage.Merge(m, src)
}
func (m *UpdateNewMessage) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNewMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNewMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNewMessage proto.InternalMessageInfo

func (m *UpdateNewMessage) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateNewMessage) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateNewMessage) GetMessage() *UserMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UpdateNewMessage) GetSender() *User {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *UpdateNewMessage) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// UpdateMessageEdited
type UpdateMessageEdited struct {
	UCount   int32        `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64        `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Message  *UserMessage `protobuf:"bytes,1,req,name=Message" json:"Message,omitempty"`
}

func (m *UpdateMessageEdited) Reset()         { *m = UpdateMessageEdited{} }
func (m *UpdateMessageEdited) String() string { return proto.CompactTextString(m) }
func (*UpdateMessageEdited) ProtoMessage()    {}
func (*UpdateMessageEdited) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{7}
}
func (m *UpdateMessageEdited) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageEdited) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageEdited.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageEdited) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageEdited.Merge(m, src)
}
func (m *UpdateMessageEdited) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageEdited) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageEdited.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageEdited proto.InternalMessageInfo

func (m *UpdateMessageEdited) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateMessageEdited) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateMessageEdited) GetMessage() *UserMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

// UpdateMessageDeleted
type UpdateMessagesDeleted struct {
	UCount     int32   `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID   int64   `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	MessageIDs []int64 `protobuf:"varint,1,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
	Peer       *Peer   `protobuf:"bytes,2,opt,name=Peer" json:"Peer,omitempty"`
}

func (m *UpdateMessagesDeleted) Reset()         { *m = UpdateMessagesDeleted{} }
func (m *UpdateMessagesDeleted) String() string { return proto.CompactTextString(m) }
func (*UpdateMessagesDeleted) ProtoMessage()    {}
func (*UpdateMessagesDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{8}
}
func (m *UpdateMessagesDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessagesDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessagesDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessagesDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessagesDeleted.Merge(m, src)
}
func (m *UpdateMessagesDeleted) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessagesDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessagesDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessagesDeleted proto.InternalMessageInfo

func (m *UpdateMessagesDeleted) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateMessagesDeleted) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateMessagesDeleted) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

func (m *UpdateMessagesDeleted) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// UpdateReadHistoryInbox
type UpdateReadHistoryInbox struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Peer     *Peer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MaxID    int64 `protobuf:"varint,2,req,name=MaxID" json:"MaxID"`
}

func (m *UpdateReadHistoryInbox) Reset()         { *m = UpdateReadHistoryInbox{} }
func (m *UpdateReadHistoryInbox) String() string { return proto.CompactTextString(m) }
func (*UpdateReadHistoryInbox) ProtoMessage()    {}
func (*UpdateReadHistoryInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{9}
}
func (m *UpdateReadHistoryInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateReadHistoryInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateReadHistoryInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateReadHistoryInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReadHistoryInbox.Merge(m, src)
}
func (m *UpdateReadHistoryInbox) XXX_Size() int {
	return m.Size()
}
func (m *UpdateReadHistoryInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReadHistoryInbox.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReadHistoryInbox proto.InternalMessageInfo

func (m *UpdateReadHistoryInbox) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateReadHistoryInbox) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateReadHistoryInbox) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateReadHistoryInbox) GetMaxID() int64 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

// UpdateReadHistoryOutbox
type UpdateReadHistoryOutbox struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Peer     *Peer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MaxID    int64 `protobuf:"varint,2,req,name=MaxID" json:"MaxID"`
}

func (m *UpdateReadHistoryOutbox) Reset()         { *m = UpdateReadHistoryOutbox{} }
func (m *UpdateReadHistoryOutbox) String() string { return proto.CompactTextString(m) }
func (*UpdateReadHistoryOutbox) ProtoMessage()    {}
func (*UpdateReadHistoryOutbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{10}
}
func (m *UpdateReadHistoryOutbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateReadHistoryOutbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateReadHistoryOutbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateReadHistoryOutbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReadHistoryOutbox.Merge(m, src)
}
func (m *UpdateReadHistoryOutbox) XXX_Size() int {
	return m.Size()
}
func (m *UpdateReadHistoryOutbox) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReadHistoryOutbox.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReadHistoryOutbox proto.InternalMessageInfo

func (m *UpdateReadHistoryOutbox) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateReadHistoryOutbox) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateReadHistoryOutbox) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateReadHistoryOutbox) GetMaxID() int64 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

// UpdateUserTyping
type UpdateUserTyping struct {
	UCount int32        `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UserID int64        `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	Action TypingAction `protobuf:"varint,2,req,name=Action,enum=msg.TypingAction" json:"Action"`
	PeerID int64        `protobuf:"varint,3,req,name=PeerID" json:"PeerID"`
}

func (m *UpdateUserTyping) Reset()         { *m = UpdateUserTyping{} }
func (m *UpdateUserTyping) String() string { return proto.CompactTextString(m) }
func (*UpdateUserTyping) ProtoMessage()    {}
func (*UpdateUserTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{11}
}
func (m *UpdateUserTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserTyping.Merge(m, src)
}
func (m *UpdateUserTyping) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserTyping.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserTyping proto.InternalMessageInfo

func (m *UpdateUserTyping) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateUserTyping) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateUserTyping) GetAction() TypingAction {
	if m != nil {
		return m.Action
	}
	return TypingActionTyping
}

func (m *UpdateUserTyping) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

// UpdateUserStatus
type UpdateUserStatus struct {
	UCount int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UserID int64 `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	Status int32 `protobuf:"varint,2,req,name=Status" json:"Status"`
}

func (m *UpdateUserStatus) Reset()         { *m = UpdateUserStatus{} }
func (m *UpdateUserStatus) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStatus) ProtoMessage()    {}
func (*UpdateUserStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{12}
}
func (m *UpdateUserStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserStatus.Merge(m, src)
}
func (m *UpdateUserStatus) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserStatus proto.InternalMessageInfo

func (m *UpdateUserStatus) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateUserStatus) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateUserStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// UpdateUsername
type UpdateUsername struct {
	UCount    int32  `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID  int64  `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	UserID    int64  `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	Username  string `protobuf:"bytes,2,req,name=Username" json:"Username"`
	FirstName string `protobuf:"bytes,3,req,name=FirstName" json:"FirstName"`
	LastName  string `protobuf:"bytes,4,req,name=LastName" json:"LastName"`
	Bio       string `protobuf:"bytes,5,req,name=Bio" json:"Bio"`
}

func (m *UpdateUsername) Reset()         { *m = UpdateUsername{} }
func (m *UpdateUsername) String() string { return proto.CompactTextString(m) }
func (*UpdateUsername) ProtoMessage()    {}
func (*UpdateUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{13}
}
func (m *UpdateUsername) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUsername.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUsername.Merge(m, src)
}
func (m *UpdateUsername) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUsername.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUsername proto.InternalMessageInfo

func (m *UpdateUsername) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateUsername) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateUsername) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UpdateUsername) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UpdateUsername) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UpdateUsername) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

// UpdateUserPhoto
type UpdateUserPhoto struct {
	UCount   int32      `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64      `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	UserID   int64      `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	Photo    *UserPhoto `protobuf:"bytes,2,opt,name=Photo" json:"Photo,omitempty"`
	PhotoID  int64      `protobuf:"varint,3,opt,name=PhotoID" json:"PhotoID"`
}

func (m *UpdateUserPhoto) Reset()         { *m = UpdateUserPhoto{} }
func (m *UpdateUserPhoto) String() string { return proto.CompactTextString(m) }
func (*UpdateUserPhoto) ProtoMessage()    {}
func (*UpdateUserPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{14}
}
func (m *UpdateUserPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserPhoto.Merge(m, src)
}
func (m *UpdateUserPhoto) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserPhoto proto.InternalMessageInfo

func (m *UpdateUserPhoto) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateUserPhoto) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateUserPhoto) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateUserPhoto) GetPhoto() *UserPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *UpdateUserPhoto) GetPhotoID() int64 {
	if m != nil {
		return m.PhotoID
	}
	return 0
}

// UpdateNotifySettings
type UpdateNotifySettings struct {
	UCount     int32               `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID   int64               `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	UserID     int64               `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	NotifyPeer *Peer               `protobuf:"bytes,2,req,name=NotifyPeer" json:"NotifyPeer,omitempty"`
	Settings   *PeerNotifySettings `protobuf:"bytes,3,req,name=Settings" json:"Settings,omitempty"`
}

func (m *UpdateNotifySettings) Reset()         { *m = UpdateNotifySettings{} }
func (m *UpdateNotifySettings) String() string { return proto.CompactTextString(m) }
func (*UpdateNotifySettings) ProtoMessage()    {}
func (*UpdateNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{15}
}
func (m *UpdateNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNotifySettings.Merge(m, src)
}
func (m *UpdateNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNotifySettings proto.InternalMessageInfo

func (m *UpdateNotifySettings) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateNotifySettings) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateNotifySettings) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateNotifySettings) GetNotifyPeer() *Peer {
	if m != nil {
		return m.NotifyPeer
	}
	return nil
}

func (m *UpdateNotifySettings) GetSettings() *PeerNotifySettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

// UpdateGroupParticipantAdd
type UpdateGroupParticipantAdd struct {
	UCount    int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID  int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	GroupID   int64 `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	UserID    int64 `protobuf:"varint,2,req,name=UserID" json:"UserID"`
	InviterID int64 `protobuf:"varint,3,req,name=InviterID" json:"InviterID"`
	Date      int64 `protobuf:"varint,4,req,name=Date" json:"Date"`
}

func (m *UpdateGroupParticipantAdd) Reset()         { *m = UpdateGroupParticipantAdd{} }
func (m *UpdateGroupParticipantAdd) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupParticipantAdd) ProtoMessage()    {}
func (*UpdateGroupParticipantAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{16}
}
func (m *UpdateGroupParticipantAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupParticipantAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupParticipantAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupParticipantAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupParticipantAdd.Merge(m, src)
}
func (m *UpdateGroupParticipantAdd) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupParticipantAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupParticipantAdd.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupParticipantAdd proto.InternalMessageInfo

func (m *UpdateGroupParticipantAdd) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateGroupParticipantAdd) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateGroupParticipantAdd) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpdateGroupParticipantAdd) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateGroupParticipantAdd) GetInviterID() int64 {
	if m != nil {
		return m.InviterID
	}
	return 0
}

func (m *UpdateGroupParticipantAdd) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// UpdateGroupParticipantDeleted
type UpdateGroupParticipantDeleted struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	GroupID  int64 `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	UserID   int64 `protobuf:"varint,2,req,name=UserID" json:"UserID"`
}

func (m *UpdateGroupParticipantDeleted) Reset()         { *m = UpdateGroupParticipantDeleted{} }
func (m *UpdateGroupParticipantDeleted) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupParticipantDeleted) ProtoMessage()    {}
func (*UpdateGroupParticipantDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{17}
}
func (m *UpdateGroupParticipantDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupParticipantDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupParticipantDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupParticipantDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupParticipantDeleted.Merge(m, src)
}
func (m *UpdateGroupParticipantDeleted) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupParticipantDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupParticipantDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupParticipantDeleted proto.InternalMessageInfo

func (m *UpdateGroupParticipantDeleted) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateGroupParticipantDeleted) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateGroupParticipantDeleted) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpdateGroupParticipantDeleted) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

// UpdateGroupParticipantAdmin
type UpdateGroupParticipantAdmin struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	GroupID  int64 `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	UserID   int64 `protobuf:"varint,2,req,name=UserID" json:"UserID"`
	IsAdmin  bool  `protobuf:"varint,3,req,name=IsAdmin" json:"IsAdmin"`
}

func (m *UpdateGroupParticipantAdmin) Reset()         { *m = UpdateGroupParticipantAdmin{} }
func (m *UpdateGroupParticipantAdmin) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupParticipantAdmin) ProtoMessage()    {}
func (*UpdateGroupParticipantAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{18}
}
func (m *UpdateGroupParticipantAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupParticipantAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupParticipantAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupParticipantAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupParticipantAdmin.Merge(m, src)
}
func (m *UpdateGroupParticipantAdmin) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupParticipantAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupParticipantAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupParticipantAdmin proto.InternalMessageInfo

func (m *UpdateGroupParticipantAdmin) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateGroupParticipantAdmin) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateGroupParticipantAdmin) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpdateGroupParticipantAdmin) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateGroupParticipantAdmin) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

// UpdateGroupAdmins
type UpdateGroupAdmins struct {
	UCount       int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID     int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	GroupID      int64 `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	AdminEnabled bool  `protobuf:"varint,2,req,name=AdminEnabled" json:"AdminEnabled"`
}

func (m *UpdateGroupAdmins) Reset()         { *m = UpdateGroupAdmins{} }
func (m *UpdateGroupAdmins) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupAdmins) ProtoMessage()    {}
func (*UpdateGroupAdmins) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{19}
}
func (m *UpdateGroupAdmins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupAdmins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupAdmins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupAdmins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupAdmins.Merge(m, src)
}
func (m *UpdateGroupAdmins) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupAdmins) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupAdmins.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupAdmins proto.InternalMessageInfo

func (m *UpdateGroupAdmins) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateGroupAdmins) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateGroupAdmins) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpdateGroupAdmins) GetAdminEnabled() bool {
	if m != nil {
		return m.AdminEnabled
	}
	return false
}

// UpdateGroupPhoto
type UpdateGroupPhoto struct {
	UCount   int32       `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64       `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	GroupID  int64       `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	Photo    *GroupPhoto `protobuf:"bytes,2,opt,name=Photo" json:"Photo,omitempty"`
	PhotoID  int64       `protobuf:"varint,3,opt,name=PhotoID" json:"PhotoID"`
}

func (m *UpdateGroupPhoto) Reset()         { *m = UpdateGroupPhoto{} }
func (m *UpdateGroupPhoto) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupPhoto) ProtoMessage()    {}
func (*UpdateGroupPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{20}
}
func (m *UpdateGroupPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupPhoto.Merge(m, src)
}
func (m *UpdateGroupPhoto) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupPhoto proto.InternalMessageInfo

func (m *UpdateGroupPhoto) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateGroupPhoto) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateGroupPhoto) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpdateGroupPhoto) GetPhoto() *GroupPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *UpdateGroupPhoto) GetPhotoID() int64 {
	if m != nil {
		return m.PhotoID
	}
	return 0
}

// UpdateReadMessagesContents
type UpdateReadMessagesContents struct {
	UCount     int32   `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID   int64   `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	MessageIDs []int64 `protobuf:"varint,1,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
	Peer       *Peer   `protobuf:"bytes,2,req,name=Peer" json:"Peer,omitempty"`
}

func (m *UpdateReadMessagesContents) Reset()         { *m = UpdateReadMessagesContents{} }
func (m *UpdateReadMessagesContents) String() string { return proto.CompactTextString(m) }
func (*UpdateReadMessagesContents) ProtoMessage()    {}
func (*UpdateReadMessagesContents) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{21}
}
func (m *UpdateReadMessagesContents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateReadMessagesContents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateReadMessagesContents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateReadMessagesContents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReadMessagesContents.Merge(m, src)
}
func (m *UpdateReadMessagesContents) XXX_Size() int {
	return m.Size()
}
func (m *UpdateReadMessagesContents) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReadMessagesContents.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReadMessagesContents proto.InternalMessageInfo

func (m *UpdateReadMessagesContents) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateReadMessagesContents) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateReadMessagesContents) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

func (m *UpdateReadMessagesContents) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// UpdateAuthorizationReset
type UpdateAuthorizationReset struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
}

func (m *UpdateAuthorizationReset) Reset()         { *m = UpdateAuthorizationReset{} }
func (m *UpdateAuthorizationReset) String() string { return proto.CompactTextString(m) }
func (*UpdateAuthorizationReset) ProtoMessage()    {}
func (*UpdateAuthorizationReset) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{22}
}
func (m *UpdateAuthorizationReset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAuthorizationReset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAuthorizationReset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAuthorizationReset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAuthorizationReset.Merge(m, src)
}
func (m *UpdateAuthorizationReset) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAuthorizationReset) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAuthorizationReset.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAuthorizationReset proto.InternalMessageInfo

func (m *UpdateAuthorizationReset) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateAuthorizationReset) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

// UpdateDraftMessage
type UpdateDraftMessage struct {
	UCount   int32         `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64         `protobuf:"varint,101,opt,name=UpdateID" json:"UpdateID"`
	Message  *DraftMessage `protobuf:"bytes,1,req,name=Message" json:"Message,omitempty"`
}

func (m *UpdateDraftMessage) Reset()         { *m = UpdateDraftMessage{} }
func (m *UpdateDraftMessage) String() string { return proto.CompactTextString(m) }
func (*UpdateDraftMessage) ProtoMessage()    {}
func (*UpdateDraftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{23}
}
func (m *UpdateDraftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDraftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDraftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDraftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDraftMessage.Merge(m, src)
}
func (m *UpdateDraftMessage) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDraftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDraftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDraftMessage proto.InternalMessageInfo

func (m *UpdateDraftMessage) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateDraftMessage) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateDraftMessage) GetMessage() *DraftMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

// UpdateDraftMessageCleared
type UpdateDraftMessageCleared struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,opt,name=UpdateID" json:"UpdateID"`
	Peer     *Peer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
}

func (m *UpdateDraftMessageCleared) Reset()         { *m = UpdateDraftMessageCleared{} }
func (m *UpdateDraftMessageCleared) String() string { return proto.CompactTextString(m) }
func (*UpdateDraftMessageCleared) ProtoMessage()    {}
func (*UpdateDraftMessageCleared) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{24}
}
func (m *UpdateDraftMessageCleared) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDraftMessageCleared) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDraftMessageCleared.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDraftMessageCleared) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDraftMessageCleared.Merge(m, src)
}
func (m *UpdateDraftMessageCleared) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDraftMessageCleared) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDraftMessageCleared.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDraftMessageCleared proto.InternalMessageInfo

func (m *UpdateDraftMessageCleared) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateDraftMessageCleared) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateDraftMessageCleared) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// UpdateDialogPinned
type UpdateDialogPinned struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Peer     *Peer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	Pinned   bool  `protobuf:"varint,2,req,name=Pinned" json:"Pinned"`
}

func (m *UpdateDialogPinned) Reset()         { *m = UpdateDialogPinned{} }
func (m *UpdateDialogPinned) String() string { return proto.CompactTextString(m) }
func (*UpdateDialogPinned) ProtoMessage()    {}
func (*UpdateDialogPinned) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{25}
}
func (m *UpdateDialogPinned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDialogPinned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDialogPinned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDialogPinned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDialogPinned.Merge(m, src)
}
func (m *UpdateDialogPinned) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDialogPinned) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDialogPinned.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDialogPinned proto.InternalMessageInfo

func (m *UpdateDialogPinned) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateDialogPinned) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateDialogPinned) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateDialogPinned) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

// UpdateDialogPinnedOrder
type UpdateDialogPinnedReorder struct {
	UCount   int32   `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64   `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Peer     []*Peer `protobuf:"bytes,1,rep,name=Peer" json:"Peer,omitempty"`
}

func (m *UpdateDialogPinnedReorder) Reset()         { *m = UpdateDialogPinnedReorder{} }
func (m *UpdateDialogPinnedReorder) String() string { return proto.CompactTextString(m) }
func (*UpdateDialogPinnedReorder) ProtoMessage()    {}
func (*UpdateDialogPinnedReorder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{26}
}
func (m *UpdateDialogPinnedReorder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDialogPinnedReorder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDialogPinnedReorder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDialogPinnedReorder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDialogPinnedReorder.Merge(m, src)
}
func (m *UpdateDialogPinnedReorder) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDialogPinnedReorder) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDialogPinnedReorder.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDialogPinnedReorder proto.InternalMessageInfo

func (m *UpdateDialogPinnedReorder) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateDialogPinnedReorder) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateDialogPinnedReorder) GetPeer() []*Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// UpdateAccountPrivacy
type UpdateAccountPrivacy struct {
	UCount           int32          `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID         int64          `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	ChatInvite       []*PrivacyRule `protobuf:"bytes,1,rep,name=ChatInvite" json:"ChatInvite,omitempty"`
	LastSeen         []*PrivacyRule `protobuf:"bytes,2,rep,name=LastSeen" json:"LastSeen,omitempty"`
	PhoneNumber      []*PrivacyRule `protobuf:"bytes,3,rep,name=PhoneNumber" json:"PhoneNumber,omitempty"`
	ProfilePhoto     []*PrivacyRule `protobuf:"bytes,4,rep,name=ProfilePhoto" json:"ProfilePhoto,omitempty"`
	ForwardedMessage []*PrivacyRule `protobuf:"bytes,5,rep,name=ForwardedMessage" json:"ForwardedMessage,omitempty"`
	Call             []*PrivacyRule `protobuf:"bytes,6,rep,name=Call" json:"Call,omitempty"`
}

func (m *UpdateAccountPrivacy) Reset()         { *m = UpdateAccountPrivacy{} }
func (m *UpdateAccountPrivacy) String() string { return proto.CompactTextString(m) }
func (*UpdateAccountPrivacy) ProtoMessage()    {}
func (*UpdateAccountPrivacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{27}
}
func (m *UpdateAccountPrivacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAccountPrivacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAccountPrivacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAccountPrivacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAccountPrivacy.Merge(m, src)
}
func (m *UpdateAccountPrivacy) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAccountPrivacy) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAccountPrivacy.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAccountPrivacy proto.InternalMessageInfo

func (m *UpdateAccountPrivacy) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateAccountPrivacy) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateAccountPrivacy) GetChatInvite() []*PrivacyRule {
	if m != nil {
		return m.ChatInvite
	}
	return nil
}

func (m *UpdateAccountPrivacy) GetLastSeen() []*PrivacyRule {
	if m != nil {
		return m.LastSeen
	}
	return nil
}

func (m *UpdateAccountPrivacy) GetPhoneNumber() []*PrivacyRule {
	if m != nil {
		return m.PhoneNumber
	}
	return nil
}

func (m *UpdateAccountPrivacy) GetProfilePhoto() []*PrivacyRule {
	if m != nil {
		return m.ProfilePhoto
	}
	return nil
}

func (m *UpdateAccountPrivacy) GetForwardedMessage() []*PrivacyRule {
	if m != nil {
		return m.ForwardedMessage
	}
	return nil
}

func (m *UpdateAccountPrivacy) GetCall() []*PrivacyRule {
	if m != nil {
		return m.Call
	}
	return nil
}

// UpdateLabelAdded
type UpdateLabelAdded struct {
	UCount     int32   `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID   int64   `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	PeerType   int32   `protobuf:"varint,1,req,name=PeerType" json:"PeerType"`
	PeerID     int64   `protobuf:"varint,2,req,name=PeerID" json:"PeerID"`
	MessageIDs []int64 `protobuf:"varint,3,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
	LabelIDs   []int32 `protobuf:"varint,4,rep,name=LabelIDs" json:"LabelIDs,omitempty"`
}

func (m *UpdateLabelAdded) Reset()         { *m = UpdateLabelAdded{} }
func (m *UpdateLabelAdded) String() string { return proto.CompactTextString(m) }
func (*UpdateLabelAdded) ProtoMessage()    {}
func (*UpdateLabelAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{28}
}
func (m *UpdateLabelAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLabelAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLabelAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLabelAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLabelAdded.Merge(m, src)
}
func (m *UpdateLabelAdded) XXX_Size() int {
	return m.Size()
}
func (m *UpdateLabelAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLabelAdded.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLabelAdded proto.InternalMessageInfo

func (m *UpdateLabelAdded) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateLabelAdded) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateLabelAdded) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *UpdateLabelAdded) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *UpdateLabelAdded) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

func (m *UpdateLabelAdded) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

// UpdateLabelRemoved
type UpdateLabelRemoved struct {
	UCount     int32   `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID   int64   `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	PeerType   int32   `protobuf:"varint,1,req,name=PeerType" json:"PeerType"`
	PeerID     int64   `protobuf:"varint,2,req,name=PeerID" json:"PeerID"`
	MessageIDs []int64 `protobuf:"varint,3,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
	LabelIDs   []int32 `protobuf:"varint,4,rep,name=LabelIDs" json:"LabelIDs,omitempty"`
}

func (m *UpdateLabelRemoved) Reset()         { *m = UpdateLabelRemoved{} }
func (m *UpdateLabelRemoved) String() string { return proto.CompactTextString(m) }
func (*UpdateLabelRemoved) ProtoMessage()    {}
func (*UpdateLabelRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2842e97b669d697, []int{29}
}
func (m *UpdateLabelRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLabelRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLabelRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLabelRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLabelRemoved.Merge(m, src)
}
func (m *UpdateLabelRemoved) XXX_Size() int {
	return m.Size()
}
func (m *UpdateLabelRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLabelRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLabelRemoved proto.InternalMessageInfo

func (m *UpdateLabelRemoved) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateLabelRemoved) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateLabelRemoved) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *UpdateLabelRemoved) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *UpdateLabelRemoved) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

func (m *UpdateLabelRemoved) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateGetState)(nil), "msg.UpdateGetState")
	proto.RegisterType((*UpdateGetDifference)(nil), "msg.UpdateGetDifference")
	proto.RegisterType((*UpdateDifference)(nil), "msg.UpdateDifference")
	proto.RegisterType((*UpdateTooLong)(nil), "msg.UpdateTooLong")
	proto.RegisterType((*UpdateState)(nil), "msg.UpdateState")
	proto.RegisterType((*UpdateMessageID)(nil), "msg.UpdateMessageID")
	proto.RegisterType((*UpdateNewMessage)(nil), "msg.UpdateNewMessage")
	proto.RegisterType((*UpdateMessageEdited)(nil), "msg.UpdateMessageEdited")
	proto.RegisterType((*UpdateMessagesDeleted)(nil), "msg.UpdateMessagesDeleted")
	proto.RegisterType((*UpdateReadHistoryInbox)(nil), "msg.UpdateReadHistoryInbox")
	proto.RegisterType((*UpdateReadHistoryOutbox)(nil), "msg.UpdateReadHistoryOutbox")
	proto.RegisterType((*UpdateUserTyping)(nil), "msg.UpdateUserTyping")
	proto.RegisterType((*UpdateUserStatus)(nil), "msg.UpdateUserStatus")
	proto.RegisterType((*UpdateUsername)(nil), "msg.UpdateUsername")
	proto.RegisterType((*UpdateUserPhoto)(nil), "msg.UpdateUserPhoto")
	proto.RegisterType((*UpdateNotifySettings)(nil), "msg.UpdateNotifySettings")
	proto.RegisterType((*UpdateGroupParticipantAdd)(nil), "msg.UpdateGroupParticipantAdd")
	proto.RegisterType((*UpdateGroupParticipantDeleted)(nil), "msg.UpdateGroupParticipantDeleted")
	proto.RegisterType((*UpdateGroupParticipantAdmin)(nil), "msg.UpdateGroupParticipantAdmin")
	proto.RegisterType((*UpdateGroupAdmins)(nil), "msg.UpdateGroupAdmins")
	proto.RegisterType((*UpdateGroupPhoto)(nil), "msg.UpdateGroupPhoto")
	proto.RegisterType((*UpdateReadMessagesContents)(nil), "msg.UpdateReadMessagesContents")
	proto.RegisterType((*UpdateAuthorizationReset)(nil), "msg.UpdateAuthorizationReset")
	proto.RegisterType((*UpdateDraftMessage)(nil), "msg.UpdateDraftMessage")
	proto.RegisterType((*UpdateDraftMessageCleared)(nil), "msg.UpdateDraftMessageCleared")
	proto.RegisterType((*UpdateDialogPinned)(nil), "msg.UpdateDialogPinned")
	proto.RegisterType((*UpdateDialogPinnedReorder)(nil), "msg.UpdateDialogPinnedReorder")
	proto.RegisterType((*UpdateAccountPrivacy)(nil), "msg.UpdateAccountPrivacy")
	proto.RegisterType((*UpdateLabelAdded)(nil), "msg.UpdateLabelAdded")
	proto.RegisterType((*UpdateLabelRemoved)(nil), "msg.UpdateLabelRemoved")
}

func init() { proto.RegisterFile("chat.api.updates.proto", fileDescriptor_b2842e97b669d697) }

var fileDescriptor_b2842e97b669d697 = []byte{
	// 1246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcf, 0x72, 0x1b, 0xc5,
	0x13, 0xf6, 0x78, 0xf5, 0xc7, 0x6e, 0xe5, 0x17, 0x3b, 0x93, 0x5f, 0x92, 0xc5, 0x24, 0x8a, 0x98,
	0x0a, 0x29, 0xf1, 0x4f, 0x49, 0x19, 0x8e, 0x5c, 0x64, 0xd9, 0x4e, 0x5c, 0xd8, 0x46, 0xb5, 0xb6,
	0x2f, 0xdc, 0xc6, 0xda, 0xb1, 0xb4, 0x55, 0xd2, 0x8e, 0x6a, 0x77, 0xe4, 0x58, 0xb9, 0x51, 0xc5,
	0x03, 0x40, 0x41, 0x71, 0xe1, 0x00, 0x3c, 0x06, 0x07, 0x8a, 0x6b, 0xb8, 0x50, 0x3e, 0x51, 0x5c,
	0xa0, 0x28, 0xfb, 0x05, 0x78, 0x04, 0x6a, 0x66, 0x76, 0x46, 0x2b, 0x4b, 0xc6, 0x65, 0xa4, 0x18,
	0xb8, 0x49, 0x5f, 0xf7, 0x7e, 0xfd, 0xf5, 0xf6, 0x4c, 0x77, 0x2f, 0xdc, 0x6e, 0xb4, 0xa8, 0xa8,
	0xd0, 0x6e, 0x50, 0xe9, 0x75, 0x7d, 0x2a, 0x58, 0x5c, 0xe9, 0x46, 0x5c, 0x70, 0xec, 0x74, 0xe2,
	0xe6, 0xd2, 0x2d, 0x65, 0x6c, 0xf0, 0x88, 0x55, 0x44, 0xbf, 0x6b, 0x6c, 0x64, 0x11, 0xae, 0xef,
	0x29, 0xe7, 0x27, 0x4c, 0xec, 0x08, 0x2a, 0x18, 0xf9, 0x00, 0x6e, 0x5a, 0x64, 0x35, 0x38, 0x38,
	0x60, 0x11, 0x0b, 0x1b, 0x0c, 0xbb, 0x90, 0x59, 0x8f, 0x78, 0xc7, 0x45, 0xa5, 0xd9, 0xb2, 0xb3,
	0x92, 0x79, 0xf1, 0xdb, 0xfd, 0x19, 0x4f, 0x21, 0x78, 0x09, 0xb2, 0x9b, 0x41, 0x27, 0x10, 0xee,
	0x6c, 0x69, 0xb6, 0x9c, 0x4d, 0x4c, 0x1a, 0x22, 0xdf, 0xcc, 0xc2, 0xa2, 0x66, 0x1b, 0xa6, 0xda,
	0xe2, 0x11, 0x53, 0x54, 0x73, 0x86, 0x4a, 0x22, 0xf8, 0x21, 0x14, 0xb6, 0xe8, 0x91, 0x7e, 0x60,
	0x63, 0x55, 0x11, 0x9a, 0x58, 0x69, 0x83, 0xf2, 0x0b, 0x42, 0xeb, 0xe7, 0x0c, 0xf9, 0x0d, 0x0c,
	0xf8, 0x1d, 0xc8, 0xeb, 0xdf, 0xb1, 0x9b, 0x29, 0x39, 0xe5, 0xc2, 0xf2, 0xcd, 0x4a, 0x27, 0x6e,
	0x56, 0x34, 0xb6, 0x16, 0x1e, 0xb2, 0x36, 0xef, 0x32, 0xcf, 0xf8, 0xe0, 0xfb, 0x90, 0xdd, 0x8b,
	0x59, 0x14, 0xbb, 0x59, 0xe5, 0x3c, 0xaf, 0x9d, 0x63, 0x16, 0x79, 0x1a, 0xc7, 0x04, 0x72, 0x4f,
	0x22, 0xde, 0xeb, 0xc6, 0x6e, 0x4e, 0x79, 0x80, 0xf2, 0x50, 0x90, 0x97, 0x58, 0x70, 0x05, 0x16,
	0x6a, 0xbd, 0x28, 0x62, 0xa1, 0xb0, 0xfa, 0xf2, 0x25, 0x64, 0xf5, 0x9d, 0x35, 0x92, 0x05, 0xf8,
	0x9f, 0xfe, 0xbd, 0xcb, 0xf9, 0x26, 0x0f, 0x9b, 0xe4, 0x11, 0x14, 0x34, 0xa0, 0xea, 0x81, 0x4b,
	0x30, 0x67, 0x89, 0xd2, 0x2f, 0xdf, 0xa2, 0xa4, 0x07, 0x0b, 0xfa, 0xf7, 0x16, 0x8b, 0x63, 0xda,
	0x94, 0x89, 0xdf, 0x85, 0xdc, 0x5e, 0x8d, 0xf7, 0x42, 0xe1, 0xfa, 0xa9, 0xa2, 0x24, 0x18, 0x26,
	0x30, 0x6f, 0x5d, 0x87, 0x38, 0x07, 0xb0, 0x0c, 0xeb, 0xd1, 0xd0, 0xe7, 0x9d, 0x33, 0x75, 0xb0,
	0x28, 0xf9, 0x11, 0x99, 0xda, 0x6e, 0xb3, 0x67, 0xc9, 0x83, 0x17, 0x04, 0x4e, 0xe7, 0xc2, 0xc6,
	0xe5, 0x82, 0xdf, 0x84, 0x7c, 0x42, 0xa5, 0x84, 0x15, 0x96, 0x17, 0x6d, 0x11, 0x12, 0xdc, 0x33,
	0x0e, 0xf8, 0x35, 0xc8, 0xed, 0xb0, 0xd0, 0x67, 0x91, 0x12, 0x38, 0x54, 0xaf, 0xc4, 0x80, 0x1f,
	0x02, 0x54, 0x1b, 0x0d, 0x16, 0xc7, 0x4f, 0x69, 0xdc, 0x72, 0x9d, 0x12, 0x2a, 0xe7, 0x56, 0x72,
	0x32, 0xe4, 0x63, 0xe4, 0xa5, 0x2c, 0xe4, 0x63, 0x64, 0x4e, 0x7d, 0x42, 0xbe, 0xe6, 0x07, 0x82,
	0xf9, 0x57, 0x99, 0x0e, 0xf9, 0x12, 0xc1, 0xad, 0x21, 0x0d, 0xf1, 0x2a, 0x6b, 0xb3, 0x69, 0xa8,
	0x28, 0x02, 0xd8, 0xc2, 0xc6, 0x2e, 0x2a, 0x39, 0x65, 0xc7, 0x4b, 0x21, 0xf8, 0x1e, 0x64, 0xea,
	0x4c, 0xbd, 0x46, 0x64, 0x5f, 0xa3, 0x04, 0x3c, 0x05, 0x93, 0xcf, 0x11, 0xdc, 0xd6, 0x5c, 0x1e,
	0xa3, 0xfe, 0xd3, 0x20, 0x16, 0x3c, 0xea, 0x6f, 0x84, 0xfb, 0xfc, 0x68, 0x62, 0x65, 0x26, 0x32,
	0x4a, 0x15, 0x70, 0x10, 0x59, 0xb6, 0x96, 0x2d, 0x7a, 0x74, 0xe6, 0x04, 0x6a, 0x88, 0x7c, 0x81,
	0xe0, 0xce, 0x88, 0xaa, 0x0f, 0x7b, 0xe2, 0x1f, 0x96, 0xf5, 0xad, 0xbd, 0x15, 0xb2, 0xc8, 0xbb,
	0xfd, 0x6e, 0x10, 0x36, 0x2f, 0xd0, 0x53, 0x84, 0x9c, 0xf4, 0xb5, 0x77, 0xd1, 0x1c, 0xd0, 0x04,
	0xc5, 0x8f, 0x20, 0x57, 0x6d, 0x88, 0x80, 0x87, 0x2a, 0xde, 0xf5, 0xe5, 0x1b, 0x4a, 0x8f, 0xa6,
	0xd6, 0x06, 0x43, 0xa8, 0xff, 0x49, 0x42, 0xa9, 0xd3, 0x76, 0x46, 0x4b, 0xa8, 0x51, 0x12, 0xa6,
	0x25, 0xca, 0x2e, 0xd3, 0x8b, 0x27, 0x94, 0x78, 0x17, 0x72, 0x9a, 0x67, 0x68, 0x08, 0x24, 0x18,
	0xf9, 0x03, 0x99, 0x29, 0x23, 0xdd, 0x43, 0xda, 0x61, 0x53, 0x38, 0xd2, 0x7f, 0x2d, 0x48, 0x32,
	0x24, 0xb1, 0x94, 0xa4, 0x79, 0xcb, 0x60, 0x14, 0x10, 0x98, 0x5f, 0x0f, 0xa2, 0x58, 0x6c, 0x4b,
	0x17, 0x27, 0xe5, 0x32, 0x80, 0x25, 0xcb, 0x26, 0x4d, 0x5c, 0x32, 0x69, 0x16, 0x83, 0xe2, 0xdb,
	0xe0, 0xac, 0x04, 0xdc, 0xcd, 0xa6, 0x8c, 0x12, 0x20, 0xdf, 0x21, 0xd3, 0x94, 0x65, 0xc0, 0x7a,
	0x4b, 0xce, 0xe1, 0x97, 0x9d, 0xf3, 0x03, 0xc8, 0xaa, 0x40, 0xc9, 0x3d, 0xbe, 0x6e, 0x5b, 0x8d,
	0x42, 0x3d, 0x6d, 0xc4, 0x25, 0xc8, 0xab, 0x1f, 0xea, 0x74, 0xa0, 0x14, 0x8d, 0x81, 0xc9, 0xcf,
	0x08, 0xfe, 0x9f, 0x34, 0x76, 0x2e, 0x82, 0x83, 0xfe, 0x0e, 0x13, 0x22, 0x08, 0x9b, 0xf1, 0x4b,
	0x4f, 0xe0, 0x0d, 0x00, 0x1d, 0x31, 0xe9, 0x46, 0x67, 0x2e, 0x5f, 0xca, 0x88, 0xdf, 0x85, 0x39,
	0x23, 0x4b, 0x15, 0xaf, 0xb0, 0x7c, 0xc7, 0x3a, 0x0e, 0xab, 0xf6, 0xac, 0x23, 0xf9, 0x15, 0xc1,
	0x2b, 0xc9, 0x6e, 0x23, 0x67, 0x75, 0x9d, 0x46, 0x22, 0x68, 0x04, 0x5d, 0x1a, 0x8a, 0xaa, 0x3f,
	0x79, 0x97, 0x2d, 0x41, 0x5e, 0xd1, 0x8e, 0xa4, 0x67, 0xe0, 0x54, 0xfe, 0xb3, 0xe7, 0x14, 0x70,
	0x7e, 0x23, 0x3c, 0x0c, 0xc4, 0x98, 0xab, 0x3b, 0x30, 0xc8, 0xf5, 0x69, 0x95, 0x0a, 0x7d, 0x20,
	0xed, 0x26, 0x26, 0x11, 0xd9, 0x7b, 0xee, 0x8d, 0xcf, 0x6f, 0x5a, 0x93, 0x64, 0xe2, 0x1c, 0xc9,
	0x0f, 0x08, 0x5e, 0x3d, 0xaf, 0x06, 0x9d, 0x20, 0xfc, 0x17, 0x54, 0xa1, 0x08, 0xf9, 0x8d, 0x58,
	0x89, 0x51, 0x35, 0x30, 0x1b, 0xaa, 0x01, 0xc9, 0xd7, 0x08, 0x6e, 0xa4, 0x32, 0x50, 0x60, 0x7c,
	0x05, 0xba, 0xcb, 0x70, 0x4d, 0xc5, 0x5a, 0x0b, 0xe9, 0x7e, 0x9b, 0xf9, 0x4a, 0xbd, 0x11, 0x37,
	0x64, 0x21, 0xdf, 0xdb, 0x19, 0xa4, 0xdf, 0xf1, 0x54, 0xba, 0xcf, 0xc5, 0x02, 0x5f, 0x1f, 0xee,
	0x3f, 0x0b, 0x83, 0xe5, 0xf8, 0x92, 0x0d, 0xe8, 0x2b, 0x04, 0x4b, 0x83, 0xd1, 0x6e, 0xb6, 0xa1,
	0x1a, 0x0f, 0x05, 0x0b, 0x45, 0x7c, 0x85, 0xeb, 0xd0, 0xb8, 0xe9, 0x4f, 0x3e, 0x02, 0x57, 0x53,
	0x55, 0x7b, 0xa2, 0xc5, 0xa3, 0xe0, 0x39, 0x95, 0x43, 0xd7, 0x63, 0x31, 0x13, 0x93, 0x4a, 0x93,
	0x7b, 0x28, 0x4e, 0xbe, 0x97, 0x22, 0x7a, 0x20, 0xfe, 0xce, 0x56, 0x8d, 0xc6, 0x64, 0xfc, 0xd6,
	0xd9, 0x35, 0x54, 0xaf, 0x10, 0xe9, 0x18, 0x83, 0x3d, 0xf4, 0xb9, 0x69, 0x92, 0x69, 0x73, 0xad,
	0xcd, 0x68, 0x74, 0xc9, 0x06, 0x82, 0x2e, 0xbd, 0x59, 0x91, 0xcf, 0x06, 0xf9, 0x07, 0xb4, 0xcd,
	0x9b, 0xf5, 0x20, 0x0c, 0xa7, 0xd0, 0xb6, 0x2e, 0xd8, 0xe7, 0xee, 0x42, 0x4e, 0x07, 0x1a, 0xba,
	0x53, 0x09, 0x96, 0x7a, 0x1f, 0x29, 0x49, 0x1e, 0xe3, 0x91, 0xaf, 0x1f, 0x9d, 0x92, 0x32, 0x67,
	0xdc, 0xfb, 0xf8, 0xc4, 0x31, 0xa3, 0xb8, 0xda, 0x68, 0x48, 0xca, 0x7a, 0x14, 0x1c, 0xd2, 0x46,
	0x7f, 0xe2, 0xb8, 0x8f, 0x01, 0x6a, 0x2d, 0x2a, 0xf4, 0x54, 0x49, 0xa2, 0xeb, 0x6f, 0x93, 0x24,
	0x82, 0xd7, 0x6b, 0x33, 0x2f, 0xe5, 0x83, 0xdf, 0xd6, 0xbb, 0xd0, 0x0e, 0x63, 0x72, 0x0f, 0x1d,
	0xef, 0x6f, 0x3d, 0xf0, 0x32, 0x14, 0xea, 0x2d, 0x1e, 0xb2, 0xed, 0x5e, 0x67, 0x9f, 0x45, 0xae,
	0x73, 0xce, 0x03, 0x69, 0x27, 0xfc, 0x1e, 0x5c, 0xab, 0x47, 0xfc, 0x20, 0x68, 0x33, 0xdd, 0x46,
	0x32, 0xe7, 0x3c, 0x34, 0xe4, 0x85, 0xdf, 0x87, 0xc5, 0x75, 0x1e, 0x3d, 0xa3, 0x91, 0xcf, 0x4c,
	0xab, 0x48, 0xbe, 0xdf, 0x47, 0x9f, 0x1c, 0xf1, 0xc4, 0x0f, 0x20, 0x53, 0xa3, 0xed, 0x76, 0xf2,
	0x3d, 0x3f, 0xfa, 0x84, 0xb2, 0x92, 0x9f, 0x6c, 0x43, 0xdd, 0xa4, 0xfb, 0xac, 0x5d, 0xf5, 0xfd,
	0xa9, 0xcc, 0xd2, 0x39, 0x59, 0xe3, 0xdd, 0x7e, 0x57, 0xdf, 0x4a, 0xc3, 0x60, 0x51, 0x75, 0x2e,
	0x59, 0x6a, 0x52, 0x99, 0x73, 0xc9, 0x92, 0x39, 0x95, 0x6e, 0x63, 0xce, 0x48, 0x1b, 0x5b, 0x92,
	0x05, 0xdb, 0x67, 0x6d, 0x69, 0x95, 0xaf, 0x32, 0xeb, 0xd9, 0xff, 0xe4, 0xd8, 0xde, 0x33, 0x05,
	0x79, 0xac, 0xc3, 0x0f, 0xff, 0xdb, 0x29, 0xad, 0xb8, 0x2f, 0x4e, 0x8a, 0xe8, 0xf8, 0xa4, 0x88,
	0x7e, 0x3f, 0x29, 0xa2, 0x4f, 0x4f, 0x8b, 0x33, 0xc7, 0xa7, 0xc5, 0x99, 0x5f, 0x4e, 0x8b, 0x33,
	0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xab, 0x8a, 0x7f, 0x18, 0x13, 0x00, 0x00,
}

func (m *UpdateGetState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGetState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateGetDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGetDifference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.From))
	dAtA[i] = 0x10
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Limit))
	return i, nil
}

func (m *UpdateDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDifference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.More {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x10
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.MaxUpdateID))
	dAtA[i] = 0x18
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.MinUpdateID))
	if len(m.Updates) > 0 {
		for _, msg := range m.Updates {
			dAtA[i] = 0x22
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x32
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.CurrentUpdateID))
	return i, nil
}

func (m *UpdateTooLong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTooLong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateMessageID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.MessageID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.RandomID))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	return i, nil
}

func (m *UpdateNewMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNewMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Message == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Message.Size()))
		n1, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Sender == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sender")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Sender.Size()))
		n2, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	dAtA[i] = 0x19
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i += 8
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateMessageEdited) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageEdited) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Message == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Message.Size()))
		n3, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateMessagesDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessagesDeleted) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		for _, num := range m.MessageIDs {
			dAtA[i] = 0x8
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(num))
		}
	}
	if m.Peer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Peer.Size()))
		n4, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateReadHistoryInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateReadHistoryInbox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Peer.Size()))
		n5, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.MaxID))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateReadHistoryOutbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateReadHistoryOutbox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Peer.Size()))
		n6, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.MaxID))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateUserTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserTyping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UserID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Action))
	dAtA[i] = 0x18
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.PeerID))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	return i, nil
}

func (m *UpdateUserStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UserID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Status))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	return i, nil
}

func (m *UpdateUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUsername) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UserID))
	dAtA[i] = 0x12
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(len(m.Username)))
	i += copy(dAtA[i:], m.Username)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(len(m.FirstName)))
	i += copy(dAtA[i:], m.FirstName)
	dAtA[i] = 0x22
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(len(m.LastName)))
	i += copy(dAtA[i:], m.LastName)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(len(m.Bio)))
	i += copy(dAtA[i:], m.Bio)
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateUserPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserPhoto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UserID))
	if m.Photo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Photo.Size()))
		n7, err := m.Photo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.PhotoID))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UserID))
	if m.NotifyPeer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("NotifyPeer")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.NotifyPeer.Size()))
		n8, err := m.NotifyPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Settings == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Settings")
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Settings.Size()))
		n9, err := m.Settings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateGroupParticipantAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupParticipantAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.GroupID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UserID))
	dAtA[i] = 0x18
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.InviterID))
	dAtA[i] = 0x20
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Date))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateGroupParticipantDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupParticipantDeleted) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.GroupID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UserID))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateGroupParticipantAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupParticipantAdmin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.GroupID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UserID))
	dAtA[i] = 0x18
	i++
	if m.IsAdmin {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateGroupAdmins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupAdmins) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.GroupID))
	dAtA[i] = 0x10
	i++
	if m.AdminEnabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateGroupPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupPhoto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.GroupID))
	if m.Photo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Photo.Size()))
		n10, err := m.Photo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.PhotoID))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateReadMessagesContents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateReadMessagesContents) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		for _, num := range m.MessageIDs {
			dAtA[i] = 0x8
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(num))
		}
	}
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Peer.Size()))
		n11, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateAuthorizationReset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAuthorizationReset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateDraftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDraftMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Message == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Message.Size()))
		n12, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateDraftMessageCleared) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDraftMessageCleared) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Peer.Size()))
		n13, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateDialogPinned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDialogPinned) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.Peer.Size()))
		n14, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	dAtA[i] = 0x10
	i++
	if m.Pinned {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateDialogPinnedReorder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDialogPinnedReorder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Peer) > 0 {
		for _, msg := range m.Peer {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateAccountPrivacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAccountPrivacy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatInvite) > 0 {
		for _, msg := range m.ChatInvite {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LastSeen) > 0 {
		for _, msg := range m.LastSeen {
			dAtA[i] = 0x12
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PhoneNumber) > 0 {
		for _, msg := range m.PhoneNumber {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ProfilePhoto) > 0 {
		for _, msg := range m.ProfilePhoto {
			dAtA[i] = 0x22
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ForwardedMessage) > 0 {
		for _, msg := range m.ForwardedMessage {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Call) > 0 {
		for _, msg := range m.Call {
			dAtA[i] = 0x32
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateLabelAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLabelAdded) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.PeerType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.PeerID))
	if len(m.MessageIDs) > 0 {
		for _, num := range m.MessageIDs {
			dAtA[i] = 0x18
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(num))
		}
	}
	if len(m.LabelIDs) > 0 {
		for _, num := range m.LabelIDs {
			dAtA[i] = 0x20
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func (m *UpdateLabelRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLabelRemoved) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.PeerType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.PeerID))
	if len(m.MessageIDs) > 0 {
		for _, num := range m.MessageIDs {
			dAtA[i] = 0x18
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(num))
		}
	}
	if len(m.LabelIDs) > 0 {
		for _, num := range m.LabelIDs {
			dAtA[i] = 0x20
			i++
			i = encodeVarintChatApiUpdates(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UCount))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintChatApiUpdates(dAtA, i, uint64(m.UpdateID))
	return i, nil
}

func encodeVarintChatApiUpdates(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UpdateGetState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateGetDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.From))
	n += 1 + sovChatApiUpdates(uint64(m.Limit))
	return n
}

func (m *UpdateDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 1 + sovChatApiUpdates(uint64(m.MaxUpdateID))
	n += 1 + sovChatApiUpdates(uint64(m.MinUpdateID))
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovChatApiUpdates(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChatApiUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovChatApiUpdates(uint64(l))
		}
	}
	n += 1 + sovChatApiUpdates(uint64(m.CurrentUpdateID))
	return n
}

func (m *UpdateTooLong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateMessageID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.MessageID))
	n += 1 + sovChatApiUpdates(uint64(m.RandomID))
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	return n
}

func (m *UpdateNewMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	n += 9
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateMessageEdited) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateMessagesDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovChatApiUpdates(uint64(e))
		}
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateReadHistoryInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	n += 1 + sovChatApiUpdates(uint64(m.MaxID))
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateReadHistoryOutbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	n += 1 + sovChatApiUpdates(uint64(m.MaxID))
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateUserTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.UserID))
	n += 1 + sovChatApiUpdates(uint64(m.Action))
	n += 1 + sovChatApiUpdates(uint64(m.PeerID))
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	return n
}

func (m *UpdateUserStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.UserID))
	n += 1 + sovChatApiUpdates(uint64(m.Status))
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	return n
}

func (m *UpdateUsername) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.UserID))
	l = len(m.Username)
	n += 1 + l + sovChatApiUpdates(uint64(l))
	l = len(m.FirstName)
	n += 1 + l + sovChatApiUpdates(uint64(l))
	l = len(m.LastName)
	n += 1 + l + sovChatApiUpdates(uint64(l))
	l = len(m.Bio)
	n += 1 + l + sovChatApiUpdates(uint64(l))
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateUserPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.UserID))
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	n += 1 + sovChatApiUpdates(uint64(m.PhotoID))
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.UserID))
	if m.NotifyPeer != nil {
		l = m.NotifyPeer.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateGroupParticipantAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.GroupID))
	n += 1 + sovChatApiUpdates(uint64(m.UserID))
	n += 1 + sovChatApiUpdates(uint64(m.InviterID))
	n += 1 + sovChatApiUpdates(uint64(m.Date))
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateGroupParticipantDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.GroupID))
	n += 1 + sovChatApiUpdates(uint64(m.UserID))
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateGroupParticipantAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.GroupID))
	n += 1 + sovChatApiUpdates(uint64(m.UserID))
	n += 2
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateGroupAdmins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.GroupID))
	n += 2
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateGroupPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.GroupID))
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	n += 1 + sovChatApiUpdates(uint64(m.PhotoID))
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateReadMessagesContents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovChatApiUpdates(uint64(e))
		}
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateAuthorizationReset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateDraftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateDraftMessageCleared) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateDialogPinned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiUpdates(uint64(l))
	}
	n += 2
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateDialogPinnedReorder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Peer) > 0 {
		for _, e := range m.Peer {
			l = e.Size()
			n += 1 + l + sovChatApiUpdates(uint64(l))
		}
	}
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateAccountPrivacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChatInvite) > 0 {
		for _, e := range m.ChatInvite {
			l = e.Size()
			n += 1 + l + sovChatApiUpdates(uint64(l))
		}
	}
	if len(m.LastSeen) > 0 {
		for _, e := range m.LastSeen {
			l = e.Size()
			n += 1 + l + sovChatApiUpdates(uint64(l))
		}
	}
	if len(m.PhoneNumber) > 0 {
		for _, e := range m.PhoneNumber {
			l = e.Size()
			n += 1 + l + sovChatApiUpdates(uint64(l))
		}
	}
	if len(m.ProfilePhoto) > 0 {
		for _, e := range m.ProfilePhoto {
			l = e.Size()
			n += 1 + l + sovChatApiUpdates(uint64(l))
		}
	}
	if len(m.ForwardedMessage) > 0 {
		for _, e := range m.ForwardedMessage {
			l = e.Size()
			n += 1 + l + sovChatApiUpdates(uint64(l))
		}
	}
	if len(m.Call) > 0 {
		for _, e := range m.Call {
			l = e.Size()
			n += 1 + l + sovChatApiUpdates(uint64(l))
		}
	}
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateLabelAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.PeerType))
	n += 1 + sovChatApiUpdates(uint64(m.PeerID))
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovChatApiUpdates(uint64(e))
		}
	}
	if len(m.LabelIDs) > 0 {
		for _, e := range m.LabelIDs {
			n += 1 + sovChatApiUpdates(uint64(e))
		}
	}
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateLabelRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiUpdates(uint64(m.PeerType))
	n += 1 + sovChatApiUpdates(uint64(m.PeerID))
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovChatApiUpdates(uint64(e))
		}
	}
	if len(m.LabelIDs) > 0 {
		for _, e := range m.LabelIDs {
			n += 1 + sovChatApiUpdates(uint64(e))
		}
	}
	n += 2 + sovChatApiUpdates(uint64(m.UCount))
	n += 2 + sovChatApiUpdates(uint64(m.UpdateID))
	return n
}

func sovChatApiUpdates(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChatApiUpdates(x uint64) (n int) {
	return sovChatApiUpdates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateGetState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGetState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGetState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGetDifference) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGetDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGetDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("From")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Limit")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDifference) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field More", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.More = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUpdateID", wireType)
			}
			m.MaxUpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUpdateID", wireType)
			}
			m.MinUpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinUpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &UpdateEnvelope{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUpdateID", wireType)
			}
			m.CurrentUpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("More")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MaxUpdateID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MinUpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTooLong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTooLong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTooLong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateState) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageID) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MessageID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RandomID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNewMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNewMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNewMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &UserMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &User{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sender")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageEdited) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageEdited: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageEdited: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &UserMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessagesDeleted) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessagesDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessagesDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateReadHistoryInbox) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateReadHistoryInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateReadHistoryInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MaxID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateReadHistoryOutbox) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateReadHistoryOutbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateReadHistoryOutbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MaxID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserTyping) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= TypingAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Action")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStatus) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Status")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUsername) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Username")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FirstName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LastName")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Bio")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserPhoto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &UserPhoto{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoID", wireType)
			}
			m.PhotoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNotifySettings) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotifyPeer == nil {
				m.NotifyPeer = &Peer{}
			}
			if err := m.NotifyPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &PeerNotifySettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NotifyPeer")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Settings")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupParticipantAdd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupParticipantAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupParticipantAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterID", wireType)
			}
			m.InviterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviterID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("InviterID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Date")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupParticipantDeleted) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupParticipantDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupParticipantDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupParticipantAdmin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupParticipantAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupParticipantAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsAdmin")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupAdmins) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupAdmins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupAdmins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminEnabled = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AdminEnabled")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupPhoto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &GroupPhoto{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoID", wireType)
			}
			m.PhotoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateReadMessagesContents) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateReadMessagesContents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateReadMessagesContents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAuthorizationReset) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAuthorizationReset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAuthorizationReset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDraftMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDraftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDraftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &DraftMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDraftMessageCleared) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDraftMessageCleared: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDraftMessageCleared: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDialogPinned) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDialogPinned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDialogPinned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinned = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Pinned")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDialogPinnedReorder) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDialogPinnedReorder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDialogPinnedReorder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer, &Peer{})
			if err := m.Peer[len(m.Peer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAccountPrivacy) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAccountPrivacy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAccountPrivacy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatInvite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatInvite = append(m.ChatInvite, &PrivacyRule{})
			if err := m.ChatInvite[len(m.ChatInvite)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSeen = append(m.LastSeen, &PrivacyRule{})
			if err := m.LastSeen[len(m.LastSeen)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = append(m.PhoneNumber, &PrivacyRule{})
			if err := m.PhoneNumber[len(m.PhoneNumber)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfilePhoto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfilePhoto = append(m.ProfilePhoto, &PrivacyRule{})
			if err := m.ProfilePhoto[len(m.ProfilePhoto)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardedMessage = append(m.ForwardedMessage, &PrivacyRule{})
			if err := m.ForwardedMessage[len(m.ForwardedMessage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Call = append(m.Call, &PrivacyRule{})
			if err := m.Call[len(m.Call)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLabelAdded) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLabelAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLabelAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLabelRemoved) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLabelRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLabelRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatApiUpdates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatApiUpdates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatApiUpdates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatApiUpdates
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthChatApiUpdates
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChatApiUpdates
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChatApiUpdates(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthChatApiUpdates
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChatApiUpdates = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatApiUpdates   = fmt.Errorf("proto: integer overflow")
)
