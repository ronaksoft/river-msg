// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client.core.messages.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ClientPendingMessage
type ClientPendingMessage struct {
	ID         int64            `protobuf:"varint,1,req,name=ID" json:"ID"`
	RequestID  int64            `protobuf:"varint,2,req,name=RequestID" json:"RequestID"`
	PeerID     int64            `protobuf:"varint,3,req,name=PeerID" json:"PeerID"`
	PeerType   int32            `protobuf:"varint,4,req,name=PeerType" json:"PeerType"`
	AccessHash uint64           `protobuf:"fixed64,5,req,name=AccessHash" json:"AccessHash"`
	CreatedOn  int64            `protobuf:"varint,6,req,name=CreatedOn" json:"CreatedOn"`
	ReplyTo    int64            `protobuf:"varint,7,req,name=ReplyTo" json:"ReplyTo"`
	Body       string           `protobuf:"bytes,8,req,name=Body" json:"Body"`
	SenderID   int64            `protobuf:"varint,9,req,name=SenderID" json:"SenderID"`
	Entities   []*MessageEntity `protobuf:"bytes,10,rep,name=Entities" json:"Entities,omitempty"`
	MediaType  InputMediaType   `protobuf:"varint,11,opt,name=MediaType,enum=msg.InputMediaType" json:"MediaType"`
	Media      []byte           `protobuf:"bytes,12,opt,name=Media" json:"Media"`
}

func (m *ClientPendingMessage) Reset()         { *m = ClientPendingMessage{} }
func (m *ClientPendingMessage) String() string { return proto.CompactTextString(m) }
func (*ClientPendingMessage) ProtoMessage()    {}
func (*ClientPendingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{0}
}
func (m *ClientPendingMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientPendingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientPendingMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientPendingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientPendingMessage.Merge(m, src)
}
func (m *ClientPendingMessage) XXX_Size() int {
	return m.Size()
}
func (m *ClientPendingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientPendingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientPendingMessage proto.InternalMessageInfo

func (m *ClientPendingMessage) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClientPendingMessage) GetRequestID() int64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *ClientPendingMessage) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *ClientPendingMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *ClientPendingMessage) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ClientPendingMessage) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *ClientPendingMessage) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *ClientPendingMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *ClientPendingMessage) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *ClientPendingMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ClientPendingMessage) GetMediaType() InputMediaType {
	if m != nil {
		return m.MediaType
	}
	return InputMediaTypeEmpty
}

func (m *ClientPendingMessage) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

// ClientSendMessageMedia
type ClientSendMessageMedia struct {
	Peer          *InputPeer           `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MediaType     InputMediaType       `protobuf:"varint,2,req,name=MediaType,enum=msg.InputMediaType" json:"MediaType"`
	Caption       string               `protobuf:"bytes,3,opt,name=Caption" json:"Caption"`
	FileName      string               `protobuf:"bytes,4,opt,name=FileName" json:"FileName"`
	FilePath      string               `protobuf:"bytes,5,opt,name=FilePath" json:"FilePath"`
	ThumbFilePath string               `protobuf:"bytes,6,opt,name=ThumbFilePath" json:"ThumbFilePath"`
	FileMIME      string               `protobuf:"bytes,7,opt,name=FileMIME" json:"FileMIME"`
	ThumbMIME     string               `protobuf:"bytes,8,opt,name=ThumbMIME" json:"ThumbMIME"`
	ReplyTo       int64                `protobuf:"varint,9,opt,name=ReplyTo" json:"ReplyTo"`
	ClearDraft    bool                 `protobuf:"varint,10,opt,name=ClearDraft" json:"ClearDraft"`
	Attributes    []*DocumentAttribute `protobuf:"bytes,11,rep,name=Attributes" json:"Attributes,omitempty"`
}

func (m *ClientSendMessageMedia) Reset()         { *m = ClientSendMessageMedia{} }
func (m *ClientSendMessageMedia) String() string { return proto.CompactTextString(m) }
func (*ClientSendMessageMedia) ProtoMessage()    {}
func (*ClientSendMessageMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{1}
}
func (m *ClientSendMessageMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSendMessageMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSendMessageMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientSendMessageMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSendMessageMedia.Merge(m, src)
}
func (m *ClientSendMessageMedia) XXX_Size() int {
	return m.Size()
}
func (m *ClientSendMessageMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSendMessageMedia.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSendMessageMedia proto.InternalMessageInfo

func (m *ClientSendMessageMedia) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ClientSendMessageMedia) GetMediaType() InputMediaType {
	if m != nil {
		return m.MediaType
	}
	return InputMediaTypeEmpty
}

func (m *ClientSendMessageMedia) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ClientSendMessageMedia) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ClientSendMessageMedia) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *ClientSendMessageMedia) GetThumbFilePath() string {
	if m != nil {
		return m.ThumbFilePath
	}
	return ""
}

func (m *ClientSendMessageMedia) GetFileMIME() string {
	if m != nil {
		return m.FileMIME
	}
	return ""
}

func (m *ClientSendMessageMedia) GetThumbMIME() string {
	if m != nil {
		return m.ThumbMIME
	}
	return ""
}

func (m *ClientSendMessageMedia) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *ClientSendMessageMedia) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *ClientSendMessageMedia) GetAttributes() []*DocumentAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// ClientSearchResult
type ClientSearchResult struct {
	Messages      []*UserMessage `protobuf:"bytes,1,rep,name=Messages" json:"Messages,omitempty"`
	Users         []*User        `protobuf:"bytes,2,rep,name=Users" json:"Users,omitempty"`
	Groups        []*Group       `protobuf:"bytes,3,rep,name=Groups" json:"Groups,omitempty"`
	MatchedUsers  []*ContactUser `protobuf:"bytes,5,rep,name=MatchedUsers" json:"MatchedUsers,omitempty"`
	MatchedGroups []*Group       `protobuf:"bytes,6,rep,name=MatchedGroups" json:"MatchedGroups,omitempty"`
}

func (m *ClientSearchResult) Reset()         { *m = ClientSearchResult{} }
func (m *ClientSearchResult) String() string { return proto.CompactTextString(m) }
func (*ClientSearchResult) ProtoMessage()    {}
func (*ClientSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{2}
}
func (m *ClientSearchResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSearchResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSearchResult.Merge(m, src)
}
func (m *ClientSearchResult) XXX_Size() int {
	return m.Size()
}
func (m *ClientSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSearchResult proto.InternalMessageInfo

func (m *ClientSearchResult) GetMessages() []*UserMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ClientSearchResult) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ClientSearchResult) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ClientSearchResult) GetMatchedUsers() []*ContactUser {
	if m != nil {
		return m.MatchedUsers
	}
	return nil
}

func (m *ClientSearchResult) GetMatchedGroups() []*Group {
	if m != nil {
		return m.MatchedGroups
	}
	return nil
}

// DBMediaInfo
type DBMediaInfo struct {
	MediaInfo []*PeerMediaInfo `protobuf:"bytes,1,rep,name=MediaInfo" json:"MediaInfo,omitempty"`
}

func (m *DBMediaInfo) Reset()         { *m = DBMediaInfo{} }
func (m *DBMediaInfo) String() string { return proto.CompactTextString(m) }
func (*DBMediaInfo) ProtoMessage()    {}
func (*DBMediaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{3}
}
func (m *DBMediaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBMediaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBMediaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBMediaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBMediaInfo.Merge(m, src)
}
func (m *DBMediaInfo) XXX_Size() int {
	return m.Size()
}
func (m *DBMediaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DBMediaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DBMediaInfo proto.InternalMessageInfo

func (m *DBMediaInfo) GetMediaInfo() []*PeerMediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

// PeerMediaInfo
type PeerMediaInfo struct {
	PeerID int64        `protobuf:"varint,1,req,name=PeerID" json:"PeerID"`
	Media  []*MediaSize `protobuf:"bytes,2,rep,name=Media" json:"Media,omitempty"`
}

func (m *PeerMediaInfo) Reset()         { *m = PeerMediaInfo{} }
func (m *PeerMediaInfo) String() string { return proto.CompactTextString(m) }
func (*PeerMediaInfo) ProtoMessage()    {}
func (*PeerMediaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{4}
}
func (m *PeerMediaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerMediaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerMediaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerMediaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerMediaInfo.Merge(m, src)
}
func (m *PeerMediaInfo) XXX_Size() int {
	return m.Size()
}
func (m *PeerMediaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerMediaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PeerMediaInfo proto.InternalMessageInfo

func (m *PeerMediaInfo) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *PeerMediaInfo) GetMedia() []*MediaSize {
	if m != nil {
		return m.Media
	}
	return nil
}

// MediaSize
type MediaSize struct {
	MediaType int32 `protobuf:"varint,1,req,name=MediaType" json:"MediaType"`
	TotalSize int32 `protobuf:"varint,2,req,name=TotalSize" json:"TotalSize"`
}

func (m *MediaSize) Reset()         { *m = MediaSize{} }
func (m *MediaSize) String() string { return proto.CompactTextString(m) }
func (*MediaSize) ProtoMessage()    {}
func (*MediaSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f24b167aa6ec46f, []int{5}
}
func (m *MediaSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaSize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaSize.Merge(m, src)
}
func (m *MediaSize) XXX_Size() int {
	return m.Size()
}
func (m *MediaSize) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaSize.DiscardUnknown(m)
}

var xxx_messageInfo_MediaSize proto.InternalMessageInfo

func (m *MediaSize) GetMediaType() int32 {
	if m != nil {
		return m.MediaType
	}
	return 0
}

func (m *MediaSize) GetTotalSize() int32 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func init() {
	proto.RegisterType((*ClientPendingMessage)(nil), "msg.ClientPendingMessage")
	proto.RegisterType((*ClientSendMessageMedia)(nil), "msg.ClientSendMessageMedia")
	proto.RegisterType((*ClientSearchResult)(nil), "msg.ClientSearchResult")
	proto.RegisterType((*DBMediaInfo)(nil), "msg.DBMediaInfo")
	proto.RegisterType((*PeerMediaInfo)(nil), "msg.PeerMediaInfo")
	proto.RegisterType((*MediaSize)(nil), "msg.MediaSize")
}

func init() { proto.RegisterFile("client.core.messages.proto", fileDescriptor_7f24b167aa6ec46f) }

var fileDescriptor_7f24b167aa6ec46f = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4d, 0x6e, 0xdb, 0x38,
	0x14, 0xc7, 0x2d, 0xc9, 0x9f, 0xcf, 0x49, 0x30, 0xe0, 0x64, 0x32, 0x84, 0x31, 0x50, 0x04, 0x21,
	0x0b, 0x61, 0x50, 0x18, 0x41, 0x50, 0xb4, 0xcb, 0x22, 0xb6, 0xd3, 0xd6, 0x0b, 0xb7, 0x81, 0x9c,
	0x1e, 0x80, 0x91, 0x19, 0x5b, 0x80, 0x2d, 0xa9, 0x22, 0xb5, 0x70, 0x4f, 0xd1, 0xfb, 0xf4, 0x02,
	0xe9, 0x2e, 0xcb, 0xae, 0x8a, 0x22, 0x39, 0x40, 0xaf, 0x50, 0x90, 0xa2, 0x28, 0x3a, 0xe9, 0xa2,
	0x3b, 0xe9, 0xff, 0xff, 0x91, 0x7c, 0x7c, 0x1f, 0x84, 0x41, 0xb4, 0x8e, 0x69, 0xc2, 0x87, 0x51,
	0x9a, 0xd3, 0xe1, 0x86, 0x32, 0x46, 0x96, 0x94, 0x0d, 0xb3, 0x3c, 0xe5, 0x29, 0x72, 0x36, 0x6c,
	0x39, 0xf8, 0x27, 0x5a, 0x11, 0x65, 0xf3, 0x6d, 0x56, 0x79, 0x83, 0x7f, 0xa5, 0x4c, 0xb2, 0xf8,
	0xd1, 0xa2, 0x81, 0x5b, 0xf3, 0xca, 0x19, 0x6e, 0xe8, 0x22, 0x26, 0xca, 0xf7, 0xbf, 0x38, 0x70,
	0x38, 0x96, 0x67, 0x5e, 0xd2, 0x64, 0x11, 0x27, 0xcb, 0x59, 0x49, 0xa1, 0x43, 0xb0, 0xa7, 0x13,
	0x6c, 0x79, 0x76, 0xe0, 0x8c, 0x9a, 0xb7, 0xdf, 0x8f, 0x1b, 0xa1, 0x3d, 0x9d, 0x20, 0x1f, 0x7a,
	0x21, 0xfd, 0x58, 0x50, 0xc6, 0xa7, 0x13, 0x6c, 0x1b, 0x66, 0x2d, 0xa3, 0xff, 0xa0, 0x7d, 0x49,
	0x69, 0x3e, 0x9d, 0x60, 0xc7, 0x00, 0x94, 0x86, 0x3c, 0xe8, 0x8a, 0xaf, 0xab, 0x6d, 0x46, 0x71,
	0xd3, 0xb3, 0x83, 0x96, 0xf2, 0xb5, 0x8a, 0x4e, 0x00, 0xce, 0xa3, 0x88, 0x32, 0xf6, 0x96, 0xb0,
	0x15, 0x6e, 0x79, 0x76, 0xd0, 0x56, 0x8c, 0xa1, 0x8b, 0x48, 0xc6, 0x39, 0x25, 0x9c, 0x2e, 0xde,
	0x27, 0xb8, 0x6d, 0x46, 0xa2, 0x65, 0xe4, 0x42, 0x27, 0xa4, 0xd9, 0x7a, 0x7b, 0x95, 0xe2, 0x8e,
	0x41, 0x54, 0x22, 0xc2, 0xd0, 0x1c, 0xa5, 0x8b, 0x2d, 0xee, 0x7a, 0x76, 0xd0, 0x53, 0xa6, 0x54,
	0x44, 0x94, 0x73, 0x9a, 0x2c, 0xe4, 0x2d, 0x7a, 0xc6, 0x52, 0xad, 0xa2, 0x21, 0x74, 0x2f, 0x12,
	0x1e, 0xf3, 0x98, 0x32, 0x0c, 0x9e, 0x13, 0xf4, 0xcf, 0xd0, 0x70, 0xc3, 0x96, 0x43, 0x95, 0x3f,
	0xe9, 0x6d, 0x43, 0xcd, 0xa0, 0x97, 0xd0, 0x9b, 0x89, 0xc4, 0xcb, 0x8b, 0xf7, 0x3d, 0x2b, 0x38,
	0x38, 0xfb, 0x5b, 0x2e, 0x98, 0x26, 0x59, 0xc1, 0xb5, 0x55, 0x5d, 0x42, 0x0b, 0x68, 0x00, 0x2d,
	0xf9, 0x83, 0xf7, 0x3c, 0x2b, 0xd8, 0x53, 0x7e, 0x29, 0xf9, 0x5f, 0x1d, 0x38, 0x2a, 0xab, 0x27,
	0xe2, 0x52, 0x47, 0x4b, 0x0b, 0xf9, 0xd0, 0x14, 0x19, 0x95, 0x15, 0xec, 0x9f, 0x1d, 0xd4, 0x47,
	0x09, 0x35, 0x94, 0xde, 0x6e, 0x4c, 0xa2, 0x9a, 0x7f, 0x1a, 0x93, 0x0b, 0x9d, 0x31, 0xc9, 0x78,
	0x9c, 0x26, 0xd8, 0xf1, 0x2c, 0x9d, 0xbb, 0x4a, 0x14, 0xe9, 0x7b, 0x1d, 0xaf, 0xe9, 0x3b, 0xb2,
	0x11, 0x45, 0xae, 0x01, 0xad, 0x56, 0xc4, 0x25, 0xe1, 0xa2, 0xc4, 0x8f, 0x08, 0xa1, 0xa2, 0xff,
	0x61, 0xff, 0x6a, 0x55, 0x6c, 0xae, 0x35, 0xd6, 0x36, 0xb0, 0x5d, 0xab, 0xda, 0x6d, 0x36, 0x9d,
	0x5d, 0xe0, 0xce, 0xe3, 0xdd, 0x84, 0x2a, 0xda, 0x45, 0x2e, 0x91, 0x48, 0xd7, 0x40, 0x6a, 0xd9,
	0x6c, 0x97, 0x9e, 0x67, 0x3d, 0x6d, 0x97, 0x13, 0x80, 0xf1, 0x9a, 0x92, 0x7c, 0x92, 0x93, 0x1b,
	0x8e, 0xc1, 0xb3, 0x82, 0x6e, 0xd5, 0x98, 0xb5, 0x8e, 0x5e, 0x00, 0x9c, 0x73, 0x9e, 0xc7, 0xd7,
	0x05, 0xa7, 0x0c, 0xf7, 0x65, 0x6b, 0x1c, 0xc9, 0xac, 0x4e, 0xd2, 0xa8, 0xd8, 0xd0, 0x84, 0x6b,
	0x3b, 0x34, 0x48, 0xff, 0xa7, 0x05, 0xa8, 0xaa, 0x25, 0xc9, 0xa3, 0x55, 0x48, 0x59, 0xb1, 0xe6,
	0xe8, 0x19, 0x74, 0x55, 0x5d, 0x19, 0xb6, 0xe4, 0x66, 0x7f, 0xc9, 0xcd, 0x3e, 0x30, 0x9a, 0x2b,
	0x23, 0xd4, 0x04, 0x3a, 0x86, 0x96, 0x30, 0x18, 0xb6, 0x25, 0xda, 0xd3, 0x68, 0x58, 0xea, 0xc8,
	0x87, 0xf6, 0x9b, 0x3c, 0x2d, 0x32, 0x86, 0x1d, 0x49, 0x80, 0x24, 0xa4, 0x14, 0x2a, 0x07, 0x3d,
	0x87, 0xbd, 0x19, 0xe1, 0xd1, 0x8a, 0x2e, 0xca, 0xbd, 0x5a, 0xc6, 0xb1, 0xe3, 0x34, 0xe1, 0x24,
	0xe2, 0x72, 0xcb, 0x1d, 0x0a, 0x9d, 0xc2, 0xbe, 0xfa, 0x57, 0x07, 0xb4, 0x9f, 0x1c, 0xb0, 0x0b,
	0xf8, 0xaf, 0xa0, 0x3f, 0x19, 0xc9, 0xa6, 0x9a, 0x26, 0x37, 0x29, 0x3a, 0x55, 0xdd, 0x28, 0x7e,
	0xd4, 0x55, 0xcb, 0x91, 0x12, 0xbd, 0xaa, 0x9d, 0xb0, 0x86, 0xfc, 0x39, 0xec, 0xef, 0x78, 0xc6,
	0xd3, 0x63, 0xfd, 0xe6, 0xe9, 0x39, 0xa9, 0x26, 0xa9, 0x4c, 0xce, 0x81, 0x9a, 0xd7, 0x45, 0x4c,
	0xe6, 0xf1, 0x27, 0x5a, 0xcd, 0xd4, 0x5c, 0x85, 0x21, 0x34, 0xd1, 0x36, 0xf5, 0x84, 0x58, 0xc6,
	0x73, 0x65, 0x0c, 0x83, 0x68, 0xad, 0x94, 0x93, 0xb5, 0x58, 0x20, 0xa7, 0x48, 0x33, 0x5a, 0x1e,
	0xe1, 0xdb, 0x7b, 0xd7, 0xba, 0xbb, 0x77, 0xad, 0x1f, 0xf7, 0xae, 0xf5, 0xf9, 0xc1, 0x6d, 0xdc,
	0x3d, 0xb8, 0x8d, 0x6f, 0x0f, 0x6e, 0xe3, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x78, 0x1d, 0x1f,
	0xb1, 0xf2, 0x05, 0x00, 0x00,
}

func (m *ClientPendingMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientPendingMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.RequestID))
	dAtA[i] = 0x18
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.PeerID))
	dAtA[i] = 0x20
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.PeerType))
	dAtA[i] = 0x29
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i += 8
	dAtA[i] = 0x30
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.CreatedOn))
	dAtA[i] = 0x38
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.ReplyTo))
	dAtA[i] = 0x42
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.Body)))
	i += copy(dAtA[i:], m.Body)
	dAtA[i] = 0x48
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.SenderID))
	if len(m.Entities) > 0 {
		for _, msg := range m.Entities {
			dAtA[i] = 0x52
			i++
			i = encodeVarintClientCoreMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x58
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.MediaType))
	if m.Media != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.Media)))
		i += copy(dAtA[i:], m.Media)
	}
	return i, nil
}

func (m *ClientSendMessageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSendMessageMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.Peer.Size()))
		n1, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.MediaType))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.Caption)))
	i += copy(dAtA[i:], m.Caption)
	dAtA[i] = 0x22
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.FileName)))
	i += copy(dAtA[i:], m.FileName)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.FilePath)))
	i += copy(dAtA[i:], m.FilePath)
	dAtA[i] = 0x32
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.ThumbFilePath)))
	i += copy(dAtA[i:], m.ThumbFilePath)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.FileMIME)))
	i += copy(dAtA[i:], m.FileMIME)
	dAtA[i] = 0x42
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.ThumbMIME)))
	i += copy(dAtA[i:], m.ThumbMIME)
	dAtA[i] = 0x48
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.ReplyTo))
	dAtA[i] = 0x50
	i++
	if m.ClearDraft {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.Attributes) > 0 {
		for _, msg := range m.Attributes {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintClientCoreMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClientSearchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSearchResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintClientCoreMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x12
			i++
			i = encodeVarintClientCoreMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintClientCoreMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MatchedUsers) > 0 {
		for _, msg := range m.MatchedUsers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintClientCoreMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MatchedGroups) > 0 {
		for _, msg := range m.MatchedGroups {
			dAtA[i] = 0x32
			i++
			i = encodeVarintClientCoreMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DBMediaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBMediaInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MediaInfo) > 0 {
		for _, msg := range m.MediaInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintClientCoreMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PeerMediaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerMediaInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.PeerID))
	if len(m.Media) > 0 {
		for _, msg := range m.Media {
			dAtA[i] = 0x12
			i++
			i = encodeVarintClientCoreMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MediaSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaSize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.MediaType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.TotalSize))
	return i, nil
}

func encodeVarintClientCoreMessages(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClientPendingMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovClientCoreMessages(uint64(m.ID))
	n += 1 + sovClientCoreMessages(uint64(m.RequestID))
	n += 1 + sovClientCoreMessages(uint64(m.PeerID))
	n += 1 + sovClientCoreMessages(uint64(m.PeerType))
	n += 9
	n += 1 + sovClientCoreMessages(uint64(m.CreatedOn))
	n += 1 + sovClientCoreMessages(uint64(m.ReplyTo))
	l = len(m.Body)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	n += 1 + sovClientCoreMessages(uint64(m.SenderID))
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	n += 1 + sovClientCoreMessages(uint64(m.MediaType))
	if m.Media != nil {
		l = len(m.Media)
		n += 1 + l + sovClientCoreMessages(uint64(l))
	}
	return n
}

func (m *ClientSendMessageMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovClientCoreMessages(uint64(l))
	}
	n += 1 + sovClientCoreMessages(uint64(m.MediaType))
	l = len(m.Caption)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	l = len(m.FileName)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	l = len(m.FilePath)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	l = len(m.ThumbFilePath)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	l = len(m.FileMIME)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	l = len(m.ThumbMIME)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	n += 1 + sovClientCoreMessages(uint64(m.ReplyTo))
	n += 2
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	return n
}

func (m *ClientSearchResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	if len(m.MatchedUsers) > 0 {
		for _, e := range m.MatchedUsers {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	if len(m.MatchedGroups) > 0 {
		for _, e := range m.MatchedGroups {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	return n
}

func (m *DBMediaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MediaInfo) > 0 {
		for _, e := range m.MediaInfo {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	return n
}

func (m *PeerMediaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovClientCoreMessages(uint64(m.PeerID))
	if len(m.Media) > 0 {
		for _, e := range m.Media {
			l = e.Size()
			n += 1 + l + sovClientCoreMessages(uint64(l))
		}
	}
	return n
}

func (m *MediaSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovClientCoreMessages(uint64(m.MediaType))
	n += 1 + sovClientCoreMessages(uint64(m.TotalSize))
	return n
}

func sovClientCoreMessages(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClientCoreMessages(x uint64) (n int) {
	return sovClientCoreMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientPendingMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientPendingMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientPendingMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= (InputMediaType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media[:0], dAtA[iNdEx:postIndex]...)
			if m.Media == nil {
				m.Media = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RequestID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerType")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CreatedOn")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ReplyTo")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Body")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SenderID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSendMessageMedia) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSendMessageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSendMessageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= (InputMediaType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileMIME", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileMIME = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbMIME", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbMIME = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &DocumentAttribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MediaType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSearchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &UserMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedUsers = append(m.MatchedUsers, &ContactUser{})
			if err := m.MatchedUsers[len(m.MatchedUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedGroups = append(m.MatchedGroups, &Group{})
			if err := m.MatchedGroups[len(m.MatchedGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBMediaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBMediaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBMediaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaInfo = append(m.MediaInfo, &PeerMediaInfo{})
			if err := m.MediaInfo[len(m.MediaInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerMediaInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerMediaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerMediaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media, &MediaSize{})
			if err := m.Media[len(m.Media)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaSize) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MediaType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TotalSize")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientCoreMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClientCoreMessages
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClientCoreMessages
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClientCoreMessages(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClientCoreMessages = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientCoreMessages   = fmt.Errorf("proto: integer overflow")
)
