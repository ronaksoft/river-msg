// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.phone.proto

package msg

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DiscardReason int32

const (
	DiscardReasonUnknown    DiscardReason = 0
	DiscardReasonMissed     DiscardReason = 1
	DiscardReasonBusy       DiscardReason = 2
	DiscardReasonHangup     DiscardReason = 3
	DiscardReasonDisconnect DiscardReason = 4
	DiscardReasonReserved1  DiscardReason = 5
	DiscardReasonReserved2  DiscardReason = 6
	DiscardReasonReserved3  DiscardReason = 7
	DiscardReasonReserved4  DiscardReason = 8
	DiscardReasonReserved5  DiscardReason = 9
	DiscardReasonReserved6  DiscardReason = 10
	DiscardReasonReserved7  DiscardReason = 11
	DiscardReasonReserved8  DiscardReason = 12
	DiscardReasonReserved9  DiscardReason = 13
)

var DiscardReason_name = map[int32]string{
	0:  "DiscardReasonUnknown",
	1:  "DiscardReasonMissed",
	2:  "DiscardReasonBusy",
	3:  "DiscardReasonHangup",
	4:  "DiscardReasonDisconnect",
	5:  "DiscardReasonReserved1",
	6:  "DiscardReasonReserved2",
	7:  "DiscardReasonReserved3",
	8:  "DiscardReasonReserved4",
	9:  "DiscardReasonReserved5",
	10: "DiscardReasonReserved6",
	11: "DiscardReasonReserved7",
	12: "DiscardReasonReserved8",
	13: "DiscardReasonReserved9",
}

var DiscardReason_value = map[string]int32{
	"DiscardReasonUnknown":    0,
	"DiscardReasonMissed":     1,
	"DiscardReasonBusy":       2,
	"DiscardReasonHangup":     3,
	"DiscardReasonDisconnect": 4,
	"DiscardReasonReserved1":  5,
	"DiscardReasonReserved2":  6,
	"DiscardReasonReserved3":  7,
	"DiscardReasonReserved4":  8,
	"DiscardReasonReserved5":  9,
	"DiscardReasonReserved6":  10,
	"DiscardReasonReserved7":  11,
	"DiscardReasonReserved8":  12,
	"DiscardReasonReserved9":  13,
}

func (x DiscardReason) Enum() *DiscardReason {
	p := new(DiscardReason)
	*p = x
	return p
}

func (x DiscardReason) String() string {
	return proto.EnumName(DiscardReason_name, int32(x))
}

func (x *DiscardReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DiscardReason_value, data, "DiscardReason")
	if err != nil {
		return err
	}
	*x = DiscardReason(value)
	return nil
}

func (DiscardReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{0}
}

type PhoneCallAction int32

const (
	PhoneCallEmpty       PhoneCallAction = 0
	PhoneCallAccepted    PhoneCallAction = 1
	PhoneCallRequested   PhoneCallAction = 2
	PhoneCallCallWaiting PhoneCallAction = 3
	PhoneCallDiscarded   PhoneCallAction = 4
	PhoneCallIceExchange PhoneCallAction = 5
	PhoneCallReserved2   PhoneCallAction = 6
	PhoneCallReserved3   PhoneCallAction = 7
	PhoneCallReserved4   PhoneCallAction = 8
	PhoneCallReserved5   PhoneCallAction = 9
	PhoneCallReserved6   PhoneCallAction = 10
	PhoneCallReserved7   PhoneCallAction = 11
	PhoneCallReserved8   PhoneCallAction = 12
	PhoneCallReserved9   PhoneCallAction = 13
)

var PhoneCallAction_name = map[int32]string{
	0:  "PhoneCallEmpty",
	1:  "PhoneCallAccepted",
	2:  "PhoneCallRequested",
	3:  "PhoneCallCallWaiting",
	4:  "PhoneCallDiscarded",
	5:  "PhoneCallIceExchange",
	6:  "PhoneCallReserved2",
	7:  "PhoneCallReserved3",
	8:  "PhoneCallReserved4",
	9:  "PhoneCallReserved5",
	10: "PhoneCallReserved6",
	11: "PhoneCallReserved7",
	12: "PhoneCallReserved8",
	13: "PhoneCallReserved9",
}

var PhoneCallAction_value = map[string]int32{
	"PhoneCallEmpty":       0,
	"PhoneCallAccepted":    1,
	"PhoneCallRequested":   2,
	"PhoneCallCallWaiting": 3,
	"PhoneCallDiscarded":   4,
	"PhoneCallIceExchange": 5,
	"PhoneCallReserved2":   6,
	"PhoneCallReserved3":   7,
	"PhoneCallReserved4":   8,
	"PhoneCallReserved5":   9,
	"PhoneCallReserved6":   10,
	"PhoneCallReserved7":   11,
	"PhoneCallReserved8":   12,
	"PhoneCallReserved9":   13,
}

func (x PhoneCallAction) Enum() *PhoneCallAction {
	p := new(PhoneCallAction)
	*p = x
	return p
}

func (x PhoneCallAction) String() string {
	return proto.EnumName(PhoneCallAction_name, int32(x))
}

func (x *PhoneCallAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PhoneCallAction_value, data, "PhoneCallAction")
	if err != nil {
		return err
	}
	*x = PhoneCallAction(value)
	return nil
}

func (PhoneCallAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{1}
}

// PhoneInitCall
// @Function
// @Return: PhoneInit
type PhoneInitCall struct {
	Peer *InputPeer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
}

func (m *PhoneInitCall) Reset()         { *m = PhoneInitCall{} }
func (m *PhoneInitCall) String() string { return proto.CompactTextString(m) }
func (*PhoneInitCall) ProtoMessage()    {}
func (*PhoneInitCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{0}
}
func (m *PhoneInitCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneInitCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneInitCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneInitCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneInitCall.Merge(m, src)
}
func (m *PhoneInitCall) XXX_Size() int {
	return m.Size()
}
func (m *PhoneInitCall) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneInitCall.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneInitCall proto.InternalMessageInfo

func (m *PhoneInitCall) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// PhoneRequestCall
// @Function
// @Return: PhoneCall
type PhoneRequestCall struct {
	RandomID   int64                `protobuf:"varint,1,req,name=RandomID" json:"RandomID"`
	Peer       *InputPeer           `protobuf:"bytes,2,req,name=Peer" json:"Peer,omitempty"`
	Recipients []*PhoneRecipientSDP `protobuf:"bytes,3,rep,name=Recipients" json:"Recipients,omitempty"`
	CallID     int64                `protobuf:"varint,4,opt,name=CallID" json:"CallID"`
}

func (m *PhoneRequestCall) Reset()         { *m = PhoneRequestCall{} }
func (m *PhoneRequestCall) String() string { return proto.CompactTextString(m) }
func (*PhoneRequestCall) ProtoMessage()    {}
func (*PhoneRequestCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{1}
}
func (m *PhoneRequestCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneRequestCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneRequestCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneRequestCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneRequestCall.Merge(m, src)
}
func (m *PhoneRequestCall) XXX_Size() int {
	return m.Size()
}
func (m *PhoneRequestCall) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneRequestCall.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneRequestCall proto.InternalMessageInfo

func (m *PhoneRequestCall) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *PhoneRequestCall) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *PhoneRequestCall) GetRecipients() []*PhoneRecipientSDP {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *PhoneRequestCall) GetCallID() int64 {
	if m != nil {
		return m.CallID
	}
	return 0
}

// PhoneAcceptCall
// @Function
// @Return: PhoneCall
type PhoneAcceptCall struct {
	Peer       *InputPeer           `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	CallID     int64                `protobuf:"varint,2,req,name=CallID" json:"CallID"`
	Recipients []*PhoneRecipientSDP `protobuf:"bytes,3,rep,name=Recipients" json:"Recipients,omitempty"`
}

func (m *PhoneAcceptCall) Reset()         { *m = PhoneAcceptCall{} }
func (m *PhoneAcceptCall) String() string { return proto.CompactTextString(m) }
func (*PhoneAcceptCall) ProtoMessage()    {}
func (*PhoneAcceptCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{2}
}
func (m *PhoneAcceptCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneAcceptCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneAcceptCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneAcceptCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneAcceptCall.Merge(m, src)
}
func (m *PhoneAcceptCall) XXX_Size() int {
	return m.Size()
}
func (m *PhoneAcceptCall) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneAcceptCall.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneAcceptCall proto.InternalMessageInfo

func (m *PhoneAcceptCall) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *PhoneAcceptCall) GetCallID() int64 {
	if m != nil {
		return m.CallID
	}
	return 0
}

func (m *PhoneAcceptCall) GetRecipients() []*PhoneRecipientSDP {
	if m != nil {
		return m.Recipients
	}
	return nil
}

// PhoneDiscardCall
// @Function
// @Return: Bool
type PhoneDiscardCall struct {
	Peer       *InputPeer    `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	CallID     int64         `protobuf:"varint,2,req,name=CallID" json:"CallID"`
	Recipients []*InputUser  `protobuf:"bytes,3,rep,name=Recipients" json:"Recipients,omitempty"`
	Duration   int32         `protobuf:"varint,4,req,name=Duration" json:"Duration"`
	Reason     DiscardReason `protobuf:"varint,5,req,name=Reason,enum=msg.DiscardReason" json:"Reason"`
}

func (m *PhoneDiscardCall) Reset()         { *m = PhoneDiscardCall{} }
func (m *PhoneDiscardCall) String() string { return proto.CompactTextString(m) }
func (*PhoneDiscardCall) ProtoMessage()    {}
func (*PhoneDiscardCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{3}
}
func (m *PhoneDiscardCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneDiscardCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneDiscardCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneDiscardCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneDiscardCall.Merge(m, src)
}
func (m *PhoneDiscardCall) XXX_Size() int {
	return m.Size()
}
func (m *PhoneDiscardCall) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneDiscardCall.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneDiscardCall proto.InternalMessageInfo

func (m *PhoneDiscardCall) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *PhoneDiscardCall) GetCallID() int64 {
	if m != nil {
		return m.CallID
	}
	return 0
}

func (m *PhoneDiscardCall) GetRecipients() []*InputUser {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *PhoneDiscardCall) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *PhoneDiscardCall) GetReason() DiscardReason {
	if m != nil {
		return m.Reason
	}
	return DiscardReasonUnknown
}

// PhoneUpdateCall
// @Function
// @Return: Bool
type PhoneUpdateCall struct {
	Peer       *InputPeer      `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	CallID     int64           `protobuf:"varint,2,req,name=CallID" json:"CallID"`
	Recipients []*InputUser    `protobuf:"bytes,3,rep,name=Recipients" json:"Recipients,omitempty"`
	Action     PhoneCallAction `protobuf:"varint,7,req,name=Action,enum=msg.PhoneCallAction" json:"Action"`
	ActionData []byte          `protobuf:"bytes,8,req,name=ActionData" json:"ActionData"`
}

func (m *PhoneUpdateCall) Reset()         { *m = PhoneUpdateCall{} }
func (m *PhoneUpdateCall) String() string { return proto.CompactTextString(m) }
func (*PhoneUpdateCall) ProtoMessage()    {}
func (*PhoneUpdateCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{4}
}
func (m *PhoneUpdateCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneUpdateCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneUpdateCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneUpdateCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneUpdateCall.Merge(m, src)
}
func (m *PhoneUpdateCall) XXX_Size() int {
	return m.Size()
}
func (m *PhoneUpdateCall) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneUpdateCall.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneUpdateCall proto.InternalMessageInfo

func (m *PhoneUpdateCall) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *PhoneUpdateCall) GetCallID() int64 {
	if m != nil {
		return m.CallID
	}
	return 0
}

func (m *PhoneUpdateCall) GetRecipients() []*InputUser {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *PhoneUpdateCall) GetAction() PhoneCallAction {
	if m != nil {
		return m.Action
	}
	return PhoneCallEmpty
}

func (m *PhoneUpdateCall) GetActionData() []byte {
	if m != nil {
		return m.ActionData
	}
	return nil
}

// PhoneRateCall
// @Function
type PhoneRateCall struct {
	Peer    *InputPeer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	CallID  int64      `protobuf:"varint,2,req,name=CallID" json:"CallID"`
	Rate    int32      `protobuf:"varint,3,req,name=Rate" json:"Rate"`
	Comment string     `protobuf:"bytes,4,opt,name=Comment" json:"Comment"`
}

func (m *PhoneRateCall) Reset()         { *m = PhoneRateCall{} }
func (m *PhoneRateCall) String() string { return proto.CompactTextString(m) }
func (*PhoneRateCall) ProtoMessage()    {}
func (*PhoneRateCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{5}
}
func (m *PhoneRateCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneRateCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneRateCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneRateCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneRateCall.Merge(m, src)
}
func (m *PhoneRateCall) XXX_Size() int {
	return m.Size()
}
func (m *PhoneRateCall) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneRateCall.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneRateCall proto.InternalMessageInfo

func (m *PhoneRateCall) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *PhoneRateCall) GetCallID() int64 {
	if m != nil {
		return m.CallID
	}
	return 0
}

func (m *PhoneRateCall) GetRate() int32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *PhoneRateCall) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

// PhoneCall
type PhoneCall struct {
	ID   int64 `protobuf:"varint,1,req,name=ID" json:"ID"`
	Date int64 `protobuf:"varint,2,req,name=Date" json:"Date"`
}

func (m *PhoneCall) Reset()         { *m = PhoneCall{} }
func (m *PhoneCall) String() string { return proto.CompactTextString(m) }
func (*PhoneCall) ProtoMessage()    {}
func (*PhoneCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{6}
}
func (m *PhoneCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneCall.Merge(m, src)
}
func (m *PhoneCall) XXX_Size() int {
	return m.Size()
}
func (m *PhoneCall) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneCall.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneCall proto.InternalMessageInfo

func (m *PhoneCall) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PhoneCall) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// PhoneInit
type PhoneInit struct {
	IceServers []*IceServer `protobuf:"bytes,1,rep,name=IceServers" json:"IceServers,omitempty"`
}

func (m *PhoneInit) Reset()         { *m = PhoneInit{} }
func (m *PhoneInit) String() string { return proto.CompactTextString(m) }
func (*PhoneInit) ProtoMessage()    {}
func (*PhoneInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{7}
}
func (m *PhoneInit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneInit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneInit.Merge(m, src)
}
func (m *PhoneInit) XXX_Size() int {
	return m.Size()
}
func (m *PhoneInit) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneInit.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneInit proto.InternalMessageInfo

func (m *PhoneInit) GetIceServers() []*IceServer {
	if m != nil {
		return m.IceServers
	}
	return nil
}

// IceServer
type IceServer struct {
	Urls       []string `protobuf:"bytes,1,rep,name=Urls" json:"Urls,omitempty"`
	Username   string   `protobuf:"bytes,2,opt,name=Username" json:"Username"`
	Credential string   `protobuf:"bytes,3,opt,name=Credential" json:"Credential"`
}

func (m *IceServer) Reset()         { *m = IceServer{} }
func (m *IceServer) String() string { return proto.CompactTextString(m) }
func (*IceServer) ProtoMessage()    {}
func (*IceServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{8}
}
func (m *IceServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IceServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IceServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IceServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IceServer.Merge(m, src)
}
func (m *IceServer) XXX_Size() int {
	return m.Size()
}
func (m *IceServer) XXX_DiscardUnknown() {
	xxx_messageInfo_IceServer.DiscardUnknown(m)
}

var xxx_messageInfo_IceServer proto.InternalMessageInfo

func (m *IceServer) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *IceServer) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *IceServer) GetCredential() string {
	if m != nil {
		return m.Credential
	}
	return ""
}

// PhoneRecipient
type PhoneRecipient struct {
	ConnectionId int32      `protobuf:"varint,1,req,name=ConnectionId" json:"ConnectionId"`
	Peer         *InputUser `protobuf:"bytes,2,req,name=Peer" json:"Peer,omitempty"`
	Initiator    bool       `protobuf:"varint,3,req,name=Initiator" json:"Initiator"`
	Admin        bool       `protobuf:"varint,4,req,name=Admin" json:"Admin"`
}

func (m *PhoneRecipient) Reset()         { *m = PhoneRecipient{} }
func (m *PhoneRecipient) String() string { return proto.CompactTextString(m) }
func (*PhoneRecipient) ProtoMessage()    {}
func (*PhoneRecipient) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{9}
}
func (m *PhoneRecipient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneRecipient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneRecipient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneRecipient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneRecipient.Merge(m, src)
}
func (m *PhoneRecipient) XXX_Size() int {
	return m.Size()
}
func (m *PhoneRecipient) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneRecipient.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneRecipient proto.InternalMessageInfo

func (m *PhoneRecipient) GetConnectionId() int32 {
	if m != nil {
		return m.ConnectionId
	}
	return 0
}

func (m *PhoneRecipient) GetPeer() *InputUser {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *PhoneRecipient) GetInitiator() bool {
	if m != nil {
		return m.Initiator
	}
	return false
}

func (m *PhoneRecipient) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

// PhoneRecipientSDP
type PhoneRecipientSDP struct {
	ConnectionId int32      `protobuf:"varint,1,req,name=ConnectionId" json:"ConnectionId"`
	Peer         *InputUser `protobuf:"bytes,2,req,name=Peer" json:"Peer,omitempty"`
	SDP          string     `protobuf:"bytes,3,req,name=SDP" json:"SDP"`
	Type         string     `protobuf:"bytes,4,req,name=Type" json:"Type"`
}

func (m *PhoneRecipientSDP) Reset()         { *m = PhoneRecipientSDP{} }
func (m *PhoneRecipientSDP) String() string { return proto.CompactTextString(m) }
func (*PhoneRecipientSDP) ProtoMessage()    {}
func (*PhoneRecipientSDP) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{10}
}
func (m *PhoneRecipientSDP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneRecipientSDP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneRecipientSDP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneRecipientSDP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneRecipientSDP.Merge(m, src)
}
func (m *PhoneRecipientSDP) XXX_Size() int {
	return m.Size()
}
func (m *PhoneRecipientSDP) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneRecipientSDP.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneRecipientSDP proto.InternalMessageInfo

func (m *PhoneRecipientSDP) GetConnectionId() int32 {
	if m != nil {
		return m.ConnectionId
	}
	return 0
}

func (m *PhoneRecipientSDP) GetPeer() *InputUser {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *PhoneRecipientSDP) GetSDP() string {
	if m != nil {
		return m.SDP
	}
	return ""
}

func (m *PhoneRecipientSDP) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// PhoneActionCallEmpty
type PhoneActionCallEmpty struct {
	Empty bool `protobuf:"varint,1,opt,name=Empty" json:"Empty"`
}

func (m *PhoneActionCallEmpty) Reset()         { *m = PhoneActionCallEmpty{} }
func (m *PhoneActionCallEmpty) String() string { return proto.CompactTextString(m) }
func (*PhoneActionCallEmpty) ProtoMessage()    {}
func (*PhoneActionCallEmpty) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{11}
}
func (m *PhoneActionCallEmpty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneActionCallEmpty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneActionCallEmpty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneActionCallEmpty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneActionCallEmpty.Merge(m, src)
}
func (m *PhoneActionCallEmpty) XXX_Size() int {
	return m.Size()
}
func (m *PhoneActionCallEmpty) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneActionCallEmpty.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneActionCallEmpty proto.InternalMessageInfo

func (m *PhoneActionCallEmpty) GetEmpty() bool {
	if m != nil {
		return m.Empty
	}
	return false
}

// PhoneActionAccepted
type PhoneActionAccepted struct {
	SDP  string `protobuf:"bytes,1,req,name=SDP" json:"SDP"`
	Type string `protobuf:"bytes,2,req,name=Type" json:"Type"`
}

func (m *PhoneActionAccepted) Reset()         { *m = PhoneActionAccepted{} }
func (m *PhoneActionAccepted) String() string { return proto.CompactTextString(m) }
func (*PhoneActionAccepted) ProtoMessage()    {}
func (*PhoneActionAccepted) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{12}
}
func (m *PhoneActionAccepted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneActionAccepted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneActionAccepted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneActionAccepted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneActionAccepted.Merge(m, src)
}
func (m *PhoneActionAccepted) XXX_Size() int {
	return m.Size()
}
func (m *PhoneActionAccepted) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneActionAccepted.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneActionAccepted proto.InternalMessageInfo

func (m *PhoneActionAccepted) GetSDP() string {
	if m != nil {
		return m.SDP
	}
	return ""
}

func (m *PhoneActionAccepted) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// PhoneActionRequested
type PhoneActionRequested struct {
	SDP        string            `protobuf:"bytes,1,req,name=SDP" json:"SDP"`
	Type       string            `protobuf:"bytes,2,req,name=Type" json:"Type"`
	Recipients []*PhoneRecipient `protobuf:"bytes,3,rep,name=Recipients" json:"Recipients,omitempty"`
}

func (m *PhoneActionRequested) Reset()         { *m = PhoneActionRequested{} }
func (m *PhoneActionRequested) String() string { return proto.CompactTextString(m) }
func (*PhoneActionRequested) ProtoMessage()    {}
func (*PhoneActionRequested) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{13}
}
func (m *PhoneActionRequested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneActionRequested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneActionRequested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneActionRequested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneActionRequested.Merge(m, src)
}
func (m *PhoneActionRequested) XXX_Size() int {
	return m.Size()
}
func (m *PhoneActionRequested) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneActionRequested.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneActionRequested proto.InternalMessageInfo

func (m *PhoneActionRequested) GetSDP() string {
	if m != nil {
		return m.SDP
	}
	return ""
}

func (m *PhoneActionRequested) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PhoneActionRequested) GetRecipients() []*PhoneRecipient {
	if m != nil {
		return m.Recipients
	}
	return nil
}

// PhoneActionCallWaiting
type PhoneActionCallWaiting struct {
	Empty bool `protobuf:"varint,1,opt,name=Empty" json:"Empty"`
}

func (m *PhoneActionCallWaiting) Reset()         { *m = PhoneActionCallWaiting{} }
func (m *PhoneActionCallWaiting) String() string { return proto.CompactTextString(m) }
func (*PhoneActionCallWaiting) ProtoMessage()    {}
func (*PhoneActionCallWaiting) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{14}
}
func (m *PhoneActionCallWaiting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneActionCallWaiting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneActionCallWaiting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneActionCallWaiting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneActionCallWaiting.Merge(m, src)
}
func (m *PhoneActionCallWaiting) XXX_Size() int {
	return m.Size()
}
func (m *PhoneActionCallWaiting) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneActionCallWaiting.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneActionCallWaiting proto.InternalMessageInfo

func (m *PhoneActionCallWaiting) GetEmpty() bool {
	if m != nil {
		return m.Empty
	}
	return false
}

// PhoneActionDiscarded
type PhoneActionDiscarded struct {
	Duration int32         `protobuf:"varint,1,req,name=Duration" json:"Duration"`
	Video    bool          `protobuf:"varint,2,req,name=Video" json:"Video"`
	Reason   DiscardReason `protobuf:"varint,3,req,name=Reason,enum=msg.DiscardReason" json:"Reason"`
}

func (m *PhoneActionDiscarded) Reset()         { *m = PhoneActionDiscarded{} }
func (m *PhoneActionDiscarded) String() string { return proto.CompactTextString(m) }
func (*PhoneActionDiscarded) ProtoMessage()    {}
func (*PhoneActionDiscarded) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{15}
}
func (m *PhoneActionDiscarded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneActionDiscarded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneActionDiscarded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneActionDiscarded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneActionDiscarded.Merge(m, src)
}
func (m *PhoneActionDiscarded) XXX_Size() int {
	return m.Size()
}
func (m *PhoneActionDiscarded) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneActionDiscarded.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneActionDiscarded proto.InternalMessageInfo

func (m *PhoneActionDiscarded) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *PhoneActionDiscarded) GetVideo() bool {
	if m != nil {
		return m.Video
	}
	return false
}

func (m *PhoneActionDiscarded) GetReason() DiscardReason {
	if m != nil {
		return m.Reason
	}
	return DiscardReasonUnknown
}

// PhoneActionIceExchange
type PhoneActionIceExchange struct {
	Candidate        string `protobuf:"bytes,1,req,name=Candidate" json:"Candidate"`
	SdpMLineIndex    int64  `protobuf:"varint,2,opt,name=SdpMLineIndex" json:"SdpMLineIndex"`
	SdpMid           string `protobuf:"bytes,3,opt,name=SdpMid" json:"SdpMid"`
	UsernameFragment string `protobuf:"bytes,4,opt,name=UsernameFragment" json:"UsernameFragment"`
}

func (m *PhoneActionIceExchange) Reset()         { *m = PhoneActionIceExchange{} }
func (m *PhoneActionIceExchange) String() string { return proto.CompactTextString(m) }
func (*PhoneActionIceExchange) ProtoMessage()    {}
func (*PhoneActionIceExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b8a723e6958ad9, []int{16}
}
func (m *PhoneActionIceExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneActionIceExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneActionIceExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneActionIceExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneActionIceExchange.Merge(m, src)
}
func (m *PhoneActionIceExchange) XXX_Size() int {
	return m.Size()
}
func (m *PhoneActionIceExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneActionIceExchange.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneActionIceExchange proto.InternalMessageInfo

func (m *PhoneActionIceExchange) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

func (m *PhoneActionIceExchange) GetSdpMLineIndex() int64 {
	if m != nil {
		return m.SdpMLineIndex
	}
	return 0
}

func (m *PhoneActionIceExchange) GetSdpMid() string {
	if m != nil {
		return m.SdpMid
	}
	return ""
}

func (m *PhoneActionIceExchange) GetUsernameFragment() string {
	if m != nil {
		return m.UsernameFragment
	}
	return ""
}

func init() {
	proto.RegisterEnum("msg.DiscardReason", DiscardReason_name, DiscardReason_value)
	proto.RegisterEnum("msg.PhoneCallAction", PhoneCallAction_name, PhoneCallAction_value)
	proto.RegisterType((*PhoneInitCall)(nil), "msg.PhoneInitCall")
	proto.RegisterType((*PhoneRequestCall)(nil), "msg.PhoneRequestCall")
	proto.RegisterType((*PhoneAcceptCall)(nil), "msg.PhoneAcceptCall")
	proto.RegisterType((*PhoneDiscardCall)(nil), "msg.PhoneDiscardCall")
	proto.RegisterType((*PhoneUpdateCall)(nil), "msg.PhoneUpdateCall")
	proto.RegisterType((*PhoneRateCall)(nil), "msg.PhoneRateCall")
	proto.RegisterType((*PhoneCall)(nil), "msg.PhoneCall")
	proto.RegisterType((*PhoneInit)(nil), "msg.PhoneInit")
	proto.RegisterType((*IceServer)(nil), "msg.IceServer")
	proto.RegisterType((*PhoneRecipient)(nil), "msg.PhoneRecipient")
	proto.RegisterType((*PhoneRecipientSDP)(nil), "msg.PhoneRecipientSDP")
	proto.RegisterType((*PhoneActionCallEmpty)(nil), "msg.PhoneActionCallEmpty")
	proto.RegisterType((*PhoneActionAccepted)(nil), "msg.PhoneActionAccepted")
	proto.RegisterType((*PhoneActionRequested)(nil), "msg.PhoneActionRequested")
	proto.RegisterType((*PhoneActionCallWaiting)(nil), "msg.PhoneActionCallWaiting")
	proto.RegisterType((*PhoneActionDiscarded)(nil), "msg.PhoneActionDiscarded")
	proto.RegisterType((*PhoneActionIceExchange)(nil), "msg.PhoneActionIceExchange")
}

func init() { proto.RegisterFile("chat.phone.proto", fileDescriptor_d8b8a723e6958ad9) }

var fileDescriptor_d8b8a723e6958ad9 = []byte{
	// 1000 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xcf, 0xd8, 0x49, 0x9a, 0xbc, 0x36, 0x65, 0x76, 0x5a, 0xb2, 0x56, 0x58, 0x19, 0xcb, 0xe2,
	0x10, 0x55, 0x22, 0x5b, 0xd2, 0x65, 0x61, 0x85, 0x38, 0xb4, 0xc9, 0x02, 0x91, 0x58, 0xa9, 0x72,
	0x29, 0x9c, 0xbd, 0xf6, 0xe0, 0x5a, 0xd4, 0x63, 0x63, 0x3b, 0xb0, 0x3d, 0x70, 0xe5, 0x82, 0x90,
	0x90, 0xb8, 0xf3, 0x19, 0x38, 0xf2, 0x11, 0xf6, 0xd8, 0x23, 0xe2, 0x00, 0x4b, 0xfb, 0x45, 0xd0,
	0x8c, 0xff, 0xc4, 0xd3, 0xd8, 0x68, 0xb5, 0xaa, 0xb4, 0x37, 0xcf, 0xef, 0x37, 0xef, 0xdf, 0xef,
	0xcd, 0x7b, 0x06, 0xec, 0x9c, 0xd9, 0xe9, 0x24, 0x3a, 0x0b, 0x19, 0x9d, 0x44, 0x71, 0x98, 0x86,
	0x44, 0x0d, 0x12, 0x6f, 0x84, 0x9d, 0x30, 0xa6, 0x93, 0xf4, 0x22, 0xa2, 0x49, 0x06, 0x8f, 0xde,
	0xf5, 0xfc, 0xf4, 0x6c, 0xf9, 0x74, 0xe2, 0x84, 0xc1, 0x7d, 0x2f, 0xf4, 0xc2, 0xfb, 0x02, 0x7e,
	0xba, 0xfc, 0x5a, 0x9c, 0xc4, 0x41, 0x7c, 0x65, 0xd7, 0xcd, 0x03, 0x18, 0x1c, 0x73, 0xa7, 0x0b,
	0xe6, 0xa7, 0x33, 0xfb, 0xfc, 0x9c, 0x98, 0xd0, 0x3e, 0xa6, 0x34, 0xd6, 0x90, 0xa1, 0x8c, 0x37,
	0xa7, 0xdb, 0x93, 0x20, 0xf1, 0x26, 0x0b, 0x16, 0x2d, 0x53, 0x8e, 0x5a, 0x82, 0x33, 0x7f, 0x47,
	0x80, 0x85, 0x95, 0x45, 0xbf, 0x5d, 0xd2, 0x24, 0x33, 0x34, 0xa0, 0x67, 0xd9, 0xcc, 0x0d, 0x83,
	0xc5, 0x5c, 0x18, 0xab, 0x47, 0xed, 0xe7, 0x7f, 0xbf, 0xdd, 0xb2, 0x4a, 0xb4, 0x74, 0xad, 0x34,
	0xbb, 0x26, 0x0f, 0x01, 0x2c, 0xea, 0xf8, 0x91, 0x4f, 0x59, 0x9a, 0x68, 0xaa, 0xa1, 0x8e, 0x37,
	0xa7, 0x43, 0x71, 0x33, 0x0f, 0x98, 0x73, 0x27, 0xf3, 0x63, 0xab, 0x72, 0x93, 0xe8, 0xd0, 0xe5,
	0x59, 0x2c, 0xe6, 0x5a, 0xdb, 0x40, 0x63, 0xf5, 0xa8, 0xcb, 0x63, 0xef, 0x23, 0x2b, 0x47, 0xcd,
	0x9f, 0x11, 0xbc, 0x21, 0x3c, 0x1c, 0x3a, 0x0e, 0x8d, 0x5e, 0xba, 0xd4, 0x8a, 0x5f, 0x45, 0xd4,
	0x74, 0xc3, 0xef, 0xab, 0xe6, 0x6b, 0xfe, 0x55, 0x48, 0x38, 0xf7, 0x13, 0xc7, 0x8e, 0xdd, 0x5b,
	0x4b, 0x68, 0x52, 0x93, 0x50, 0xc5, 0xd3, 0x69, 0x42, 0x63, 0x49, 0x38, 0x03, 0x7a, 0xf3, 0x65,
	0x6c, 0xa7, 0x7e, 0xc8, 0xb4, 0xb6, 0xa1, 0x8c, 0x3b, 0x45, 0xdb, 0x0a, 0x94, 0xec, 0x43, 0xd7,
	0xa2, 0x76, 0x12, 0x32, 0xad, 0x63, 0x28, 0xe3, 0xed, 0x29, 0x11, 0xde, 0xf2, 0xbc, 0x33, 0x26,
	0xb7, 0xc9, 0xef, 0x99, 0xff, 0x14, 0x62, 0x9f, 0x46, 0xae, 0x9d, 0xd2, 0xd7, 0x56, 0xdb, 0x14,
	0xba, 0x87, 0x8e, 0xa8, 0x6c, 0x43, 0x64, 0xbe, 0xbb, 0x6a, 0x0c, 0xf7, 0x98, 0x71, 0x45, 0xee,
	0xd9, 0x89, 0xbc, 0x03, 0x90, 0x7d, 0xcd, 0xed, 0xd4, 0xd6, 0x7a, 0x86, 0x32, 0xde, 0xca, 0x6f,
	0x54, 0x70, 0xfe, 0x9c, 0xb2, 0xb9, 0xb1, 0x6e, 0xb3, 0x3e, 0x0d, 0xda, 0xdc, 0x9f, 0xa6, 0x56,
	0xfa, 0x20, 0x10, 0xa2, 0xc3, 0xc6, 0x2c, 0x0c, 0x02, 0xca, 0x52, 0xf1, 0xbe, 0xfb, 0x39, 0x59,
	0x80, 0xe6, 0xc7, 0xd0, 0x2f, 0xcb, 0x22, 0x43, 0x50, 0xca, 0x19, 0x2c, 0x42, 0x28, 0x99, 0xfb,
	0x39, 0x77, 0xaf, 0x54, 0xa6, 0x53, 0x20, 0xe6, 0x47, 0xb9, 0x39, 0xdf, 0x02, 0x5c, 0xe5, 0x85,
	0x43, 0x4f, 0x68, 0xfc, 0x1d, 0x8d, 0x13, 0x0d, 0x55, 0x55, 0x2e, 0x60, 0xab, 0x72, 0xc3, 0xf4,
	0xa0, 0x5f, 0x9e, 0x08, 0x81, 0xf6, 0x69, 0x7c, 0x9e, 0x99, 0xf5, 0x2d, 0xf1, 0xcd, 0x9f, 0x18,
	0x6f, 0x0d, 0xb3, 0x03, 0x1e, 0x7b, 0x95, 0x7d, 0x89, 0x72, 0xd1, 0x67, 0x31, 0x75, 0x29, 0x4b,
	0x7d, 0xfb, 0x5c, 0x53, 0x2b, 0x77, 0x2a, 0xb8, 0xf9, 0x1b, 0x82, 0x6d, 0x79, 0xaa, 0xc8, 0x18,
	0xb6, 0x66, 0x21, 0x63, 0x54, 0x74, 0x66, 0xe1, 0x8a, 0xa2, 0x0b, 0xe5, 0x24, 0xa6, 0x79, 0xf9,
	0x88, 0x57, 0x93, 0xf5, 0xc7, 0x84, 0x3e, 0x57, 0xc0, 0xb7, 0xd3, 0x30, 0x16, 0x4d, 0xe8, 0xe5,
	0xae, 0x56, 0x30, 0x19, 0x41, 0xe7, 0xd0, 0x0d, 0xfc, 0x6c, 0x58, 0x0a, 0x3e, 0x83, 0xcc, 0x5f,
	0x11, 0xdc, 0x59, 0x1b, 0xfb, 0x5b, 0xce, 0x71, 0x08, 0xea, 0xc9, 0xfc, 0x58, 0x64, 0x57, 0x68,
	0xc4, 0x01, 0xde, 0xdc, 0x2f, 0x2e, 0x22, 0x2a, 0xd2, 0x2a, 0x08, 0x81, 0x98, 0x53, 0xd8, 0xcd,
	0x37, 0x1f, 0x0f, 0xc3, 0x5f, 0xc8, 0xe3, 0x20, 0x4a, 0x2f, 0x78, 0x25, 0xe2, 0x43, 0x43, 0x06,
	0x5a, 0x55, 0x22, 0x20, 0xf3, 0x53, 0xd8, 0xa9, 0xd8, 0x64, 0x3b, 0x93, 0xba, 0x45, 0x70, 0xd4,
	0x14, 0x5c, 0x59, 0x0b, 0xfe, 0x83, 0x14, 0x3c, 0xff, 0x5f, 0xbc, 0x8a, 0x27, 0x72, 0x50, 0x33,
	0xfc, 0x3b, 0x35, 0x9b, 0x56, 0x5a, 0xb3, 0x0f, 0x60, 0x78, 0xa3, 0xf6, 0xaf, 0x6c, 0x3f, 0xf5,
	0x99, 0xf7, 0xbf, 0xd5, 0xff, 0x88, 0xa4, 0xac, 0xf3, 0x55, 0x47, 0x5d, 0x69, 0x59, 0xa2, 0xda,
	0x65, 0x39, 0x82, 0xce, 0x97, 0xbe, 0x4b, 0x43, 0x51, 0x40, 0xe9, 0x56, 0x40, 0x95, 0x45, 0xaa,
	0xbe, 0xe4, 0x22, 0xfd, 0x03, 0x49, 0xf9, 0x2f, 0x1c, 0xfa, 0xf8, 0x99, 0x73, 0x66, 0x33, 0x8f,
	0xf2, 0xb7, 0x3a, 0xb3, 0x99, 0xeb, 0xf3, 0x05, 0x2b, 0xc9, 0xb8, 0x82, 0xc9, 0x1e, 0x0c, 0x4e,
	0xdc, 0xe8, 0xc9, 0xe7, 0x3e, 0x9f, 0x6c, 0x97, 0x3e, 0x13, 0xd3, 0x57, 0x4c, 0xbe, 0x4c, 0x91,
	0x7b, 0xd0, 0xe5, 0x80, 0xef, 0x4a, 0xe3, 0x97, 0x63, 0x64, 0x1f, 0x70, 0x31, 0xac, 0x9f, 0xc4,
	0xb6, 0xb7, 0xb6, 0x88, 0xd6, 0xd8, 0xbd, 0x9f, 0x54, 0x18, 0x48, 0xa5, 0x11, 0x0d, 0x76, 0x25,
	0xe0, 0x94, 0x7d, 0xc3, 0xc2, 0xef, 0x19, 0x6e, 0x91, 0xbb, 0xb0, 0x23, 0x31, 0x4f, 0xfc, 0x24,
	0xa1, 0x2e, 0x46, 0xe4, 0x4d, 0xb8, 0x23, 0xcb, 0xb3, 0x4c, 0x2e, 0xb0, 0xb2, 0x76, 0xff, 0x33,
	0x9b, 0x79, 0xcb, 0x08, 0xab, 0xe4, 0x2d, 0xb8, 0x2b, 0x11, 0xfc, 0x90, 0x0d, 0x18, 0x6e, 0x93,
	0x11, 0x0c, 0x25, 0xd2, 0xa2, 0x09, 0xdf, 0x59, 0xee, 0x7b, 0xb8, 0xd3, 0xc8, 0x4d, 0x71, 0xb7,
	0x91, 0x3b, 0xc0, 0x1b, 0x8d, 0xdc, 0x03, 0xdc, 0x6b, 0xe4, 0xde, 0xc7, 0xfd, 0x46, 0xee, 0x21,
	0x86, 0x46, 0xee, 0x03, 0xbc, 0xd9, 0xc8, 0x7d, 0x88, 0xb7, 0x1a, 0xb9, 0x47, 0x78, 0xb0, 0xf7,
	0x42, 0xc9, 0xff, 0xc8, 0xab, 0xff, 0x1e, 0x21, 0xf9, 0x36, 0x2d, 0x37, 0x02, 0x6e, 0x71, 0xc1,
	0x2b, 0xd7, 0xb2, 0xa9, 0xc7, 0x88, 0x0c, 0x81, 0x94, 0x70, 0x39, 0xc3, 0x58, 0xe1, 0x2d, 0x2d,
	0xf1, 0xca, 0x70, 0x61, 0x55, 0xb2, 0x28, 0xe7, 0x07, 0xb7, 0x25, 0x8b, 0xca, 0x73, 0xc6, 0x9d,
	0x1b, 0x31, 0x56, 0xf2, 0xd7, 0xe1, 0x5c, 0xfa, 0x3a, 0x9c, 0xcb, 0x5e, 0x87, 0x73, 0xc9, 0xeb,
	0x70, 0x2e, 0x77, 0x1d, 0xce, 0xa5, 0xae, 0xc3, 0xb9, 0xcc, 0x75, 0xf8, 0x23, 0x3c, 0x38, 0xba,
	0x77, 0xf9, 0xaf, 0xde, 0x7a, 0x7e, 0xa5, 0xa3, 0xcb, 0x2b, 0x1d, 0xbd, 0xb8, 0xd2, 0xd1, 0x2f,
	0xd7, 0x7a, 0xeb, 0xf2, 0x5a, 0x6f, 0xfd, 0x79, 0xad, 0xb7, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0xd2, 0x57, 0xc0, 0xae, 0xc0, 0x0b, 0x00, 0x00,
}

func (m *PhoneInitCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneInitCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneInitCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatPhone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhoneRequestCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneRequestCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneRequestCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatPhone(dAtA, i, uint64(m.CallID))
	i--
	dAtA[i] = 0x20
	if len(m.Recipients) > 0 {
		for iNdEx := len(m.Recipients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recipients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatPhone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatPhone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatPhone(dAtA, i, uint64(m.RandomID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PhoneAcceptCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneAcceptCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneAcceptCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipients) > 0 {
		for iNdEx := len(m.Recipients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recipients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatPhone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintChatPhone(dAtA, i, uint64(m.CallID))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatPhone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhoneDiscardCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneDiscardCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneDiscardCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatPhone(dAtA, i, uint64(m.Reason))
	i--
	dAtA[i] = 0x28
	i = encodeVarintChatPhone(dAtA, i, uint64(m.Duration))
	i--
	dAtA[i] = 0x20
	if len(m.Recipients) > 0 {
		for iNdEx := len(m.Recipients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recipients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatPhone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintChatPhone(dAtA, i, uint64(m.CallID))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatPhone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhoneUpdateCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneUpdateCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneUpdateCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionData != nil {
		i -= len(m.ActionData)
		copy(dAtA[i:], m.ActionData)
		i = encodeVarintChatPhone(dAtA, i, uint64(len(m.ActionData)))
		i--
		dAtA[i] = 0x42
	}
	i = encodeVarintChatPhone(dAtA, i, uint64(m.Action))
	i--
	dAtA[i] = 0x38
	if len(m.Recipients) > 0 {
		for iNdEx := len(m.Recipients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recipients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatPhone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintChatPhone(dAtA, i, uint64(m.CallID))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatPhone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhoneRateCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneRateCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneRateCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Comment)
	copy(dAtA[i:], m.Comment)
	i = encodeVarintChatPhone(dAtA, i, uint64(len(m.Comment)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintChatPhone(dAtA, i, uint64(m.Rate))
	i--
	dAtA[i] = 0x18
	i = encodeVarintChatPhone(dAtA, i, uint64(m.CallID))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatPhone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhoneCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatPhone(dAtA, i, uint64(m.Date))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatPhone(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PhoneInit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneInit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneInit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IceServers) > 0 {
		for iNdEx := len(m.IceServers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IceServers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatPhone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IceServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IceServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IceServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Credential)
	copy(dAtA[i:], m.Credential)
	i = encodeVarintChatPhone(dAtA, i, uint64(len(m.Credential)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintChatPhone(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0x12
	if len(m.Urls) > 0 {
		for iNdEx := len(m.Urls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Urls[iNdEx])
			copy(dAtA[i:], m.Urls[iNdEx])
			i = encodeVarintChatPhone(dAtA, i, uint64(len(m.Urls[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PhoneRecipient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneRecipient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneRecipient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Admin {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i--
	if m.Initiator {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatPhone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatPhone(dAtA, i, uint64(m.ConnectionId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PhoneRecipientSDP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneRecipientSDP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneRecipientSDP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintChatPhone(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x22
	i -= len(m.SDP)
	copy(dAtA[i:], m.SDP)
	i = encodeVarintChatPhone(dAtA, i, uint64(len(m.SDP)))
	i--
	dAtA[i] = 0x1a
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatPhone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatPhone(dAtA, i, uint64(m.ConnectionId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PhoneActionCallEmpty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneActionCallEmpty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneActionCallEmpty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Empty {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PhoneActionAccepted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneActionAccepted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneActionAccepted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintChatPhone(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x12
	i -= len(m.SDP)
	copy(dAtA[i:], m.SDP)
	i = encodeVarintChatPhone(dAtA, i, uint64(len(m.SDP)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PhoneActionRequested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneActionRequested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneActionRequested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipients) > 0 {
		for iNdEx := len(m.Recipients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recipients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatPhone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintChatPhone(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x12
	i -= len(m.SDP)
	copy(dAtA[i:], m.SDP)
	i = encodeVarintChatPhone(dAtA, i, uint64(len(m.SDP)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PhoneActionCallWaiting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneActionCallWaiting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneActionCallWaiting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Empty {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PhoneActionDiscarded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneActionDiscarded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneActionDiscarded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatPhone(dAtA, i, uint64(m.Reason))
	i--
	dAtA[i] = 0x18
	i--
	if m.Video {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatPhone(dAtA, i, uint64(m.Duration))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PhoneActionIceExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneActionIceExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneActionIceExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.UsernameFragment)
	copy(dAtA[i:], m.UsernameFragment)
	i = encodeVarintChatPhone(dAtA, i, uint64(len(m.UsernameFragment)))
	i--
	dAtA[i] = 0x22
	i -= len(m.SdpMid)
	copy(dAtA[i:], m.SdpMid)
	i = encodeVarintChatPhone(dAtA, i, uint64(len(m.SdpMid)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintChatPhone(dAtA, i, uint64(m.SdpMLineIndex))
	i--
	dAtA[i] = 0x10
	i -= len(m.Candidate)
	copy(dAtA[i:], m.Candidate)
	i = encodeVarintChatPhone(dAtA, i, uint64(len(m.Candidate)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintChatPhone(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatPhone(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PhoneInitCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatPhone(uint64(l))
	}
	return n
}

func (m *PhoneRequestCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatPhone(uint64(m.RandomID))
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatPhone(uint64(l))
	}
	if len(m.Recipients) > 0 {
		for _, e := range m.Recipients {
			l = e.Size()
			n += 1 + l + sovChatPhone(uint64(l))
		}
	}
	n += 1 + sovChatPhone(uint64(m.CallID))
	return n
}

func (m *PhoneAcceptCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatPhone(uint64(l))
	}
	n += 1 + sovChatPhone(uint64(m.CallID))
	if len(m.Recipients) > 0 {
		for _, e := range m.Recipients {
			l = e.Size()
			n += 1 + l + sovChatPhone(uint64(l))
		}
	}
	return n
}

func (m *PhoneDiscardCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatPhone(uint64(l))
	}
	n += 1 + sovChatPhone(uint64(m.CallID))
	if len(m.Recipients) > 0 {
		for _, e := range m.Recipients {
			l = e.Size()
			n += 1 + l + sovChatPhone(uint64(l))
		}
	}
	n += 1 + sovChatPhone(uint64(m.Duration))
	n += 1 + sovChatPhone(uint64(m.Reason))
	return n
}

func (m *PhoneUpdateCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatPhone(uint64(l))
	}
	n += 1 + sovChatPhone(uint64(m.CallID))
	if len(m.Recipients) > 0 {
		for _, e := range m.Recipients {
			l = e.Size()
			n += 1 + l + sovChatPhone(uint64(l))
		}
	}
	n += 1 + sovChatPhone(uint64(m.Action))
	if m.ActionData != nil {
		l = len(m.ActionData)
		n += 1 + l + sovChatPhone(uint64(l))
	}
	return n
}

func (m *PhoneRateCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatPhone(uint64(l))
	}
	n += 1 + sovChatPhone(uint64(m.CallID))
	n += 1 + sovChatPhone(uint64(m.Rate))
	l = len(m.Comment)
	n += 1 + l + sovChatPhone(uint64(l))
	return n
}

func (m *PhoneCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatPhone(uint64(m.ID))
	n += 1 + sovChatPhone(uint64(m.Date))
	return n
}

func (m *PhoneInit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IceServers) > 0 {
		for _, e := range m.IceServers {
			l = e.Size()
			n += 1 + l + sovChatPhone(uint64(l))
		}
	}
	return n
}

func (m *IceServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Urls) > 0 {
		for _, s := range m.Urls {
			l = len(s)
			n += 1 + l + sovChatPhone(uint64(l))
		}
	}
	l = len(m.Username)
	n += 1 + l + sovChatPhone(uint64(l))
	l = len(m.Credential)
	n += 1 + l + sovChatPhone(uint64(l))
	return n
}

func (m *PhoneRecipient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatPhone(uint64(m.ConnectionId))
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatPhone(uint64(l))
	}
	n += 2
	n += 2
	return n
}

func (m *PhoneRecipientSDP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatPhone(uint64(m.ConnectionId))
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatPhone(uint64(l))
	}
	l = len(m.SDP)
	n += 1 + l + sovChatPhone(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovChatPhone(uint64(l))
	return n
}

func (m *PhoneActionCallEmpty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *PhoneActionAccepted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SDP)
	n += 1 + l + sovChatPhone(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovChatPhone(uint64(l))
	return n
}

func (m *PhoneActionRequested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SDP)
	n += 1 + l + sovChatPhone(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovChatPhone(uint64(l))
	if len(m.Recipients) > 0 {
		for _, e := range m.Recipients {
			l = e.Size()
			n += 1 + l + sovChatPhone(uint64(l))
		}
	}
	return n
}

func (m *PhoneActionCallWaiting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *PhoneActionDiscarded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatPhone(uint64(m.Duration))
	n += 2
	n += 1 + sovChatPhone(uint64(m.Reason))
	return n
}

func (m *PhoneActionIceExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Candidate)
	n += 1 + l + sovChatPhone(uint64(l))
	n += 1 + sovChatPhone(uint64(m.SdpMLineIndex))
	l = len(m.SdpMid)
	n += 1 + l + sovChatPhone(uint64(l))
	l = len(m.UsernameFragment)
	n += 1 + l + sovChatPhone(uint64(l))
	return n
}

func sovChatPhone(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatPhone(x uint64) (n int) {
	return sovChatPhone(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PhoneInitCall) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneInitCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneInitCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneRequestCall) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneRequestCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneRequestCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipients = append(m.Recipients, &PhoneRecipientSDP{})
			if err := m.Recipients[len(m.Recipients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallID", wireType)
			}
			m.CallID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RandomID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneAcceptCall) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneAcceptCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneAcceptCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallID", wireType)
			}
			m.CallID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipients = append(m.Recipients, &PhoneRecipientSDP{})
			if err := m.Recipients[len(m.Recipients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CallID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneDiscardCall) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneDiscardCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneDiscardCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallID", wireType)
			}
			m.CallID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipients = append(m.Recipients, &InputUser{})
			if err := m.Recipients[len(m.Recipients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= DiscardReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CallID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Duration")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Reason")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneUpdateCall) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneUpdateCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneUpdateCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallID", wireType)
			}
			m.CallID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipients = append(m.Recipients, &InputUser{})
			if err := m.Recipients[len(m.Recipients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= PhoneCallAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionData = append(m.ActionData[:0], dAtA[iNdEx:postIndex]...)
			if m.ActionData == nil {
				m.ActionData = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CallID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Action")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ActionData")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneRateCall) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneRateCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneRateCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallID", wireType)
			}
			m.CallID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CallID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Rate")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneCall) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Date")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneInit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneInit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneInit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IceServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IceServers = append(m.IceServers, &IceServer{})
			if err := m.IceServers[len(m.IceServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IceServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IceServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IceServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urls = append(m.Urls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credential = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneRecipient) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneRecipient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneRecipient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			m.ConnectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputUser{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initiator = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ConnectionId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Initiator")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Admin")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneRecipientSDP) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneRecipientSDP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneRecipientSDP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			m.ConnectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputUser{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SDP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SDP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ConnectionId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SDP")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneActionCallEmpty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneActionCallEmpty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneActionCallEmpty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Empty = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneActionAccepted) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneActionAccepted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneActionAccepted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SDP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SDP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SDP")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneActionRequested) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneActionRequested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneActionRequested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SDP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SDP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipients = append(m.Recipients, &PhoneRecipient{})
			if err := m.Recipients[len(m.Recipients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SDP")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneActionCallWaiting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneActionCallWaiting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneActionCallWaiting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Empty = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneActionDiscarded) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneActionDiscarded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneActionDiscarded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Video = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= DiscardReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Duration")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Video")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Reason")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneActionIceExchange) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneActionIceExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneActionIceExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdpMLineIndex", wireType)
			}
			m.SdpMLineIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SdpMLineIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdpMid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SdpMid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameFragment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsernameFragment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Candidate")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatPhone(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatPhone
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatPhone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatPhone
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatPhone
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatPhone
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatPhone        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatPhone          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatPhone = fmt.Errorf("proto: unexpected end of group")
)
