syntax = "proto2";
package msg;
import "chat.core.types.proto";

// AccountSetNotifySettings
// @Function
// @Return: Bool
message AccountSetNotifySettings {
    required InputPeer Peer = 1;
    required PeerNotifySettings Settings = 2;
}

// AccountGetNotifySettings
// @Function
// @Return: NotifySettings
message AccountGetNotifySettings {
    required InputPeer Peer = 1;
}

// AccountRegisterDevice
// @Function
// @Return: Bool
message AccountRegisterDevice {
    required string Token = 2;
    required string DeviceModel = 3;
    required string SystemVersion = 4;
    required string AppVersion = 5;
    required string LangCode = 6;
    required PushTokenProvider TokenType = 7;
    required string ClientID = 8;
}

// AccountUnregisterDevice
// @Function
// @Return: Bool
message AccountUnregisterDevice {
    required int32 TokenType = 1;
    required string Token = 2;
}

// AccountUpdateProfile
// @Function
// @Return: UserFull
message AccountUpdateProfile {
    required string FirstName = 1;
    required string LastName = 2;
    optional string Bio = 3;
}

// AccountCheckUsername
// @Function
// @Return: Bool
message AccountCheckUsername {
    required string Username = 1;
}

// AccountUpdateUsername
// @Function
// @Return: UserFull
message AccountUpdateUsername {
    required string Username = 1;
}

// AccountUploadPhoto
// @Function
// @Return: Bool / UserPhoto
message AccountUploadPhoto {
    required InputFile File = 1;
    optional bool ReturnObject = 2;
}

// AccountUpdatePhoto
// @Function
// @Return: Bool
message AccountUpdatePhoto {
    required int64 PhotoID = 1 [jstype = JS_STRING];
}

// AccountRemotePhoto
// @Function
// @Return: Bool
message AccountRemovePhoto {
    optional int64 PhotoID = 1 [jstype = JS_STRING];
}

// AccountSendChangePhoneCode
// @Function
// @Return: User
message AccountSendChangePhoneCode {
    required string Phone = 1;
}

// AccountChangePhone
// @Function
// @Return: User
message AccountChangePhone {
    required string Phone = 1;
    required string PhoneCodeHash = 2;
    required string PhoneCode = 3;
    optional InputPassword Password = 4;
}

// AccountSetPrivacy
// @Function
// @Return: AccountPrivacyRules
message AccountSetPrivacy {
    repeated PrivacyRule ChatInvite = 1;
    repeated PrivacyRule LastSeen = 2;
    repeated PrivacyRule PhoneNumber = 3;
    repeated PrivacyRule ProfilePhoto = 4;
    repeated PrivacyRule ForwardedMessage = 5;
    repeated PrivacyRule Call = 6;
}

// AccountGetPrivacy
// @Function
// @Return: AccountPrivacyRules
message AccountGetPrivacy {
    required PrivacyKey Key = 1;
}

// AccountGetAuthorizations
// @Function
// @Returns: Authorizations
message AccountGetAuthorizations {
}

// AccountResetAuthorization
// @Function
// @Returns: Bool
message AccountResetAuthorization {
    required int64 AuthID = 1 [jstype = JS_STRING];
}

// AccountUpdateStatus
// @Function
// @Returns: Bool
message AccountUpdateStatus {
    required bool Online = 1;
}

// AccountSetLang
// @Function
// @Returns: Bool
message AccountSetLang {
    required string LangCode = 1;
}

// AccountGetPassword
// @Function
// @Returns: AccountPassword
// Obtain configuration for two-factor authorization with password
message AccountGetPassword {
}

// AccountGetPasswordSettings
// @Function
// @Returns: AccountPasswordSettings
// Get private info associated to the password info (recovery email & so on)
message AccountGetPasswordSettings {
    optional InputPassword Password = 1;
}

// AccountUpdatePassword
// @Function
// @Returns: Bool
message AccountUpdatePasswordSettings {
    optional InputPassword Password = 1;
    optional bytes PasswordHash = 2;
    required int64 Algorithm = 3;
    required bytes AlgorithmData = 4;
    optional bytes Hint = 6;
}


// AccountPasswordSettings
// Private info associated to the password info (recovery email and so on)
message AccountPasswordSettings {
    required bytes Hint = 2;
}

// AccountPassword
// Configuration for two-factor authorization
message AccountPassword {
    required bool HasPassword = 1;
    optional bytes Hint = 2;
    required int64 Algorithm = 3;
    required bytes AlgorithmData = 4;
    optional bytes SrpB = 5;
    optional bytes RandomData = 6;
    optional int64 SrpID = 7;
}

// AccountAuthorizations
message AccountAuthorizations {
    repeated AccountAuthorization Authorizations = 1;
}

// AccountAuthorization
message AccountAuthorization {
    required int64 AuthID = 100 [jstype = JS_STRING];
    required string Model = 1;
    required string AppVersion = 2;
    required string SystemVersion = 3;
    required string LangCode = 4;
    required int64 CreatedAt = 5;
    required int64 ActiveAt = 6;
    required string ClientIP = 7;
    required int64 LastAccess = 8;
}

// AccountPrivacyRules
message AccountPrivacyRules {
    repeated PrivacyRule Rules = 1;
}

