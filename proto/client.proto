syntax = "proto2";
package msg;
import "core.types.proto";
import "chat.messages.medias.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_enum_prefix_all) = false;

// ClientSendMessageMedia
// @Function
message ClientSendMessageMedia {
    required InputPeer Peer = 1;
    required InputMediaType MediaType = 2;
    optional string Caption = 3;
    optional string FileName = 4;
    optional string FilePath = 5;
    optional string ThumbFilePath = 6;
    optional string FileMIME = 7;
    optional string ThumbMIME = 8;
    optional int64 ReplyTo = 9;
    optional bool ClearDraft = 10;
    repeated DocumentAttribute Attributes = 11;
    optional string FileUploadID = 12;
    optional string ThumbUploadID = 13;
    optional int64 FileID = 14;
    optional int64 ThumbID = 15;
    optional int32 FileTotalParts = 16;
    repeated MessageEntity Entities = 17;
    optional bytes TinyThumb = 18;
}

// ClientGlobalSearch
// @Function
// @Return: ClientSearchResult
message ClientGlobalSearch {
    optional string Text = 1;
    repeated int32 LabelIDs = 2;
    optional InputPeer Peer = 3;
    required int32 Limit = 4;
    optional int64 SenderID = 5;
}

// ClientContactSearch
// @Function
// @Return: ClientSearchResult
message ClientContactSearch {
    required string Text = 1;
}

// ClientGetCachedMedia
// @Function
// @Return: ClientCachedMedia
message ClientGetCachedMedia {
}

// ClientClearCachedMedia
// @Function
// @Return: Bool
message ClientClearCachedMedia {
    optional InputPeer Peer = 1;
    repeated ClientMediaType MediaTypes = 2;
}

// ClientGetLastBotKeyboard
// @Return: UserMessage
message ClientGetLastBotKeyboard {
    required InputPeer peer = 1;
}

// ClientGetMediaHistory
// @Function
// @Return: MessagesMany
message ClientGetMediaHistory {
    required ClientMediaType MediaType = 1;
}

// ClientGetRecentSearch
// @Function
// @Return: RecentSearchMany
message ClientGetRecentSearch {
    required int32 Limit = 1;
}

// ClientPutRecentSearch
// @Function
// @Return: Bool
message ClientPutRecentSearch {
    required InputPeer Peer = 1;
}

// ClientPutRecentSearch
// @Function
// @Return: Bool
message ClientRemoveRecentSearch {
    required InputPeer Peer = 1;
}

// ClientRemoveAllRecentSearches
// @Function
// @Return: Bool
message ClientRemoveAllRecentSearches {
    required bool extra = 1;
}

// ClientGetSavedGifs
// @Function
// @Return: ClientFilesMany
message ClientGetSavedGifs {
}

// ClientGetTeamCounters
// @Function
// @Return: ClientTeamCounters
message ClientGetTeamCounters {
    required InputTeam Team = 1;
    required bool withMutes = 2;
}

// ClientPendingMessage
message ClientPendingMessage {
    required int64 ID = 1;
    required int64 RequestID = 2;
    required int64 PeerID = 3;
    required int32 PeerType = 4;
    required fixed64 AccessHash = 5;
    required int64 CreatedOn = 6;
    required int64 ReplyTo = 7;
    required string Body = 8;
    required int64 SenderID = 9;
    repeated MessageEntity Entities = 10;
    optional InputMediaType MediaType = 11;
    optional bytes Media = 12;
    optional bool ClearDraft = 13;
    optional string FileUploadID = 14;
    optional string ThumbUploadID = 15;
    optional int64 FileID = 16;
    optional int64 ThumbID = 17;
    optional bytes Sha256 = 18;
    optional FileLocation ServerFile = 19;
    optional int64 TeamID = 20;
    optional uint64 TeamAccessHash = 21;
    optional bytes TinyThumb = 22;
}

// ClientSearchResult
message ClientSearchResult {
    repeated UserMessage Messages = 1;
    repeated User Users = 2;
    repeated Group Groups = 3;
    repeated User MatchedUsers = 4;
    repeated Group MatchedGroups = 5;
}

// ClientFileType
enum ClientFileType {
    Unknown = 0;
    Message = 1;
    AccountProfilePhoto = 2;
    GroupProfilePhoto = 3;
    Sticker = 4;
    Thumbnail = 5;
    Wallpaper = 6;
    Gif = 7;
}

// ClientFilesMany
message ClientFilesMany {
    repeated ClientFile Gifs = 1;
    required int32 Total = 2;
}

// ClientFile
message ClientFile {
    required int32 ClusterID = 1;
    required int64 FileID = 2;
    required uint64 AccessHash = 3;
    required ClientFileType Type = 4;
    optional string MimeType = 5;
    optional int64 UserID = 6;
    optional int64 GroupID = 7;
    required int64 FileSize = 8;
    optional int64 MessageID = 9;
    optional int64 PeerID = 10;
    optional int32 PeerType = 11;
    optional int32 Version = 12;
    optional string Extension = 13;
    optional string MD5Checksum = 14;
    optional int64 WallpaperID = 15;
    repeated DocumentAttribute Attributes = 16;
}

// ClientFileStatus
message ClientFileStatus {
    required int32 Status = 1;
    required int64 Progress = 2;
    required string FilePath = 3;
}

// CachedMediaInfo
message ClientCachedMediaInfo {
    repeated ClientPeerMediaInfo MediaInfo = 1;
}

// PeerMediaInfo
message ClientPeerMediaInfo {
    required int64 PeerID = 1;
    required PeerType PeerType = 2;
    repeated ClientMediaSize Media = 3;
}

// ClientMediaSize
message ClientMediaSize {
    required ClientMediaType MediaType = 1;
    required int64 TotalSize = 2;
}

// ClientMediaType
enum ClientMediaType {
    ClientMediaNone = 0;
    ClientMediaFile = 1;
    ClientMediaMedia = 2;
    ClientMediaVoice = 3;
    ClientMediaAudio = 4;
    ClientMediaLink = 5;
    ClientMediaGif = 6;
}

// ClientRecentSearch
message ClientRecentSearch {
    required Peer Peer = 1;
    required int32 Date = 2;
}

// RecentSearchMany
message ClientRecentSearchMany {
    repeated ClientRecentSearch RecentSearches = 1;
    repeated User Users = 2;
    repeated Group Groups = 3;
}

// ClientTeamCounters
message ClientTeamCounters {
    required int64 UnreadCount = 1;
    required int64 MentionCount = 2;
}