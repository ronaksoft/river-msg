syntax = "proto2";

package msg;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "chat.core.types.proto";
import "chat.api.messages.proto";
import "chat.core.message.medias.proto";

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;

service BotProxy {
    rpc ServeBotRequest (stream MessageEnvelope) returns (stream MessageEnvelope) {
    }
}

// BotStart
// @Function (Client)
// @Return: Bool
message BotStart {
    required InputPeer Bot = 1;
    required int64 RandomID = 2;
    required string StartParam = 3;
}

// BotRecall
// @Function (BotOnly)
// @Return: BotRecalled
message BotRecall {
    required int32 Version = 1;
}

// BotSetInfo
// @Function (BotOnly)
// @Return: Bool
message BotSetInfo {
    required int64 BotID = 1;
    required int64 RandomID = 2;
    required int64 Owner = 3;
    repeated BotCommands BotCommands = 4;
    required string Description = 5;
}

// BotGet
// @Function (BotOnly)
// @Return: BotInfo
message BotGet {
    required int64 UserID = 1 [jstype = JS_STRING];
    optional int32 Limit = 2;
}

// BotSendMessage
// @Function (BotOnly)
// @Return: UserMessage
message BotSendMessage {
    required int64 RandomID = 1;
    required InputPeer Peer = 2;
    required string Body = 5;
    optional int64 ReplyTo = 6;
    optional bool ClearDraft = 7;
    repeated MessageEntity Entities = 8;
    optional int64 ReplyMarkup = 9;
    optional bytes ReplyMarkupData = 10;
}

// BotEditMessage
// @Function (BotOnly)
// @Return: UserMessage
message BotEditMessage {
    required int64 RandomID = 1;
    required InputPeer Peer = 2;
    required string Body = 3;
    required int64 MessageID = 4;
    repeated MessageEntity Entities = 5;
    optional int64 ReplyMarkup = 6;
    optional bytes ReplyMarkupData = 7;
}

// BotSendMedia
// @Function (BotOnly)
// @Return: UserMessage
message BotSendMedia {
    required int64 RandomID = 1;
    required InputPeer Peer = 2;
    required InputMediaType MediaType = 3;
    required bytes MediaData = 4;
    optional int64 ReplyTo = 5;
}

// BotSaveFilePart
// @Function (BotOnly)
// @Returns: Bool
message BotSaveFilePart {
    required int64 FileID = 1 [jstype = JS_STRING];
    required int32 PartID = 2;
    required int32 TotalParts = 3;
    required bytes Bytes = 4;
}

// BotUpdateProfile
// @Function (BotOnly)
// @Return: Bool
message BotUpdateProfile {
    required int64 BotID = 1;
    required string Name = 2;
    optional string Bio = 4;
}

// BotUpdatePhoto
// @Function (BotOnly)
// @Returns: Bool
message BotUpdatePhoto {
    optional InputFileLocation File = 1;
    required int64 BotID = 2;
}

// BotRevokeToken
// @Function (BotOnly)
// @Returns: BotToken
message BotRevokeToken {
    required int64 BotID = 1;
    required bool GetNew = 2;
}

// BotDeleteMessage
// @Function (BotOnly)
// @Returns: Bool
message BotDeleteMessage {
    required InputPeer Peer = 1;
    repeated int64 MessageIDs = 2;
}

// BotSetCallbackAnswer
// @Function (BotOnly)
// @Returns: Bool
message BotSetCallbackAnswer {
    required int64 QueryID = 1;
    optional string Url = 2; // URL to open
    optional string Message = 3; // Alert to show
    required int32 CacheTime = 4; // For how long should this answer be cached (in seconds) [Default is  300]
}

// BotGetCallbackAnswer
// @Function (Client)
// @Returns: BotCallbackAnswer
message BotGetCallbackAnswer {
    required InputPeer Peer = 1;
    optional int64 MessageID = 2; // ID of the Message if button is the inline keyboard
    required bytes Data = 3; // Callback data
}

// BotGetInlineResults
// @Function (Client)
// @Returns: BotResults
message BotGetInlineResults {
    required InputUser Bot = 1;
    required InputPeer Peer = 2;
    required string Query = 3;
    required string Offset = 4;
}

// BotSetInlineResults
// @Function (BotOnly)
// @Returns:
message BotSetInlineResults {
    required bool Gallery = 1;
    // Set this flag if results may be cached on the server side only for the user that sent the query.
    // By default, results may be returned to any user who sends the same query
    required bool Private = 2;
    required int64 CacheTime = 3;
    // Pass the offset that a client should send in the next query with the same text to receive more results.
    // Pass an empty string if there are no more results or if you don‘t
    // support pagination. Offset length can’t exceed 64 bytes.
    optional string NextOffset = 4;
}

// BotSendInlineResults
// @Function (Client)
// @Returns:
message BotSendInlineResults {
    required int64 RandomID = 1;
    required int64 QueryID = 2;
    required string ResultID = 3;
    required bool ClearDraft = 4;
    required InputPeer Peer = 5;
    required int64 ReplyTo = 6;
    optional bool Silent = 7;
}

// BotResults
message BotResults {
    required bool Gallery = 1;
    required int64 QueryID = 2;
    optional string NextOffset = 3;
    optional BotInlineSwitchPM SwitchPM = 4;
    repeated BotInlineResult Results = 5;
}

// BotInlineSwitchPM
message BotInlineSwitchPM {
    // Text for the button that switches the user to a private chat with the bot
    // and sends the bot a start message with the parameter start_parameter (can be empty)
    required string Text = 1;
    // The parameter for the /start parameter
    required string StartParam = 2;
}

// BotInlineResult
message BotInlineResult {
    required string ID = 1;
    required string Type = 2;
    optional string Title = 3;
    optional string Description = 4;
    optional string Url = 5;
    optional MediaDocument Doc = 6;
}

// BotToken
message BotToken {
    required bytes Token = 1;
}

// BotRecalled
message BotRecalled {
    required int64 ID = 1;
    required string Username = 2;
}

// BotCallbackAnswer
message BotCallbackAnswer {
    optional string Url = 1; // URL to open
    optional string Message = 2; // Alert to show
    required int32 CacheTime = 3; // For how long should this answer be cached (in seconds)
}

// BotsMany
message BotsMany {
    repeated BotInfo Bots = 1;
}

// BotGetCommands
// @Function
// @Return: BotCommandsMany
message BotGetCommands {
    required InputPeer Peer = 1;
}

// BotCommandsMany
message BotCommandsMany {
    repeated BotCommands Commands = 1;
}
