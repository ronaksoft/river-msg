syntax = "proto3";
package msg;
import "core.types.proto";
option go_package = './;msg';

// ContactsImport
// @Function
// @Return: ContactsImported
message ContactsImport {
    repeated PhoneContact Contacts = 1;
    bool Replace = 2;
}

// ContactsAdd
// @Function
// @Return: Bool
message ContactsAdd {
    InputUser User = 1;
    string FirstName = 2;
    string LastName = 3;
    string Phone = 4;
}

// ContactsGet
// @Function
// @Return: ContactsMany
message ContactsGet {
    uint32 Crc32Hash = 2;
}

// ContactsDelete
// @Function
// @Return: Bool
message ContactsDelete {
    repeated int64 UserIDs = 1 [jstype = JS_STRING];
}

// ContactsDeleteAll
// @Function: ContactsDeleteAll
// @Return: Bool
message ContactsDeleteAll {

}

// ContactsBlock
// @Function
// @Return: Bool
message ContactsBlock {
    InputUser User = 1;
}

// ContactsUnblock
// @Function
// @Return: Bool
message ContactsUnblock {
    InputUser User = 2;
}

// ContactsGetBlocked
// @Function
// @Returns: BlockedContacts
message ContactsGetBlocked {
    int32 Offset = 1;
    int32 Limit = 2;
}

// ContactsSearch
// @Function
// @Returns: UsersMany
message ContactsSearch {
    string Q = 1;
}

// ContactsGetTopPeers
// @Function
// @Returns: ContactsTopPeers
message ContactsGetTopPeers {
    int32 Offset = 1;
    int32 Limit = 2;
    TopPeerCategory Category = 3;
}

// ContactsResetTopPeer
// @Function
// @Returns: Bool
message ContactsResetTopPeer {
    TopPeerCategory Category = 1;
    InputPeer Peer = 2;
}

// ContactsTopPeer
message ContactsTopPeers {
    TopPeerCategory Category = 1;
    int32 Count = 2;
    repeated TopPeer Peers = 3;
    repeated User Users = 4;
    repeated Group Groups = 5;
}

// TopPeerCategory
enum TopPeerCategory {
    Users = 0;
    Groups = 1;
    Forwards = 2;
    BotsMessage = 3;
    BotsInline = 4;
}

// TopPeer
message TopPeer {
    int64 TeamID = 100 [jstype = JS_STRING];
    Peer Peer = 1;
    float Rate = 2;
    int64 LastUpdate = 3;
}

// BlockedContactsMany
message BlockedContactsMany {
    repeated BlockedContact Contacts = 1;
    repeated User Users = 2;
    int32 Total = 3;
}

// BlockedContact
message BlockedContact {
    int64 UserID = 1;
    int64 Date = 2;
}

// ContactsImported
message ContactsImported {
    repeated ContactUser ContactUsers = 1;
    repeated User Users = 2;
    bool Empty = 3;
}

// ContactsMany
message ContactsMany {
    repeated PhoneContact Contacts = 1;
    repeated ContactUser ContactUsers = 2;
    bool Modified = 3;
    repeated User Users = 4;
    bool Empty = 5;
    uint32 Hash = 6;
}
