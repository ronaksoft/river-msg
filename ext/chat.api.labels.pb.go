// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.api.labels.proto

package msg

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LabelsSet
// @Function
// @Returns: Bool
type LabelsSet struct {
	LabelID int32  `protobuf:"varint,1,req,name=LabelID" json:"LabelID"`
	Name    string `protobuf:"bytes,2,req,name=Name" json:"Name"`
	Colour  string `protobuf:"bytes,3,req,name=Colour" json:"Colour"`
}

func (m *LabelsSet) Reset()         { *m = LabelsSet{} }
func (m *LabelsSet) String() string { return proto.CompactTextString(m) }
func (*LabelsSet) ProtoMessage()    {}
func (*LabelsSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_19cf62577bbff668, []int{0}
}
func (m *LabelsSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsSet.Merge(m, src)
}
func (m *LabelsSet) XXX_Size() int {
	return m.Size()
}
func (m *LabelsSet) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsSet.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsSet proto.InternalMessageInfo

func (m *LabelsSet) GetLabelID() int32 {
	if m != nil {
		return m.LabelID
	}
	return 0
}

func (m *LabelsSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LabelsSet) GetColour() string {
	if m != nil {
		return m.Colour
	}
	return ""
}

// LabelsDelete
// @Function
// @Returns: Bool
type LabelsDelete struct {
	LabelIDs []int32 `protobuf:"varint,1,rep,name=LabelIDs" json:"LabelIDs,omitempty"`
}

func (m *LabelsDelete) Reset()         { *m = LabelsDelete{} }
func (m *LabelsDelete) String() string { return proto.CompactTextString(m) }
func (*LabelsDelete) ProtoMessage()    {}
func (*LabelsDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_19cf62577bbff668, []int{1}
}
func (m *LabelsDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsDelete.Merge(m, src)
}
func (m *LabelsDelete) XXX_Size() int {
	return m.Size()
}
func (m *LabelsDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsDelete.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsDelete proto.InternalMessageInfo

func (m *LabelsDelete) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

// LabelsGet
// @Function
// @Returns: LabelsMany
type LabelsGet struct {
}

func (m *LabelsGet) Reset()         { *m = LabelsGet{} }
func (m *LabelsGet) String() string { return proto.CompactTextString(m) }
func (*LabelsGet) ProtoMessage()    {}
func (*LabelsGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_19cf62577bbff668, []int{2}
}
func (m *LabelsGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsGet.Merge(m, src)
}
func (m *LabelsGet) XXX_Size() int {
	return m.Size()
}
func (m *LabelsGet) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsGet.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsGet proto.InternalMessageInfo

// LabelsAddToDialog
// @Function
// @Returns: Dialog
type LabelsAddToDialog struct {
	PeerType int32   `protobuf:"varint,1,req,name=PeerType" json:"PeerType"`
	PeerID   int64   `protobuf:"varint,2,req,name=PeerID" json:"PeerID"`
	LabelIDs []int32 `protobuf:"varint,3,rep,name=LabelIDs" json:"LabelIDs,omitempty"`
}

func (m *LabelsAddToDialog) Reset()         { *m = LabelsAddToDialog{} }
func (m *LabelsAddToDialog) String() string { return proto.CompactTextString(m) }
func (*LabelsAddToDialog) ProtoMessage()    {}
func (*LabelsAddToDialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_19cf62577bbff668, []int{3}
}
func (m *LabelsAddToDialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsAddToDialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsAddToDialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsAddToDialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsAddToDialog.Merge(m, src)
}
func (m *LabelsAddToDialog) XXX_Size() int {
	return m.Size()
}
func (m *LabelsAddToDialog) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsAddToDialog.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsAddToDialog proto.InternalMessageInfo

func (m *LabelsAddToDialog) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *LabelsAddToDialog) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *LabelsAddToDialog) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

// LabelsRemoveFromDialog
// @Function
// @Returns: Dialog
type LabelsRemoveFromDialog struct {
	PeerType int32   `protobuf:"varint,1,req,name=PeerType" json:"PeerType"`
	PeerID   int64   `protobuf:"varint,2,req,name=PeerID" json:"PeerID"`
	LabelIDs []int32 `protobuf:"varint,3,rep,name=LabelIDs" json:"LabelIDs,omitempty"`
}

func (m *LabelsRemoveFromDialog) Reset()         { *m = LabelsRemoveFromDialog{} }
func (m *LabelsRemoveFromDialog) String() string { return proto.CompactTextString(m) }
func (*LabelsRemoveFromDialog) ProtoMessage()    {}
func (*LabelsRemoveFromDialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_19cf62577bbff668, []int{4}
}
func (m *LabelsRemoveFromDialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsRemoveFromDialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsRemoveFromDialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsRemoveFromDialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsRemoveFromDialog.Merge(m, src)
}
func (m *LabelsRemoveFromDialog) XXX_Size() int {
	return m.Size()
}
func (m *LabelsRemoveFromDialog) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsRemoveFromDialog.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsRemoveFromDialog proto.InternalMessageInfo

func (m *LabelsRemoveFromDialog) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *LabelsRemoveFromDialog) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *LabelsRemoveFromDialog) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

// LabelsAddToMessage
// @Function
// @Returns: Bool
type LabelsAddToMessage struct {
	PeerType   int32   `protobuf:"varint,1,req,name=PeerType" json:"PeerType"`
	PeerID     int64   `protobuf:"varint,2,req,name=PeerID" json:"PeerID"`
	LabelIDs   []int32 `protobuf:"varint,3,rep,name=LabelIDs" json:"LabelIDs,omitempty"`
	MessageIDs []int64 `protobuf:"varint,4,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
}

func (m *LabelsAddToMessage) Reset()         { *m = LabelsAddToMessage{} }
func (m *LabelsAddToMessage) String() string { return proto.CompactTextString(m) }
func (*LabelsAddToMessage) ProtoMessage()    {}
func (*LabelsAddToMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_19cf62577bbff668, []int{5}
}
func (m *LabelsAddToMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsAddToMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsAddToMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsAddToMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsAddToMessage.Merge(m, src)
}
func (m *LabelsAddToMessage) XXX_Size() int {
	return m.Size()
}
func (m *LabelsAddToMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsAddToMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsAddToMessage proto.InternalMessageInfo

func (m *LabelsAddToMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *LabelsAddToMessage) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *LabelsAddToMessage) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

func (m *LabelsAddToMessage) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

// LabelsRemoveFromMessage
// @Function
// @Returns: Bool
type LabelsRemoveFromMessage struct {
	PeerType   int32   `protobuf:"varint,1,req,name=PeerType" json:"PeerType"`
	PeerID     int64   `protobuf:"varint,2,req,name=PeerID" json:"PeerID"`
	LabelIDs   []int32 `protobuf:"varint,3,rep,name=LabelIDs" json:"LabelIDs,omitempty"`
	MessageIDs []int64 `protobuf:"varint,4,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
}

func (m *LabelsRemoveFromMessage) Reset()         { *m = LabelsRemoveFromMessage{} }
func (m *LabelsRemoveFromMessage) String() string { return proto.CompactTextString(m) }
func (*LabelsRemoveFromMessage) ProtoMessage()    {}
func (*LabelsRemoveFromMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_19cf62577bbff668, []int{6}
}
func (m *LabelsRemoveFromMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsRemoveFromMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsRemoveFromMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsRemoveFromMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsRemoveFromMessage.Merge(m, src)
}
func (m *LabelsRemoveFromMessage) XXX_Size() int {
	return m.Size()
}
func (m *LabelsRemoveFromMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsRemoveFromMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsRemoveFromMessage proto.InternalMessageInfo

func (m *LabelsRemoveFromMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *LabelsRemoveFromMessage) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *LabelsRemoveFromMessage) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

func (m *LabelsRemoveFromMessage) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*LabelsSet)(nil), "msg.LabelsSet")
	proto.RegisterType((*LabelsDelete)(nil), "msg.LabelsDelete")
	proto.RegisterType((*LabelsGet)(nil), "msg.LabelsGet")
	proto.RegisterType((*LabelsAddToDialog)(nil), "msg.LabelsAddToDialog")
	proto.RegisterType((*LabelsRemoveFromDialog)(nil), "msg.LabelsRemoveFromDialog")
	proto.RegisterType((*LabelsAddToMessage)(nil), "msg.LabelsAddToMessage")
	proto.RegisterType((*LabelsRemoveFromMessage)(nil), "msg.LabelsRemoveFromMessage")
}

func init() { proto.RegisterFile("chat.api.labels.proto", fileDescriptor_19cf62577bbff668) }

var fileDescriptor_19cf62577bbff668 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x90, 0xcf, 0x4a, 0xc3, 0x30,
	0x18, 0xc0, 0x9b, 0xa6, 0xd3, 0xed, 0xd3, 0x8b, 0x01, 0x35, 0x88, 0xc4, 0xd2, 0x53, 0xf1, 0xd0,
	0x77, 0x70, 0x16, 0x65, 0xa0, 0x22, 0x75, 0x2f, 0x10, 0xb7, 0x8f, 0x3a, 0x68, 0x49, 0x69, 0xa2,
	0xe0, 0x5b, 0xec, 0xe2, 0x3b, 0xed, 0xb8, 0xa3, 0x27, 0x91, 0xf6, 0x45, 0xa4, 0xff, 0x46, 0xb7,
	0xbb, 0xe2, 0x2d, 0xdf, 0xef, 0x83, 0xfc, 0x7e, 0x09, 0x1c, 0xcf, 0x5e, 0xa4, 0x09, 0x64, 0xb6,
	0x08, 0x12, 0xf9, 0x8c, 0x89, 0x0e, 0xb2, 0x5c, 0x19, 0xc5, 0x68, 0xaa, 0x63, 0x6f, 0x06, 0xa3,
	0xbb, 0x1a, 0x3e, 0xa1, 0x61, 0x02, 0xf6, 0xeb, 0x61, 0x12, 0x72, 0xe2, 0xda, 0xfe, 0x60, 0xec,
	0xac, 0xbe, 0x2e, 0xac, 0xa8, 0x83, 0x8c, 0x83, 0xf3, 0x20, 0x53, 0xe4, 0xb6, 0x6b, 0xfb, 0xa3,
	0x76, 0x59, 0x13, 0x76, 0x0e, 0x7b, 0xd7, 0x2a, 0x51, 0xaf, 0x39, 0xa7, 0xbd, 0x5d, 0xcb, 0xbc,
	0x4b, 0x38, 0x6c, 0x24, 0x21, 0x26, 0x68, 0x90, 0x9d, 0xc1, 0xb0, 0xbd, 0x52, 0x73, 0xe2, 0x52,
	0x7f, 0x10, 0x6d, 0x66, 0xef, 0xa0, 0x0b, 0xba, 0x45, 0xe3, 0x29, 0x38, 0x6a, 0x86, 0xab, 0xf9,
	0x7c, 0xaa, 0xc2, 0x85, 0x4c, 0x54, 0xcc, 0x5c, 0x18, 0x3e, 0x22, 0xe6, 0xd3, 0xf7, 0x0c, 0xb7,
	0x32, 0x37, 0xb4, 0xaa, 0xa9, 0xce, 0x93, 0xb0, 0x2e, 0xa5, 0x5d, 0x4d, 0xc3, 0xb6, 0xec, 0x74,
	0xc7, 0x6e, 0xe0, 0xa4, 0x11, 0x46, 0x98, 0xaa, 0x37, 0xbc, 0xc9, 0x55, 0xfa, 0x07, 0xd6, 0x25,
	0x01, 0xd6, 0x7b, 0xe7, 0x3d, 0x6a, 0x2d, 0x63, 0xfc, 0x4d, 0x25, 0x13, 0x00, 0xad, 0xa6, 0xda,
	0x3a, 0x2e, 0xf5, 0x69, 0xd4, 0x23, 0xde, 0x07, 0x81, 0xd3, 0xdd, 0x9f, 0xf8, 0x07, 0x5d, 0x63,
	0xbe, 0x2a, 0x04, 0x59, 0x17, 0x82, 0x7c, 0x17, 0x82, 0x2c, 0x4b, 0x61, 0xad, 0x4b, 0x61, 0x7d,
	0x96, 0xc2, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xaf, 0x03, 0x09, 0xe6, 0x02, 0x00, 0x00,
}

func (m *LabelsSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Colour)
	copy(dAtA[i:], m.Colour)
	i = encodeVarintChatApiLabels(dAtA, i, uint64(len(m.Colour)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintChatApiLabels(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintChatApiLabels(dAtA, i, uint64(m.LabelID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *LabelsDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LabelIDs) > 0 {
		for iNdEx := len(m.LabelIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiLabels(dAtA, i, uint64(m.LabelIDs[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *LabelsGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LabelsAddToDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsAddToDialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsAddToDialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LabelIDs) > 0 {
		for iNdEx := len(m.LabelIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiLabels(dAtA, i, uint64(m.LabelIDs[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	i = encodeVarintChatApiLabels(dAtA, i, uint64(m.PeerID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatApiLabels(dAtA, i, uint64(m.PeerType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *LabelsRemoveFromDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsRemoveFromDialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsRemoveFromDialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LabelIDs) > 0 {
		for iNdEx := len(m.LabelIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiLabels(dAtA, i, uint64(m.LabelIDs[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	i = encodeVarintChatApiLabels(dAtA, i, uint64(m.PeerID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatApiLabels(dAtA, i, uint64(m.PeerType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *LabelsAddToMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsAddToMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsAddToMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		for iNdEx := len(m.MessageIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiLabels(dAtA, i, uint64(m.MessageIDs[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	if len(m.LabelIDs) > 0 {
		for iNdEx := len(m.LabelIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiLabels(dAtA, i, uint64(m.LabelIDs[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	i = encodeVarintChatApiLabels(dAtA, i, uint64(m.PeerID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatApiLabels(dAtA, i, uint64(m.PeerType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *LabelsRemoveFromMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsRemoveFromMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsRemoveFromMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		for iNdEx := len(m.MessageIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiLabels(dAtA, i, uint64(m.MessageIDs[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	if len(m.LabelIDs) > 0 {
		for iNdEx := len(m.LabelIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiLabels(dAtA, i, uint64(m.LabelIDs[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	i = encodeVarintChatApiLabels(dAtA, i, uint64(m.PeerID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatApiLabels(dAtA, i, uint64(m.PeerType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintChatApiLabels(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatApiLabels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LabelsSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiLabels(uint64(m.LabelID))
	l = len(m.Name)
	n += 1 + l + sovChatApiLabels(uint64(l))
	l = len(m.Colour)
	n += 1 + l + sovChatApiLabels(uint64(l))
	return n
}

func (m *LabelsDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LabelIDs) > 0 {
		for _, e := range m.LabelIDs {
			n += 1 + sovChatApiLabels(uint64(e))
		}
	}
	return n
}

func (m *LabelsGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LabelsAddToDialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiLabels(uint64(m.PeerType))
	n += 1 + sovChatApiLabels(uint64(m.PeerID))
	if len(m.LabelIDs) > 0 {
		for _, e := range m.LabelIDs {
			n += 1 + sovChatApiLabels(uint64(e))
		}
	}
	return n
}

func (m *LabelsRemoveFromDialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiLabels(uint64(m.PeerType))
	n += 1 + sovChatApiLabels(uint64(m.PeerID))
	if len(m.LabelIDs) > 0 {
		for _, e := range m.LabelIDs {
			n += 1 + sovChatApiLabels(uint64(e))
		}
	}
	return n
}

func (m *LabelsAddToMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiLabels(uint64(m.PeerType))
	n += 1 + sovChatApiLabels(uint64(m.PeerID))
	if len(m.LabelIDs) > 0 {
		for _, e := range m.LabelIDs {
			n += 1 + sovChatApiLabels(uint64(e))
		}
	}
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovChatApiLabels(uint64(e))
		}
	}
	return n
}

func (m *LabelsRemoveFromMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiLabels(uint64(m.PeerType))
	n += 1 + sovChatApiLabels(uint64(m.PeerID))
	if len(m.LabelIDs) > 0 {
		for _, e := range m.LabelIDs {
			n += 1 + sovChatApiLabels(uint64(e))
		}
	}
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovChatApiLabels(uint64(e))
		}
	}
	return n
}

func sovChatApiLabels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatApiLabels(x uint64) (n int) {
	return sovChatApiLabels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LabelsSet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelID", wireType)
			}
			m.LabelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colour", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Colour = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LabelID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Colour")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiLabels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsAddToDialog) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsAddToDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsAddToDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiLabels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsRemoveFromDialog) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsRemoveFromDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsRemoveFromDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiLabels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsAddToMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsAddToMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsAddToMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiLabels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiLabels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsRemoveFromMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsRemoveFromMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsRemoveFromMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiLabels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiLabels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiLabels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatApiLabels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatApiLabels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatApiLabels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatApiLabels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatApiLabels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatApiLabels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatApiLabels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatApiLabels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatApiLabels = fmt.Errorf("proto: unexpected end of group")
)
